-- Hero Event

-- Function to get all valid egg names in alphabetical order
local function getEggNames()
    local eggNames = {}
    local zones = workspace:FindFirstChild("Zones")

    if zones then
        for _, zone in pairs(zones:GetChildren()) do
            if zone:IsA("Folder") and not zone.Name:match("%d") then -- Ignore zones with numbers
                local interactables = zone:FindFirstChild("Interactables")
                if interactables then
                    local eggs = interactables:FindFirstChild("Eggs")
                    if eggs then
                        for _, egg in pairs(eggs:GetChildren()) do
                            table.insert(eggNames, egg.Name)
                        end
                    end
                end
            end
        end
    end

    table.sort(eggNames) -- Sort alphabetically
    return eggNames
end


game:GetService("ReplicatedStorage").Packages.Knit.Services.WrestleService.RF.OnAutoFight:InvokeServer()

-- Create a ScreenGui for our minimize button
local MinimizeGui = Instance.new("ScreenGui")
MinimizeGui.Name = "MinimizeGui"
MinimizeGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
MinimizeGui.ResetOnSpawn = false

-- Create the minimize button with centered positioning
local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Name = "MinimizeButton"
MinimizeButton.Parent = MinimizeGui
MinimizeButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
MinimizeButton.BorderColor3 = Color3.fromRGB(50, 50, 50)
MinimizeButton.AnchorPoint = Vector2.new(0.5, 0.5)
MinimizeButton.Position = UDim2.new(0.5, 0, 0.5, 0)
MinimizeButton.Size = UDim2.new(0, 80, 0, 40)
MinimizeButton.Font = Enum.Font.GothamBold
MinimizeButton.Text = "Close"
MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.TextSize = 16.000

-- Add corner radius
local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 6)
UICorner.Parent = MinimizeButton

-- Create X button for removal
local CloseButton = Instance.new("TextButton")
CloseButton.Name = "CloseButton"
CloseButton.Parent = MinimizeButton
CloseButton.BackgroundTransparency = 1
CloseButton.Position = UDim2.new(1, -20, 0, 0)
CloseButton.Size = UDim2.new(0, 20, 0, 20)
CloseButton.Font = Enum.Font.GothamBold
CloseButton.Text = "Ã—"
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextSize = 16.000
CloseButton.ZIndex = 2

-- Close button functionality
CloseButton.MouseButton1Click:Connect(function()
    -- Destroy the MinimizeButton and CloseButton
    MinimizeButton:Destroy()
    CloseButton:Destroy()
    -- Optionally, destroy the entire GUI if needed
    MinimizeGui:Destroy()
end)



-- Make button draggable
local UserInputService = game:GetService("UserInputService")
local dragging
local dragStart
local startPos

MinimizeButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = MinimizeButton.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
        local delta = input.Position - dragStart
        MinimizeButton.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Add hover effects for Event button
MinimizeButton.MouseEnter:Connect(function()
    game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
        BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    }):Play()
end)

MinimizeButton.MouseLeave:Connect(function()
    game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
        BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    }):Play()
end)

-- Add hover effects for close button
CloseButton.MouseEnter:Connect(function()
    game:GetService("TweenService"):Create(CloseButton, TweenInfo.new(0.2), {
        TextColor3 = Color3.fromRGB(255, 100, 100)
    }):Play()
end)

CloseButton.MouseLeave:Connect(function()
    game:GetService("TweenService"):Create(CloseButton, TweenInfo.new(0.2), {
        TextColor3 = Color3.fromRGB(255, 255, 255)
    }):Play()
end)

-- Add shadow
local Shadow = Instance.new("ImageLabel")
Shadow.Name = "Shadow"
Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
Shadow.BackgroundTransparency = 1
Shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
Shadow.Size = UDim2.new(1, 10, 1, 10)
Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
Shadow.ImageTransparency = 0.5
Shadow.Image = "rbxassetid://7912134082"
Shadow.Parent = MinimizeButton
Shadow.ZIndex = MinimizeButton.ZIndex - 1
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/Main.lua"))()
-- Create window with proper callbacks
local Window = Fluent:CreateWindow({
    Title = "Easter Event",
    SubTitle = "By Duckie",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl,
    OnDestroy = function()
        local fadeOut = game:GetService("TweenService"):Create(MinimizeGui, TweenInfo.new(0.5), {
            Transparency = 1
        })
        fadeOut:Play()
        fadeOut.Completed:Connect(function()
            MinimizeGui:Destroy()
        end)
    end
})

local Tabs = {
    Event = Window:AddTab({ Title = "Easter Event", Icon = "carrot" })
}

-- Initialize state
local isMinimized = false
Window:Minimize(false)

-- Regular minimize/maximize functionality
MinimizeButton.MouseButton1Click:Connect(function()
    isMinimized = not isMinimized
    Window:Minimize(isMinimized)

    local textTween = game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
        TextTransparency = 1
    })
    
    textTween:Play()
    textTween.Completed:Connect(function()
        MinimizeButton.Text = isMinimized and "Open" or "Close"
        game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
            TextTransparency = 0
        }):Play()
    end)
end)

-- Close button functionality 
CloseButton.MouseButton1Click:Connect(function()
    MinimizeGui:Destroy()
    Window:Destroy()
end)


local function GetCurrentZone()
    local player = game.Players.LocalPlayer

    -- Check if the player has the 'ZoneEasterEvent' attribute
    if player:GetAttribute("ZoneEasterEvent") then
        return "EasterEvent"
    end

    -- Return nil if the attribute isn't found
    return nil
end


    


local function GetBestPrisonEquipment()
    local player = game.Players.LocalPlayer
    local currentZone = GetCurrentZone()
    local zoneAttributes = {
        EasterEvent = "TotalEasterStrength2025",
    }
    
    local prisonBicep = player:GetAttribute(zoneAttributes[currentZone]) or 0
    local dumbbellData = require(game:GetService("ReplicatedStorage").Data.Dumbells)
    local defaultDumbbells = {
        EasterEvent = "EasterEvent1"
    }
    
    local bestDumbell = defaultDumbbells[currentZone]
    local highestRequired = 0
    
    if dumbbellData and dumbbellData[currentZone] then
        for name, data in pairs(dumbbellData[currentZone]) do
            if data.StrengthRequired and 
               prisonBicep >= data.StrengthRequired and 
               data.StrengthRequired > highestRequired then
                bestDumbell = name
                highestRequired = data.StrengthRequired
            end
        end
    end

    return bestDumbell
end

-- Add Training Section
local TrainSection = Tabs.Event:AddSection("Auto Train")

local TrainingDropdown = Tabs.Event:AddDropdown("TrainingSelect", {
    Title = "Select Training Type",
    Values = {"Dumbells"}, 
    Multi = false,
    Default = "Dumbells"
})

local AutoTrainToggle = Tabs.Event:AddToggle("AutoTrain", {
    Title = "Auto Train",
    Default = false
})

AutoTrainToggle:OnChanged(function()
    if AutoTrainToggle.Value then
        -- Function to equip Dumbells
        local function equipDumbells()
            local currentZone = GetCurrentZone()
            local equipment = GetBestPrisonEquipment()
            local args = {
                [1] = currentZone,
                [2] = "Dumbells", 
                [3] = equipment
            }
            game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onGuiEquipRequest:FireServer(unpack(args))
        end

        -- Equip immediately
        equipDumbells()

        -- Click loop (every 0.2 seconds)
        task.spawn(function()
            while AutoTrainToggle.Value do
                game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onClick:FireServer()
                task.wait(0.2)
            end
        end)

        -- Re-equip loop (every 5 seconds)
        task.spawn(function()
            while AutoTrainToggle.Value do
                task.wait(5)
                equipDumbells()
            end
        end)
    end
end)





-- Auto Fight Section
local FightSection = Tabs.Event:AddSection("Auto Fight")

local npcLocations = {
    EasterEvent = workspace.GameObjects.ArmWrestling.EasterEvent.NPC,
}

local modelNames = {}
local models = {}
local npcZones = {} -- Store which zone each NPC belongs to

-- Gather NPCs from all locations
for zone, path in pairs(npcLocations) do
    for _, npc in pairs(path:GetChildren()) do
        if npc:IsA("Model") then
            table.insert(models, npc)
            table.insert(modelNames, npc.Name)
            npcZones[npc.Name] = zone
        end
    end
end

table.sort(modelNames)

local modelDropdown = Tabs.Event:AddDropdown("ModelDropdown", {
    Title = "Select Boss",
    Values = modelNames,
    Multi = false,
    Default = modelNames[1]
})

local AutoFightToggle = Tabs.Event:AddToggle("AutoFight", {
    Title = "Auto Fight",
    Default = false
})

AutoFightToggle:OnChanged(function()
    if AutoFightToggle.Value then
        spawn(function()
            while AutoFightToggle.Value do
                local selectedNPC = modelDropdown.Value
                if selectedNPC then
                    local zone = npcZones[selectedNPC]
                    local npcPath = npcLocations[zone]
                    
                    if npcPath then
                        local npcModel = npcPath:FindFirstChild(selectedNPC)
                        if npcModel and npcModel:FindFirstChild("Table") then
                            local args = {
                                [1] = selectedNPC,
                                [2] = npcModel.Table,
                                [3] = zone
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onEnterNPCTable:FireServer(unpack(args))
                        end
                    end
                end
                wait(1)
            end
        end)
    end
end)

local AutoClickToggle = Tabs.Event:AddToggle("AutoClick", {
    Title = "Auto Click", 
    Default = false 
})

AutoClickToggle:OnChanged(function()
    if AutoClickToggle.Value then
        spawn(function()
            while true do
                if not AutoClickToggle.Value then break end
                game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onClickRequest:FireServer()
                wait(0.1)
            end
        end)
    end
end)




-- Eggs Section
local EggSection = Tabs.Event:AddSection("Eggs")

-- Hatch Amount Dropdown
local HatchAmountDropdown = Tabs.Event:AddDropdown("HatchAmount", {
    Title = "Hatch Amount",
    Values = {"1x", "3x", "8x", "30x", "Max"},
    Multi = false,
    Default = "1x"
})

-- Egg Selection Dropdown (Populated Dynamically)
local eggNames = getEggNames()
local EggDropdown = Tabs.Event:AddDropdown("EggSelect", {
    Title = "Select Egg",
    Values = eggNames,
    Multi = false,
    Default = eggNames[1] or "None"
})

-- Auto Hatch Toggle
local AutoHatchToggle = Tabs.Event:AddToggle("AutoHatch", {
    Title = "Auto Hatch",
    Default = false
})

AutoHatchToggle:OnChanged(function()
    if AutoHatchToggle.Value then
        spawn(function()
            while true do
                if not AutoHatchToggle.Value then break end

                local args = {}
                local selectedEgg = EggDropdown.Value
                local hatchMultiplier = HatchAmountDropdown.Value

                if hatchMultiplier == "1x" then
                    args = {selectedEgg, nil, nil, false, nil}
                elseif hatchMultiplier == "3x" then
                    args = {selectedEgg, nil, true, false}
                elseif hatchMultiplier == "8x" then
                    args = {selectedEgg, nil, false, true, true}
                elseif hatchMultiplier == "30x" then
                    args = {selectedEgg, nil, nil, false, nil, true}
                elseif hatchMultiplier == "Max" then
                    args = {selectedEgg, nil, nil, false, nil, true}
                end

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
                wait(0.001)
            end
        end)
    end
end)


local AutoUpgradeSection = Tabs.Event:AddSection("Auto Upgrade")

-- Power Multiplier Toggle
local PowerMultiplierToggle = AutoUpgradeSection:AddToggle("PowerMultiplier", {
    Title = "Easter Strength Multiplier",
    Description = "Auto upgrade Easter Strength Multiplier",
    Default = false
})

PowerMultiplierToggle:OnChanged(function()
    if PowerMultiplierToggle.Value then
        spawn(function()
            while PowerMultiplierToggle.Value do
                -- Buy 3 times with 1 second delay
                for i = 1, 3 do
                    local args = {
                        [1] = "Easter Strength Multiplier"
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.HeroUpgradeService.RF.BuyUpgrade:InvokeServer(unpack(args))
                    wait(1)
                end
                
                -- Wait 10 seconds before repeating
                wait(30)
            end
        end)
    end
end)

-- Knuckles Multiplier Toggle
local KnucklesMultiplierToggle = AutoUpgradeSection:AddToggle("KnucklesMultiplier", {
    Title = "Easter Egg Multiplier",
    Description = "Auto upgrade Easter Egg Multiplier",
    Default = false
})

KnucklesMultiplierToggle:OnChanged(function()
    if KnucklesMultiplierToggle.Value then
        spawn(function()
            while KnucklesMultiplierToggle.Value do
                -- Buy 3 times with 1 second delay
                for i = 1, 3 do
                    local args = {
                        [1] = "Easter Egg Multiplier"
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.HeroUpgradeService.RF.BuyUpgrade:InvokeServer(unpack(args))
                    wait(1)
                end
                
                -- Wait 10 seconds before repeating
                wait(30)
            end
        end)
    end
end)

-- Coins Multiplier Toggle
local CoinsMultiplierToggle = AutoUpgradeSection:AddToggle("CoinsMultiplier", {
    Title = "Luck Multiplier",
    Description = "Auto upgrade Luck Multiplier",
    Default = false
})

CoinsMultiplierToggle:OnChanged(function()
    if CoinsMultiplierToggle.Value then
        spawn(function()
            while CoinsMultiplierToggle.Value do
                -- Buy 3 times with 1 second delay
                for i = 1, 3 do
                    local args = {
                        [1] = "Luck Multiplier"
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.HeroUpgradeService.RF.BuyUpgrade:InvokeServer(unpack(args))
                    wait(1)
                end
                
                -- Wait 10 seconds before repeating
                wait(30)
            end
        end)
    end
end)


local MerchantSection = Tabs.Event:AddSection("Merchant")

local BlackMarketDropdown = Tabs.Event:AddDropdown("BlackMarketDropdown", {
    Title = "Select Merchant Slot(s)",
    Values = {1, 2, 3, 4, 5},
    Multi = true,
    Default = {}
})

local AutoBuyToggle = Tabs.Event:AddToggle("AutoBuyToggle", {
    Title = "Auto Buy (Selected Slots)",
    Default = false
})

AutoBuyToggle:OnChanged(function()
    if AutoBuyToggle.Value then
        spawn(function()
            while true do
                if not AutoBuyToggle.Value then break end
                -- Buy 3 times
                for i = 1, 3 do
                    for number, isSelected in pairs(BlackMarketDropdown.Value) do
                        if isSelected then
                            local args = {
                                [1] = "Bunnies Merchant",
                                [2] = number
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.LimitedMerchantService.RF.BuyItem:InvokeServer(unpack(args))
                            wait(1)
                        end
                    end
                end
                wait(30) -- Wait 30 seconds before next cycle
            end
        end)
    end
end)

