-- Ninja Event


game:GetService("ReplicatedStorage").Packages.Knit.Services.WrestleService.RF.OnAutoFight:InvokeServer()

-- Create a ScreenGui for our minimize button
local MinimizeGui = Instance.new("ScreenGui")
MinimizeGui.Name = "MinimizeGui"
MinimizeGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
MinimizeGui.ResetOnSpawn = false

-- Create the minimize button with centered positioning
local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Name = "MinimizeButton"
MinimizeButton.Parent = MinimizeGui
MinimizeButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
MinimizeButton.BorderColor3 = Color3.fromRGB(50, 50, 50)
MinimizeButton.AnchorPoint = Vector2.new(0.5, 0.5)
MinimizeButton.Position = UDim2.new(0.5, 0, 0.5, 0)
MinimizeButton.Size = UDim2.new(0, 80, 0, 40)
MinimizeButton.Font = Enum.Font.GothamBold
MinimizeButton.Text = "Close"
MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.TextSize = 16.000

-- Add corner radius
local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 6)
UICorner.Parent = MinimizeButton

-- Create X button for removal
local CloseButton = Instance.new("TextButton")
CloseButton.Name = "CloseButton"
CloseButton.Parent = MinimizeButton
CloseButton.BackgroundTransparency = 1
CloseButton.Position = UDim2.new(1, -20, 0, 0)
CloseButton.Size = UDim2.new(0, 20, 0, 20)
CloseButton.Font = Enum.Font.GothamBold
CloseButton.Text = "Ã—"
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextSize = 16.000
CloseButton.ZIndex = 2

-- Close button functionality
CloseButton.MouseButton1Click:Connect(function()
    -- Destroy the MinimizeButton and CloseButton
    MinimizeButton:Destroy()
    CloseButton:Destroy()
    -- Optionally, destroy the entire GUI if needed
    MinimizeGui:Destroy()
end)



-- Make button draggable
local UserInputService = game:GetService("UserInputService")
local dragging
local dragStart
local startPos

MinimizeButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = MinimizeButton.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
        local delta = input.Position - dragStart
        MinimizeButton.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Add hover effects for Event button
MinimizeButton.MouseEnter:Connect(function()
    game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
        BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    }):Play()
end)

MinimizeButton.MouseLeave:Connect(function()
    game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
        BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    }):Play()
end)

-- Add hover effects for close button
CloseButton.MouseEnter:Connect(function()
    game:GetService("TweenService"):Create(CloseButton, TweenInfo.new(0.2), {
        TextColor3 = Color3.fromRGB(255, 100, 100)
    }):Play()
end)

CloseButton.MouseLeave:Connect(function()
    game:GetService("TweenService"):Create(CloseButton, TweenInfo.new(0.2), {
        TextColor3 = Color3.fromRGB(255, 255, 255)
    }):Play()
end)

-- Add shadow
local Shadow = Instance.new("ImageLabel")
Shadow.Name = "Shadow"
Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
Shadow.BackgroundTransparency = 1
Shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
Shadow.Size = UDim2.new(1, 10, 1, 10)
Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
Shadow.ImageTransparency = 0.5
Shadow.Image = "rbxassetid://7912134082"
Shadow.Parent = MinimizeButton
Shadow.ZIndex = MinimizeButton.ZIndex - 1
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/Main.lua"))()
-- Create window with proper callbacks
local Window = Fluent:CreateWindow({
    Title = "Prison Event",
    SubTitle = "By Duckie",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl,
    OnDestroy = function()
        local fadeOut = game:GetService("TweenService"):Create(MinimizeGui, TweenInfo.new(0.5), {
            Transparency = 1
        })
        fadeOut:Play()
        fadeOut.Completed:Connect(function()
            MinimizeGui:Destroy()
        end)
    end
})

local Tabs = {
    Event = Window:AddTab({ Title = "Ninja Event", Icon = "sword" })

}

-- Initialize state
local isMinimized = false
Window:Minimize(false)

-- Regular minimize/maximize functionality
MinimizeButton.MouseButton1Click:Connect(function()
    isMinimized = not isMinimized
    Window:Minimize(isMinimized)

    local textTween = game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
        TextTransparency = 1
    })
    
    textTween:Play()
    textTween.Completed:Connect(function()
        MinimizeButton.Text = isMinimized and "Open" or "Close"
        game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
            TextTransparency = 0
        }):Play()
    end)
end)

-- Close button functionality 
CloseButton.MouseButton1Click:Connect(function()
    MinimizeGui:Destroy()
    Window:Destroy()
end)


local PlaytimeSection = Tabs.Event:AddSection("Playtime Pass")

local AutoPlaytimeToggle = PlaytimeSection:AddToggle("AutoPlaytime", {
    Title = "Auto Claim Playtime Pass",
    Default = false
})

AutoPlaytimeToggle:OnChanged(function()
    if AutoPlaytimeToggle.Value then
        -- Claim rewards immediately when enabled
        for i = 1, 12 do
            local args = {
                [1] = "Free",
                [2] = i
            }
            game:GetService("ReplicatedStorage").Packages.Knit.Services.EventPassService.RF.ClaimReward:InvokeServer(unpack(args))
        end
        
        -- Start reset/claim loop
        spawn(function()
            while AutoPlaytimeToggle.Value do
                wait(60) -- Wait before reset
                
                -- Reset pass
                game:GetService("ReplicatedStorage").Packages.Knit.Services.EventPassService.RF.Reset:InvokeServer()
                
                -- Claim all rewards after reset
                for i = 1, 12 do
                    local args = {
                        [1] = "Free",
                        [2] = i
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.EventPassService.RF.ClaimReward:InvokeServer(unpack(args))
                end
            end
        end)
    end
end)


local function GetCurrentZone()
    local player = game.Players.LocalPlayer
    -- Check each zone in priority order
    if player:GetAttribute("ZoneDragonTemple") then
        return "DragonTemple"
    elseif player:GetAttribute("ZoneBlossomHeights") then
        return "BlossomHeights"  
    elseif player:GetAttribute("ZoneBlossomVillage") then
        return "BlossomVillage"
    else
        return "NinjaSchool"
    end
end

local function GetBestPrisonBag()
    local player = game.Players.LocalPlayer
    local currentZone = GetCurrentZone()
    -- Updated attribute names for each zone
    local zoneAttributes = {
        DragonTemple = "TotalNinjaKnuckles",
        BlossomHeights = "TotalNinjaKnuckles",
        BlossomVillage = "TotalNinjaKnuckles",
        NinjaSchool = "TotalNinjaKnuckles"
    }
    
    local prisonKnuckle = player:GetAttribute(zoneAttributes[currentZone]) or 0
    local punchBagData = require(game:GetService("ReplicatedStorage").Data.PunchBags)
    
    if player:GetAttribute("VIP") == true then
        return "VIP"
    end
    
    local bestTier = "Tier1"  
    local highestRequired = 0
    
    if punchBagData and punchBagData[currentZone] then
        for tier, data in pairs(punchBagData[currentZone]) do
            if data.StrengthRequired and 
               prisonKnuckle >= data.StrengthRequired and 
               data.StrengthRequired > highestRequired then
                bestTier = tier
                highestRequired = data.StrengthRequired
            end
        end
    end
    
    return bestTier
end


local function GetBestPrisonEquipment()
    local player = game.Players.LocalPlayer
    local currentZone = GetCurrentZone()
    -- Updated attribute names for each zone
    local zoneAttributes = {
        DragonTemple = "TotalNinjaBicep",
        BlossomHeights = "TotalNinjaBicep", 
        BlossomVillage = "TotalNinjaBicep",
        NinjaSchool = "TotalNinjaBicep"
    }
    
    local prisonBicep = player:GetAttribute(zoneAttributes[currentZone]) or 0
    local dumbbellData = require(game:GetService("ReplicatedStorage").Data.Dumbells)
    -- Default dumbbell for each zone
    local defaultDumbbells = {
        DragonTemple = "DragonTemple1",
        BlossomHeights = "BlssomHeights1",
        BlossomVillage = "Blossom1",
        NinjaSchool = "Ninja1"
    }
    
    local bestDumbell = defaultDumbbells[currentZone]
    local highestRequired = 0
    
    if dumbbellData and dumbbellData[currentZone] then
        for name, data in pairs(dumbbellData[currentZone]) do
            if data.StrengthRequired and 
               prisonBicep >= data.StrengthRequired and 
               data.StrengthRequired > highestRequired then
                bestDumbell = name
                highestRequired = data.StrengthRequired
            end
        end
    end

    return bestDumbell
end

local function trainChi()
    game:GetService("ReplicatedStorage").Packages.Knit.Services.ChiService.RF.SetChi:InvokeServer()
end


-- Add Training Section
local TrainSection = Tabs.Event:AddSection("Auto Train")

local TrainingDropdown = Tabs.Event:AddDropdown("TrainingSelect", {
    Title = "Select Training Type",
    Values = {"Dumbells", "PunchBags", "Chi Zones"},
    Multi = false,
    Default = "Dumbells"
})

local AutoTrainToggle = Tabs.Event:AddToggle("AutoTrain", {
    Title = "Auto Train",
    Default = false
})

-- Create button after function exists
local TrainChiButton = Tabs.Event:AddButton({
    Title = "Train Chi",
    Description = "Trains Chi (Outside of Zones)",
    Callback = function()
        trainChi()
    end
})



local function getBestChiZone()
    local player = game.Players.LocalPlayer
    local chiLevel = player:GetAttribute("TotalNinjaChi") or 0
    
    -- Chi zone requirements and direct CFrames
    local chiZones = {
        {req = 2000, cf = CFrame.new(-2262.39429, 62.2289581, 6049.82715)},
        {req = 25000, cf = CFrame.new(-2140.29126, 62.2289581, 6114.97607)},
        {req = 250000, cf = CFrame.new(-2133.35864, 31.6659641, 7659.94141)},
        {req = 1000000, cf = CFrame.new(-2081.46436, 127.705963, 7722.24707)}             
    }
    
    local bestZone = nil
    for _, zone in ipairs(chiZones) do
        if chiLevel >= zone.req then
            bestZone = zone
        else
            break -- Stop checking once we find a zone that the player cannot access
        end
    end
    
    return bestZone
end




-- Update AutoTrainToggle handler
AutoTrainToggle:OnChanged(function()
    if AutoTrainToggle.Value then
        -- Start appropriate training loop based on selected type
        spawn(function()
            if TrainingDropdown.Value == "Dumbells" then
                -- Initial equipment
                local currentZone = GetCurrentZone()
                local equipment = GetBestPrisonEquipment()
                local args = {
                    [1] = currentZone,
                    [2] = "Dumbells", 
                    [3] = equipment
                }
                game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onGuiEquipRequest:FireServer(unpack(args))
                
                -- Re-equip and click loop
                spawn(function()
                    while AutoTrainToggle.Value do
                        -- Click
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onClick:FireServer()
                        wait(0.25)
                        
                        -- Re-equip every 6 seconds
                        local timeElapsed = 0
                        while timeElapsed < 6 and AutoTrainToggle.Value do
                            wait(0.25)
                            timeElapsed = timeElapsed + 0.25
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onClick:FireServer()
                        end
                        
                        if AutoTrainToggle.Value then
                            local currentZone = GetCurrentZone()
                            local equipment = GetBestPrisonEquipment()
                            local args = {
                                [1] = currentZone,
                                [2] = "Dumbells",
                                [3] = equipment
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onGuiEquipRequest:FireServer(unpack(args))
                        end
                    end
                end)
                
            elseif TrainingDropdown.Value == "Chi Zones" then
                spawn(function()
                    while AutoTrainToggle.Value and TrainingDropdown.Value == "Chi Zones" do
                        -- Get best zone and teleport
                        local bestZone = getBestChiZone()
                        if bestZone then
                            game.Players.LocalPlayer.Character:PivotTo(bestZone.cf)
                        end
                        
                        -- Train chi
                        trainChi()
                        
                        -- Wait 10 seconds between trains
                        local timeElapsed = 0
                        while timeElapsed < 3 and AutoTrainToggle.Value and TrainingDropdown.Value == "Chi Zones" do
                            wait(1)
                            timeElapsed = timeElapsed + 1
                        end
                        
                        -- Break if toggle off or training changed
                        if not AutoTrainToggle.Value or TrainingDropdown.Value ~= "Chi Zones" then break end
                    end
                end)
                
            else -- PunchBags
                spawn(function() 
                    while AutoTrainToggle.Value do
                        local currentZone = GetCurrentZone()
                        local tier = GetBestPrisonBag()
                        local bag = workspace.Zones[currentZone].Interactables.Training.PunchBags[tier]
                        
                        if bag then
                            local bagCFrame = bag:GetPivot()
                            game.Players.LocalPlayer.Character:PivotTo(bagCFrame * CFrame.new(0, 0, -5))
                            
                            local args = {
                                [1] = currentZone,
                                [2] = tier,
                                [3] = game.Players.LocalPlayer:GetAttribute("VIP") == true
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.PunchBagService.RE.onGiveStats:FireServer(unpack(args))
                        end
                        wait(0.25)
                    end
                end)
            end
        end)
    end
end)


-- Connect attribute change listeners
local player = game.Players.LocalPlayer
player:GetAttributeChangedSignal("ZoneBlossomVillage"):Connect(onAttributeChanged)
player:GetAttributeChangedSignal("TotalNinjaChi"):Connect(onAttributeChanged)
player:GetAttributeChangedSignal("TotalNinjaBicep"):Connect(onAttributeChanged)
player:GetAttributeChangedSignal("TotalNinjaKnuckles"):Connect(onAttributeChanged)
player:GetAttributeChangedSignal("TotalBlossomBicep"):Connect(onAttributeChanged)
player:GetAttributeChangedSignal("TotalBlossomKnuckles"):Connect(onAttributeChanged)


-- Auto Fight Section
local FightSection = Tabs.Event:AddSection("Auto Fight")

local npcLocations = {
    {path = workspace.GameObjects.ArmWrestling.NinjaSchool.NPC, zone = "NinjaSchool"},
    {path = workspace.GameObjects.ArmWrestling.BlossomVillage.NPC, zone = "BlossomVillage"},
    {path = workspace.GameObjects.ArmWrestling.BlossomHeights.NPC, zone = "BlossomHeights"},
    {path = workspace.GameObjects.ArmWrestling.DragonTemple.NPC, zone = "DragonTemple"}
}

local modelNames = {}
local models = {}
local npcZones = {} -- Store which zone each NPC belongs to

-- Gather NPCs from all locations
for _, location in pairs(npcLocations) do
    for _, npc in pairs(location.path:GetChildren()) do
        if npc:IsA("Model") then
            table.insert(models, npc)
            table.insert(modelNames, npc.Name)
            npcZones[npc.Name] = location.zone
        end
    end
end

table.sort(modelNames)

local modelDropdown = Tabs.Event:AddDropdown("ModelDropdown", {
    Title = "Select Boss",
    Values = modelNames,
    Multi = false,
    Default = modelNames[1]
})

local AutoFightToggle = Tabs.Event:AddToggle("AutoFight", {
    Title = "Auto Fight",
    Default = false
})

AutoFightToggle:OnChanged(function()
    if AutoFightToggle.Value then
        spawn(function()
            while true do
                if not AutoFightToggle.Value then break end
                local selectedNPC = modelDropdown.Value
                if selectedNPC then
                    -- Find the correct path based on the zone
                    local zone = npcZones[selectedNPC]
                    local npcPath

                    if zone == "NinjaSchool" then
                        npcPath = workspace.GameObjects.ArmWrestling.NinjaSchool.NPC
                    elseif zone == "BlossomVillage" then
                        npcPath = workspace.GameObjects.ArmWrestling.BlossomVillage.NPC
                    elseif zone == "BlossomHeights" then
                        npcPath = workspace.GameObjects.ArmWrestling.BlossomHeights.NPC
                    elseif zone == "DragonTemple" then
                        npcPath = workspace.GameObjects.ArmWrestling.DragonTemple.NPC
                    end
                
                    
                    local npcModel = npcPath:FindFirstChild(selectedNPC)
                    if npcModel and npcModel:FindFirstChild("Table") then
                        local args = {
                            [1] = selectedNPC,
                            [2] = npcModel.Table,
                            [3] = zone
                        }
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onEnterNPCTable:FireServer(unpack(args))
                    end
                end
                wait(1)
            end
        end)
    end
end)

local AutoClickToggle = Tabs.Event:AddToggle("AutoClick", {
    Title = "Auto Click", 
    Default = false 
})

AutoClickToggle:OnChanged(function()
    if AutoClickToggle.Value then
        spawn(function()
            while true do
                if not AutoClickToggle.Value then break end
                game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onClickRequest:FireServer()
                wait(0.1)
            end
        end)
    end
end)


local NPCSection = Tabs.Event:AddSection("Auto NPC Farm")
local npcPath = workspace.GameObjects.RngNPCs.BlossomVillage.Npc
local isAutoFarming = false

local function updateProximityPrompts(folder)
    for _, descendant in ipairs(folder:GetDescendants()) do
        if descendant:IsA("ProximityPrompt") then
            descendant.HoldDuration = 0
            descendant.Style = Enum.ProximityPromptStyle.Default
            descendant.MaxActivationDistance = 1000000000000
            -- Directly trigger the proximity prompt
            fireproximityprompt(descendant)
        end
    end
end

local AutoBeatNPCToggle = Tabs.Event:AddToggle("AutoBeatNPC", {
    Title = "Auto Beat NPC",
    Description = "Auto Fight Blossom Village NPCs",
    Default = false
})

AutoBeatNPCToggle:OnChanged(function()
    isAutoFarming = AutoBeatNPCToggle.Value
    
    if isAutoFarming then
        -- Start proximity prompt updates
        spawn(function()
            while true do
                if not AutoBeatNPCToggle.Value then break end
                updateProximityPrompts(npcPath)
                wait(1)
            end
        end)
    else
        -- Reset proximity prompt distance when toggle is turned off
        for _, descendant in ipairs(npcPath:GetDescendants()) do
            if descendant:IsA("ProximityPrompt") then
                descendant.MaxActivationDistance = 6
            end
        end
    end
end)

-- Eggs Section
local EggSection = Tabs.Event:AddSection("Eggs")

-- Hatch Amount Dropdown
local HatchAmountDropdown = Tabs.Event:AddDropdown("HatchAmount", {
    Title = "Hatch Amount",
    Values = {"1x", "3x", "8x", "30x", "Max"},
    Multi = false,
    Default = "1x"
})

-- Egg Selection Dropdown
local EggDropdown = Tabs.Event:AddDropdown("EggSelect", {
    Title = "Select Egg",
    Values = {"Ninja", "Sensei", "Blossom", "Samurai", "Dragon"},
    Multi = false,
    Default = "Ninja"
})

-- Auto Hatch Toggle
local AutoHatchToggle = Tabs.Event:AddToggle("AutoHatch", {
    Title = "Auto Hatch",
    Default = false
})

AutoHatchToggle:OnChanged(function()
    if AutoHatchToggle.Value then
        spawn(function()
            while true do
                if not AutoHatchToggle.Value then break end
                
                local args = {}
                local selectedEgg = EggDropdown.Value
                local hatchMultiplier = HatchAmountDropdown.Value
                
                if hatchMultiplier == "1x" then
                    args = {selectedEgg, nil, false, true, false}
                elseif hatchMultiplier == "3x" then
                    args = {selectedEgg, nil, true, false}
                elseif hatchMultiplier == "8x" then
                    args = {selectedEgg, nil, false, true, true}
                elseif hatchMultiplier == "30x" then
                    args = {selectedEgg, nil, nil, false, nil, true}
                elseif hatchMultiplier == "Max" then
                    args = {selectedEgg, nil, nil, false, nil, true}
                end
                
                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
                wait(0.001)
            end
        end)
    end
end)


local MerchantSection = Tabs.Event:AddSection("Merchant")

local BlackMarketDropdown = Tabs.Event:AddDropdown("BlackMarketDropdown", {
    Title = "Select Merchant Slot(s)",
    Values = {1, 2, 3, 4, 5},
    Multi = true,
    Default = {}
})

local AutoBuyToggle = Tabs.Event:AddToggle("AutoBuyToggle", {
    Title = "Auto Buy (Selected Slots)",
    Default = false
})

AutoBuyToggle:OnChanged(function()
    if AutoBuyToggle.Value then
        spawn(function()
            while true do
                if not AutoBuyToggle.Value then break end
                -- Buy 3 times
                for i = 1, 3 do
                    for number, isSelected in pairs(BlackMarketDropdown.Value) do
                        if isSelected then
                            local args = {
                                [1] = "Blossom Merchant",
                                [2] = number
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.LimitedMerchantService.RF.BuyItem:InvokeServer(unpack(args))
                            wait(1)
                        end
                    end
                end
                wait(30) -- Wait 30 seconds before next cycle
            end
        end)
    end
end)



-- Belt Section
local BeltSection = Tabs.Event:AddSection("Auto Buy Belts")

-- Toggle for Auto Buy
local AutoBuyBeltsToggle = Tabs.Event:AddToggle("AutoBuyBelts", {
    Title = "Buy Belts",
    Description = "WARNING: It will keep buying the best belts for you, until you run out of Ninja Yen, or until you turn the toggle off.",
    Default = false
})

-- Static belt prices table
local beltPrices = {
    ["White"] = 0,
    ["Yellow"] = 500,
    ["Orange"] = 1250,
    ["Green"] = 5000,
    ["Blue"] = 12500,
    ["Purple"] = 25000,
    ["Brown"] = 50000,
    ["Red"] = 100000,
    ["Black"] = 250000,
    ["Ember"] = 500000,
    ["Storm"] = 1000000,
    ["Wind"] = 2500000,
    ["Nightfall"] = 5000000,
    ["Flare"] = 10000000,
    ["Rift"] = 25000000,
    ["Ironclad"] = 50000000,
    ["Chaos"] = 100000000,
    ["Vortex"] = 250000000,
    ["Nova"] = 350000000,
    ["Eternal"] = 500000000,
    ["Dragon"] = 1000000000
}

-- Create sorted belt order
local beltOrder = {}
for belt, price in pairs(beltPrices) do
    table.insert(beltOrder, {name = belt, price = price})
end
table.sort(beltOrder, function(a, b) return a.price < b.price end)

-- Function to find next belt in progression
local function findNextBelt(currentBelt)
    local currentPrice = beltPrices[currentBelt]
    
    for i, beltData in ipairs(beltOrder) do
        if beltData.price > currentPrice then
            return beltData.name, beltData.price
        end
    end
    return nil, nil
end

AutoBuyBeltsToggle:OnChanged(function()
    if AutoBuyBeltsToggle.Value then
        spawn(function()
            while true do
                if not AutoBuyBeltsToggle.Value then break end
                
                local player = game.Players.LocalPlayer
                local ninjaYen = player:GetAttribute("NinjaYen")
                local equippedBelt = player:GetAttribute("EquippedNinjaBelt")
       
                
                if ninjaYen and equippedBelt then
                    -- Keep trying to buy next belts while we have enough yen
                    local currentBelt = equippedBelt
                    while true do
                        local nextBelt, nextPrice = findNextBelt(currentBelt)
                        
                        if not nextBelt then
                            break
                        end
                        
                        
                        if ninjaYen >= nextPrice then
                            local args = {
                                [1] = nextBelt
                            }
                            local success = game:GetService("ReplicatedStorage").Packages.Knit.Services.BeltService.RF.ClickedBuyButton:InvokeServer(unpack(args))
                            
                            if success then
                                currentBelt = nextBelt
                                wait(2) -- 2 second delay between purchases
                            else
                                break
                            end
                        else
                            break
                        end
                    end
                end
                
                wait(2)
            end
        end)
    end
end)


local ChestSection = Tabs.Event:AddSection("Ninja Chest")


-- Auto Claim Santa Sleigh Gift toggle
local AutoClaimToggle = Tabs.Event:AddToggle("AutoClaimSantaSleigh", { 
    Title = "Auto Claim Ninja Chest", 
    Default = false 
})

AutoClaimToggle:OnChanged(function()
    if AutoClaimToggle.Value then
        while AutoClaimToggle.Value do
            local args = {
                [1] = "NinjaChest"
            }
            game:GetService("ReplicatedStorage").Packages.Knit.Services.FreeGiftService.RF.Claim:InvokeServer(unpack(args))
            wait(30)
        end
    end
end)
       

local TowerSection = Tabs.Event:AddSection("Towers")

-- Prison Cave Buttons
TowerSection:AddButton({
    Title = "Use Ninja Tower Key (1x)",
    Description = "Use the Ninja Tower Key once.",
    Callback = function()
        local args = {
            [1] = "NinjaTower",
            [2] = false
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
    end
})

TowerSection:AddButton({
    Title = "Use All Ninja Tower Keys (250x)",
    Description = "Use All Ninja Tower Keys (max 250 at a time).",
    Callback = function()
        local args = {
            [1] = "NinjaTower",
            [2] = true
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
    end
})

-- After TowerSection

-- Dragon Trial Section
local DragonTrialSection = Tabs.Event:AddSection("Dragon Trial")

-- Toggle state tracking
local wasAutoFightOn = false
local wasAutoBeatNPCOn = false
local wasAutoTrainOn = false


-- Add Status Label for cooldown
local DragonTrialStatus = DragonTrialSection:AddParagraph({
    Title = "Dragon Trial Cooldown",
    Content = "Loading..."
})

-- Update status every second
spawn(function()
    while true do
        local success, timerGui = pcall(function()
            return game:GetService("Players").LocalPlayer.PlayerGui.Misc.Trials.Timer.Dragon.Timer
        end)
        
        if success and timerGui then
            DragonTrialStatus:SetDesc(timerGui.Text)
        else
            DragonTrialStatus:SetDesc("Error getting timer")
        end
        wait(1)
    end
end)

local AutoDragonTrialToggle = DragonTrialSection:AddToggle("AutoDragonTrial", {
    Title = "Auto Dragon Trial",
    Description = "Auto join the dragon trial. It will temporarily turn off the toggles for Auto Fight, Auto Beat NPC, and Auto Train if you had them enabled. It will returnn them to their previous state after the trial.",
    Default = false
})

AutoDragonTrialToggle:OnChanged(function()
    if AutoDragonTrialToggle.Value then
        spawn(function()
            while AutoDragonTrialToggle.Value do
                local success, timerGui = pcall(function()
                    return game:GetService("Players").LocalPlayer.PlayerGui.Misc.Trials.Timer.Dragon.Timer
                end)
                
                if success and timerGui and timerGui.Text == "Ready!" then
                    -- Store toggle states
                    wasAutoFightOn = AutoFightToggle and AutoFightToggle.Value or false
                    wasAutoBeatNPCOn = AutoBeatNPCToggle and AutoBeatNPCToggle.Value or false 
                    wasAutoTrainOn = AutoTrainToggle and AutoTrainToggle.Value or false

                    -- Disable toggles with retry
                    for _, v in pairs({
                        {toggle = AutoFightToggle, state = wasAutoFightOn},
                        {toggle = AutoBeatNPCToggle, state = wasAutoBeatNPCOn},
                        {toggle = AutoTrainToggle, state = wasAutoTrainOn}
                    }) do
                        if v.state and v.toggle then
                            for i=1,3 do
                                v.toggle:SetValue(false)
                                wait(1)
                                if not v.toggle.Value then break end
                            end
                        end
                    end

                    wait(6)
                    
                    -- Join trial with retry
                    for i=1,3 do
                        local args = {[1] = "Dragon"}
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.ChampionshipService.RF.RequestJoin:InvokeServer(unpack(args))
                        wait(0.5)
                    end

                    -- Wait for trial completion
                    local function getTime()
                        return tonumber(timerGui.Text) or 0
                    end

                    wait(1.5) -- Initial delay
                    
                    local lastTime = getTime()
                    local stuckCounter = 0
                    
                    while getTime() > 0 do
                        wait(1)
                        local currentTime = getTime()
                        if currentTime == lastTime then
                            stuckCounter = stuckCounter + 1
                            if stuckCounter > 10 then break end
                        else
                            stuckCounter = 0
                            lastTime = currentTime
                        end
                    end

                    wait(1.5) -- Safety delay

                    -- Restore toggles with retry
                    for _, v in pairs({
                        {toggle = AutoFightToggle, state = wasAutoFightOn},
                        {toggle = AutoBeatNPCToggle, state = wasAutoBeatNPCOn},
                        {toggle = AutoTrainToggle, state = wasAutoTrainOn}
                    }) do
                        if v.state and v.toggle then
                            for i=1,3 do
                                v.toggle:SetValue(true)
                                wait(0.5)
                                if v.toggle.Value then break end
                            end
                        end
                    end
                end
                wait(1)
            end
        end)
    end
end)

-- Hidden Roulette Section
local HiddenSection = Tabs.Event:AddSection("Ninja Fortnue Wheel")

local HiddenSpinDropdown = Tabs.Event:AddDropdown("HiddenSpinAmount", {
    Title = "Ninja Fortune Spin Amount",
    Description = "Select Wheel Spin Amount",
    Values = {"1x", "3x", "10x"},
    Multi = false,
    Default = "1x"
})

local AutoHiddenToggle = Tabs.Event:AddToggle("AutoHiddenSpin", {
    Title = "Auto Ninja Fortune Wheel",
    Default = false
})

AutoHiddenToggle:OnChanged(function()
    if AutoHiddenToggle.Value then
        spawn(function()
            while true do
                if not AutoHiddenToggle.Value then break end
                
                local args = {
                    [1] = "Ninja Fortune",
                    [2] = HiddenSpinDropdown.Value == "3x" and "x10" or HiddenSpinDropdown.Value == "10x" and "x25" or nil
                }
                game:GetService("ReplicatedStorage").Packages.Knit.Services.SpinnerService.RF.Spin:InvokeServer(unpack(args))
                
                wait(1)
            end
        end)
    end
end)

