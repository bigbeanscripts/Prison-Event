-- Prison
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local Window = Fluent:CreateWindow({
    Title = "Prisoner Event",
    SubTitle = "by Duckie",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Prison Event", Icon = "siren" })

}

-- Add before sections
local function GetBestPrisonBag()
    local player = game.Players.LocalPlayer
    local prisonKnuckle = player:GetAttribute("TotalPrisonKnuckle") or 0
    local punchBagData = require(game:GetService("ReplicatedStorage").Data.PunchBags)
    
    -- Check VIP first
    if player:GetAttribute("VIP") then
        print("Using VIP bag")
        return "VIP"
    end
    
    -- Find best qualifying tier
    local bestTier = "Tier1"
    local highestRequired = 0
    
    if punchBagData and punchBagData.PrisonEvent then
        for tier, data in pairs(punchBagData.PrisonEvent) do
            if data.StrengthRequired and 
               prisonKnuckle >= data.StrengthRequired and 
               data.StrengthRequired > highestRequired then
                bestTier = tier
                highestRequired = data.StrengthRequired
            end
        end
    end
    
    print(string.format("Selected PunchBag: %s (Required: %d, Current: %d)", 
        bestTier, highestRequired, prisonKnuckle))
    return bestTier
end

local function GetBestPrisonEquipment()
    local player = game.Players.LocalPlayer
    local prisonBicep = player:GetAttribute("TotalPrisonBicep") or 0
    local dumbbellData = require(game:GetService("ReplicatedStorage").Data.Dumbells)
    local bestDumbell = "Prison1"
    local highestRequired = 0
    
    if dumbbellData and dumbbellData.PrisonEvent then
        for name, data in pairs(dumbbellData.PrisonEvent) do
            if data.StrengthRequired and 
               prisonBicep >= data.StrengthRequired and 
               data.StrengthRequired > highestRequired then
                bestDumbell = name
                highestRequired = data.StrengthRequired
            end
        end
    end
    
    print(string.format("Selected Dumbell: %s (Required: %d, Current: %d)",
        bestDumbell, highestRequired, prisonBicep))
    return bestDumbell
end

-- Add Training Section
local TrainSection = Tabs.Main:AddSection("Auto Train")

local TrainingDropdown = Tabs.Main:AddDropdown("TrainingSelect", {
    Title = "Select Training Type",
    Values = {"Dumbells", "PunchBags"},
    Multi = false,
    Default = "Dumbells"
})

local AutoTrainToggle = Tabs.Main:AddToggle("AutoTrain", {
    Title = "Auto Train",
    Default = false
})

AutoTrainToggle:OnChanged(function()
    if AutoTrainToggle.Value then
        -- Equipment/Position check (10s)
        spawn(function()
            while AutoTrainToggle.Value do
                if TrainingDropdown.Value == "Dumbells" then
                    local equipment = GetBestPrisonEquipment()
                    local args = {
                        [1] = "PrisonEvent",
                        [2] = "Dumbells",
                        [3] = equipment
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onGuiEquipRequest:FireServer(unpack(args))
                else
                    local tier = GetBestPrisonBag()
                    local bag = workspace.Zones.PrisonEvent.Interactables.Training.PunchBags[tier]
                    if bag then
                        local bagCFrame = bag:GetPivot()
                        local teleportPos = bagCFrame * CFrame.new(0, 0, -3)
                        game.Players.LocalPlayer.Character:PivotTo(teleportPos)
                        
                        -- Send stats
                        local args = {
                            [1] = "PrisonEvent",
                            [2] = tier
                        }
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.PunchBagService.RE.onGiveStats:FireServer(unpack(args))
                    end
                end
                wait(10)
            end
        end)
        
        -- Stats update (0.5s)
        spawn(function()
            while AutoTrainToggle.Value do
                if TrainingDropdown.Value == "Dumbells" then
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onClick:FireServer()
                else
                    local tier = GetBestPrisonBag()
                    local args = {
                        [1] = "PrisonEvent",
                        [2] = tier
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.PunchBagService.RE.onGiveStats:FireServer(unpack(args))
                end
                wait(0.5)
            end
        end)
    end
end)

-- Rest of existing code remains the same...


-- Auto Fight Section
local FightSection = Tabs.Main:AddSection("Auto Fight")

local npcFolderPath = workspace.GameObjects.ArmWrestling.PrisonEvent.NPC
local modelNames = {}
local models = {}

for _, npc in pairs(npcFolderPath:GetChildren()) do
    if npc:IsA("Model") then
        table.insert(models, npc)
        table.insert(modelNames, npc.Name)
    end
end

table.sort(modelNames)

local modelDropdown = Tabs.Main:AddDropdown("ModelDropdown", {
    Title = "Select Boss",
    Values = modelNames,
    Multi = false,
    Default = modelNames[1]
})

local AutoFightToggle = Tabs.Main:AddToggle("AutoFight", {
    Title = "Auto Fight", 
    Default = false 
})

AutoFightToggle:OnChanged(function()
    if AutoFightToggle.Value then
        spawn(function()
            while true do
                if not AutoFightToggle.Value then break end
                local selectedNPC = modelDropdown.Value
                if selectedNPC then
                    local npcModel = npcFolderPath:FindFirstChild(selectedNPC)
                    if npcModel and npcModel:FindFirstChild("Table") then
                        local args = {
                            [1] = selectedNPC,
                            [2] = npcModel.Table,
                            [3] = "PrisonEvent"
                        }
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onEnterNPCTable:FireServer(unpack(args))
                    end
                end
                wait(1)
            end
        end)
    end
end)

local AutoClickToggle = Tabs.Main:AddToggle("AutoClick", {
    Title = "Auto Click", 
    Default = false 
})

AutoClickToggle:OnChanged(function()
    if AutoClickToggle.Value then
        spawn(function()
            while true do
                if not AutoClickToggle.Value then break end
                game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onClickRequest:FireServer()
                wait(0.1)
            end
        end)
    end
end)

local NPCSection = Tabs.Main:AddSection("Auto NPC Farm")

local VirtualInputManager = game:GetService("VirtualInputManager")
local npcFolderPath = workspace.GameObjects.ArmWrestling.PrisonEvent.NPC
local snowstormPath = workspace.GameObjects.RngNPCs["PrisonEvent-Underground"].Npc
local isAutoFarming = false
local isBossFighting = false

local function updateProximityPrompts(folder)
    for _, descendant in ipairs(folder:GetDescendants()) do
        if descendant:IsA("ProximityPrompt") then
            descendant.HoldDuration = 0
            descendant.Style = Enum.ProximityPromptStyle.Default
            descendant.MaxActivationDistance = 6
        end
    end
end

local function simulateKeyPress()
    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
    task.wait(1)
    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
end

local AutoBeatNPCToggle = Tabs.Main:AddToggle("AutoBeatNPC", {
    Title = "Auto Beat NPC",
    Description = "Auto Fight Underground NPCs",
    Default = false
})

AutoBeatNPCToggle:OnChanged(function()
    isAutoFarming = AutoBeatNPCToggle.Value
    
    if isAutoFarming then
        -- Start proximity prompt updates
        spawn(function()
            while true do
                if not AutoBeatNPCToggle.Value then break end
                updateProximityPrompts(snowstormPath)
                wait(1)
            end
        end)
        
        -- Start key simulation
        spawn(function()
            while true do
                if not AutoBeatNPCToggle.Value then break end
                
                local npcs = snowstormPath:GetChildren()
                if #npcs > 0 then
                    simulateKeyPress()
                end
                
                task.wait(1)
            end
        end)
        
        -- Main NPC farming loop
        spawn(function()
            while true do
                if not AutoBeatNPCToggle.Value then break end
                
                local npcs = snowstormPath:GetChildren()
                if #npcs > 0 then
                    for _, npc in ipairs(npcs) do
                        if not AutoBeatNPCToggle.Value then break end
                        
                        if npc:IsA("Model") and npc:FindFirstChild("Table") and 
                           npc.Table:FindFirstChild("PlayerRoot") then
                            local humanoid = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                            if humanoid then
                                humanoid.CFrame = npc.Table.PlayerRoot.CFrame
                                wait(4)
                            end
                        end
                    end
                end
                wait(0.1)
            end
        end)
    end
end)

-- Eggs Section
local EggSection = Tabs.Main:AddSection("Eggs")

-- Hatch Amount Dropdown
local HatchAmountDropdown = Tabs.Main:AddDropdown("HatchAmount", {
    Title = "Hatch Amount",
    Values = {"1x", "3x", "8x", "30x"},
    Multi = false,
    Default = "1x"
})

-- Egg Selection Dropdown
local EggDropdown = Tabs.Main:AddDropdown("EggSelect", {
    Title = "Select Egg",
    Values = {"Prison", "Police"},
    Multi = false,
    Default = "Prison"
})

-- Auto Hatch Toggle
local AutoHatchToggle = Tabs.Main:AddToggle("AutoHatch", {
    Title = "Auto Hatch",
    Default = false
})

AutoHatchToggle:OnChanged(function()
    if AutoHatchToggle.Value then
        spawn(function()
            while true do
                if not AutoHatchToggle.Value then break end
                
                local args = {}
                local selectedEgg = EggDropdown.Value
                local hatchMultiplier = HatchAmountDropdown.Value
                
                if hatchMultiplier == "1x" then
                    args = {selectedEgg, nil, false, true, false}
                elseif hatchMultiplier == "3x" then
                    args = {selectedEgg, nil, true, false}
                elseif hatchMultiplier == "8x" then
                    args = {selectedEgg, nil, false, true, true}
                elseif hatchMultiplier == "30x" then
                    args = {selectedEgg, nil, nil, false, nil, true}
                end
                
                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
                wait(0.001)
            end
        end)
    end
end)



local TowerSection = Tabs.Main:AddSection("Towers")

-- Prison Cave Buttons
TowerSection:AddButton({
    Title = "Use Prison Cave Key (1x)",
    Description = "Use the Prison Cave Key once.",
    Callback = function()
        local args = {
            [1] = "PrisonCave",
            [2] = false
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
    end
})

TowerSection:AddButton({
    Title = "Use All Prison Cave Keys (250x)",
    Description = "Use All Prison Cave Keys (max 250 at a time).",
    Callback = function()
        local args = {
            [1] = "PrisonCave",
            [2] = true
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
    end
})

-- Police Shakedown Buttons
TowerSection:AddButton({
    Title = "Use Police Shakedown Key (1x)",
    Description = "Use the Police Shakedown Key once.",
    Callback = function()
        local args = {
            [1] = "PoliceShakedown",
            [2] = false
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
    end
})

TowerSection:AddButton({
    Title = "Use All Police Shakedown Keys (250x)",
    Description = "Use All Police Shakedown Keys (max 250 at a time).",
    Callback = function()
        local args = {
            [1] = "PoliceShakedown",
            [2] = true
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
    end
})
local MerchantSection = Tabs.Main:AddSection("Merchant")

local BlackMarketDropdown = Tabs.Main:AddDropdown("BlackMarketDropdown", {
    Title = "Select Merchant Slot(s)",
    Values = {1, 2, 3, 4, 5},
    Multi = true,
    Default = {}
})

local AutoBuyToggle = Tabs.Main:AddToggle("AutoBuyToggle", {
    Title = "Auto Buy (Selected Slots)",
    Default = false
})

AutoBuyToggle:OnChanged(function()
    if AutoBuyToggle.Value then
        spawn(function()
            while true do
                if not AutoBuyToggle.Value then break end
                -- Buy 3 times
                for i = 1, 3 do
                    for number, isSelected in pairs(BlackMarketDropdown.Value) do
                        if isSelected then
                            local args = {
                                [1] = "Black Market",
                                [2] = number
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.LimitedMerchantService.RF.BuyItem:InvokeServer(unpack(args))
                            wait(1)
                        end
                    end
                end
                wait(30) -- Wait 30 seconds before next cycle
            end
        end)
    end
end)

local WheelSection = Tabs.Main:AddSection("Wheel")

-- Spin Amount Dropdown
local SpinDropdown = Tabs.Main:AddDropdown("SpinAmount", {
    Title = "Spin Amount",
    Values = {"1x", "3x", "10x"},
    Multi = false,
    Default = "1x"
})

-- Auto Spin Toggle
local AutoSpinToggle = Tabs.Main:AddToggle("AutoSpin", {
    Title = "Auto Spin",
    Default = false
})

AutoSpinToggle:OnChanged(function()
    if AutoSpinToggle.Value then
        spawn(function()
            while true do
                if not AutoSpinToggle.Value then break end
                
                local args = {
                    [1] = "Hidden Roulette",
                    [2] = SpinDropdown.Value == "3x" and "x10" or SpinDropdown.Value == "10x" and "x25" or nil
                }
                game:GetService("ReplicatedStorage").Packages.Knit.Services.SpinnerService.RF.Spin:InvokeServer(unpack(args))
                
                -- Dynamic wait times based on spin amount
                local waitTime = SpinDropdown.Value == "1x" and 2 or SpinDropdown.Value == "3x" and 0.5 or 0.3
                wait(waitTime)
            end
        end)
    end
end)

-- Auto Contraband Toggle
local AutoContrabandToggle = Tabs.Main:AddToggle("AutoContraband", {
    Title = "Auto Contraband Crate",
    Default = false
})

AutoContrabandToggle:OnChanged(function()
    if AutoContrabandToggle.Value then
        spawn(function()
            while true do
                if not AutoContrabandToggle.Value then break end
                
                local args = {
                    [1] = "Contraband Crate"
                }
                game:GetService("ReplicatedStorage").Packages.Knit.Services.ItemCrateService.RF.Spin:InvokeServer(unpack(args))
                wait(1)
            end
        end)
    end
end)
