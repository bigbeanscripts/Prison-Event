-- Pirate Event


game:GetService("ReplicatedStorage").Packages.Knit.Services.WrestleService.RF.OnAutoFight:InvokeServer()

-- Create a ScreenGui for our minimize button
local MinimizeGui = Instance.new("ScreenGui")
MinimizeGui.Name = "MinimizeGui"
MinimizeGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
MinimizeGui.ResetOnSpawn = false

-- Create the minimize button with centered positioning
local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Name = "MinimizeButton"
MinimizeButton.Parent = MinimizeGui
MinimizeButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
MinimizeButton.BorderColor3 = Color3.fromRGB(50, 50, 50)
MinimizeButton.AnchorPoint = Vector2.new(0.5, 0.5)
MinimizeButton.Position = UDim2.new(0.5, 0, 0.5, 0)
MinimizeButton.Size = UDim2.new(0, 80, 0, 40)
MinimizeButton.Font = Enum.Font.GothamBold
MinimizeButton.Text = "Close"
MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.TextSize = 16.000

-- Add corner radius
local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 6)
UICorner.Parent = MinimizeButton

-- Create X button for removal
local CloseButton = Instance.new("TextButton")
CloseButton.Name = "CloseButton"
CloseButton.Parent = MinimizeButton
CloseButton.BackgroundTransparency = 1
CloseButton.Position = UDim2.new(1, -20, 0, 0)
CloseButton.Size = UDim2.new(0, 20, 0, 20)
CloseButton.Font = Enum.Font.GothamBold
CloseButton.Text = "Ã—"
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextSize = 16.000
CloseButton.ZIndex = 2

-- Close button functionality
CloseButton.MouseButton1Click:Connect(function()
    -- Destroy the MinimizeButton and CloseButton
    MinimizeButton:Destroy()
    CloseButton:Destroy()
    -- Optionally, destroy the entire GUI if needed
    MinimizeGui:Destroy()
end)



-- Make button draggable
local UserInputService = game:GetService("UserInputService")
local dragging
local dragStart
local startPos

MinimizeButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = MinimizeButton.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
        local delta = input.Position - dragStart
        MinimizeButton.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Add hover effects for Event button
MinimizeButton.MouseEnter:Connect(function()
    game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
        BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    }):Play()
end)

MinimizeButton.MouseLeave:Connect(function()
    game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
        BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    }):Play()
end)

-- Add hover effects for close button
CloseButton.MouseEnter:Connect(function()
    game:GetService("TweenService"):Create(CloseButton, TweenInfo.new(0.2), {
        TextColor3 = Color3.fromRGB(255, 100, 100)
    }):Play()
end)

CloseButton.MouseLeave:Connect(function()
    game:GetService("TweenService"):Create(CloseButton, TweenInfo.new(0.2), {
        TextColor3 = Color3.fromRGB(255, 255, 255)
    }):Play()
end)

-- Add shadow
local Shadow = Instance.new("ImageLabel")
Shadow.Name = "Shadow"
Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
Shadow.BackgroundTransparency = 1
Shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
Shadow.Size = UDim2.new(1, 10, 1, 10)
Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
Shadow.ImageTransparency = 0.5
Shadow.Image = "rbxassetid://7912134082"
Shadow.Parent = MinimizeButton
Shadow.ZIndex = MinimizeButton.ZIndex - 1
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/Main.lua"))()
-- Create window with proper callbacks
local Window = Fluent:CreateWindow({
    Title = "Pirate Event",
    SubTitle = "By Duckie",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl,
    OnDestroy = function()
        local fadeOut = game:GetService("TweenService"):Create(MinimizeGui, TweenInfo.new(0.5), {
            Transparency = 1
        })
        fadeOut:Play()
        fadeOut.Completed:Connect(function()
            MinimizeGui:Destroy()
        end)
    end
})

local Tabs = {
    Event = Window:AddTab({ Title = "Pirate Event", Icon = "skull" })

}

-- Initialize state
local isMinimized = false
Window:Minimize(false)

-- Regular minimize/maximize functionality
MinimizeButton.MouseButton1Click:Connect(function()
    isMinimized = not isMinimized
    Window:Minimize(isMinimized)

    local textTween = game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
        TextTransparency = 1
    })
    
    textTween:Play()
    textTween.Completed:Connect(function()
        MinimizeButton.Text = isMinimized and "Open" or "Close"
        game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
            TextTransparency = 0
        }):Play()
    end)
end)

-- Close button functionality 
CloseButton.MouseButton1Click:Connect(function()
    MinimizeGui:Destroy()
    Window:Destroy()
end)


local PlaytimeSection = Tabs.Event:AddSection("Playtime Pass")

local AutoPlaytimeToggle = PlaytimeSection:AddToggle("AutoPlaytime", {
    Title = "Auto Claim Playtime Pass",
    Default = false
})

AutoPlaytimeToggle:OnChanged(function()
    if AutoPlaytimeToggle.Value then
        -- Claim rewards immediately when enabled
        for i = 1, 12 do
            local args = {
                [1] = "Free",
                [2] = i
            }
            game:GetService("ReplicatedStorage").Packages.Knit.Services.EventPassService.RF.ClaimReward:InvokeServer(unpack(args))
        end
        
        -- Start reset/claim loop
        spawn(function()
            while AutoPlaytimeToggle.Value do
                wait(60) -- Wait before reset
                
                -- Reset pass
                game:GetService("ReplicatedStorage").Packages.Knit.Services.EventPassService.RF.Reset:InvokeServer()
                
                -- Claim all rewards after reset
                for i = 1, 12 do
                    local args = {
                        [1] = "Free",
                        [2] = i
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.EventPassService.RF.ClaimReward:InvokeServer(unpack(args))
                end
            end
        end)
    end
end)

local function GetCurrentZone()
    local player = game.Players.LocalPlayer
    if player:GetAttribute("ZoneGhostIsland") then
        return "GhostIsland"
    elseif player:GetAttribute("ZoneTreasureIsland") then
        return "TreasureIsland"
    else 
        return "PirateTown"
    end
end

local function GetBestPrisonBag()
    local player = game.Players.LocalPlayer
    local currentZone = GetCurrentZone()
    local zoneAttributes = {
        PirateTown = "TotalPirateKnuckles",
        TreasureIsland = "TotalPirateKnuckles",
        GhostIsland = "TotalPirateKnuckles"
    }
    
    local prisonKnuckle = player:GetAttribute(zoneAttributes[currentZone]) or 0
    local punchBagData = require(game:GetService("ReplicatedStorage").Data.PunchBags)
    
    if player:GetAttribute("VIP") == true then
        return "VIP"
    end
    
    local bestTier = "Tier1"  
    local highestRequired = 0
    
    if punchBagData and punchBagData[currentZone] then
        for tier, data in pairs(punchBagData[currentZone]) do
            if data.StrengthRequired and 
               prisonKnuckle >= data.StrengthRequired and 
               data.StrengthRequired > highestRequired then
                bestTier = tier
                highestRequired = data.StrengthRequired
            end
        end
    end
    
    return bestTier
end

local function GetBestPrisonEquipment()
    local player = game.Players.LocalPlayer
    local currentZone = GetCurrentZone()
    local zoneAttributes = {
        PirateTown = "TotalPirateBicep",
        TreasureIsland = "TotalPirateBicep",
        GhostIsland = "TotalPirateBicep"
    }
    
    local prisonBicep = player:GetAttribute(zoneAttributes[currentZone]) or 0
    local dumbbellData = require(game:GetService("ReplicatedStorage").Data.Dumbells)
    local defaultDumbbells = {
        PirateTown = "PirateTown1",
        TreasureIsland = "TreasureIsland1",
        GhostIsland = "GhostIsland1"
    }
    
    local bestDumbell = defaultDumbbells[currentZone]
    local highestRequired = 0
    
    if dumbbellData and dumbbellData[currentZone] then
        for name, data in pairs(dumbbellData[currentZone]) do
            if data.StrengthRequired and 
               prisonBicep >= data.StrengthRequired and 
               data.StrengthRequired > highestRequired then
                bestDumbell = name
                highestRequired = data.StrengthRequired
            end
        end
    end

    return bestDumbell
end


-- Add Training Section
local TrainSection = Tabs.Event:AddSection("Auto Train")

local TrainingDropdown = Tabs.Event:AddDropdown("TrainingSelect", {
    Title = "Select Training Type",
    Values = {"Dumbells", "PunchBags"}, 
    Multi = false,
    Default = "Dumbells"
})

local AutoTrainToggle = Tabs.Event:AddToggle("AutoTrain", {
    Title = "Auto Train",
    Default = false
})

AutoTrainToggle:OnChanged(function()
    if AutoTrainToggle.Value then
        spawn(function()
            if TrainingDropdown.Value == "Dumbells" then
                -- Function to equip Dumbells
                local function equipDumbells()
                    local currentZone = GetCurrentZone()
                    local equipment = GetBestPrisonEquipment()
                    local args = {
                        [1] = currentZone,
                        [2] = "Dumbells", 
                        [3] = equipment
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onGuiEquipRequest:FireServer(unpack(args))
                end

                -- Equip immediately
                equipDumbells()

                -- Click loop (every 0.2 seconds)
                spawn(function()
                    while AutoTrainToggle.Value do
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onClick:FireServer()
                        wait(0.2)
                    end
                end)

                -- Re-equip loop (every 5 seconds)
                while AutoTrainToggle.Value do
                    wait(5) -- Wait 5 seconds before re-equipping
                    if AutoTrainToggle.Value then
                        equipDumbells()
                    end
                end

            else -- PunchBags
                spawn(function() 
                    while AutoTrainToggle.Value do
                        local currentZone = GetCurrentZone()
                        local tier = GetBestPrisonBag()
                        local bag = workspace.Zones[currentZone].Interactables.Training.PunchBags[tier]
                        
                        if bag then
                            local bagCFrame = bag:GetPivot()
                            game.Players.LocalPlayer.Character:PivotTo(bagCFrame * CFrame.new(0, 0, -5))
                            
                            local args = {
                                [1] = currentZone,
                                [2] = tier,
                                [3] = game.Players.LocalPlayer:GetAttribute("VIP") == true
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.PunchBagService.RE.onGiveStats:FireServer(unpack(args))
                        end
                        wait(0.25)
                    end
                end)
            end
        end)
    end
end)



-- Connect attribute change listeners for Pirate event
local player = game.Players.LocalPlayer
player:GetAttributeChangedSignal("ZonePirateTown"):Connect(onAttributeChanged)
player:GetAttributeChangedSignal("ZoneTreasureIsland"):Connect(onAttributeChanged)
player:GetAttributeChangedSignal("TotalPirateBicep"):Connect(onAttributeChanged)
player:GetAttributeChangedSignal("TotalPirateKnuckles"):Connect(onAttributeChanged)


-- Auto Fight Section
local FightSection = Tabs.Event:AddSection("Auto Fight")

local npcLocations = {
    PirateTown = workspace.GameObjects.ArmWrestling.PirateTown.NPC,
    TreasureIsland = workspace.GameObjects.ArmWrestling.TreasureIsland.NPC,
    GhostIsland = workspace.GameObjects.ArmWrestling.GhostIsland.NPC
}

local modelNames = {}
local models = {}
local npcZones = {} -- Store which zone each NPC belongs to

-- Gather NPCs from all locations
for zone, path in pairs(npcLocations) do
    for _, npc in pairs(path:GetChildren()) do
        if npc:IsA("Model") then
            table.insert(models, npc)
            table.insert(modelNames, npc.Name)
            npcZones[npc.Name] = zone
        end
    end
end

table.sort(modelNames)

local modelDropdown = Tabs.Event:AddDropdown("ModelDropdown", {
    Title = "Select Boss",
    Values = modelNames,
    Multi = false,
    Default = modelNames[1]
})

local AutoFightToggle = Tabs.Event:AddToggle("AutoFight", {
    Title = "Auto Fight",
    Default = false
})

AutoFightToggle:OnChanged(function()
    if AutoFightToggle.Value then
        spawn(function()
            while AutoFightToggle.Value do
                local selectedNPC = modelDropdown.Value
                if selectedNPC then
                    local zone = npcZones[selectedNPC]
                    local npcPath = npcLocations[zone]
                    
                    if npcPath then
                        local npcModel = npcPath:FindFirstChild(selectedNPC)
                        if npcModel and npcModel:FindFirstChild("Table") then
                            local args = {
                                [1] = selectedNPC,
                                [2] = npcModel.Table,
                                [3] = zone
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onEnterNPCTable:FireServer(unpack(args))
                        end
                    end
                end
                wait(1)
            end
        end)
    end
end)

local AutoClickToggle = Tabs.Event:AddToggle("AutoClick", {
    Title = "Auto Click", 
    Default = false 
})

AutoClickToggle:OnChanged(function()
    if AutoClickToggle.Value then
        spawn(function()
            while true do
                if not AutoClickToggle.Value then break end
                game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onClickRequest:FireServer()
                wait(0.1)
            end
        end)
    end
end)



-- Eggs Section
local EggSection = Tabs.Event:AddSection("Eggs")

-- Hatch Amount Dropdown
local HatchAmountDropdown = Tabs.Event:AddDropdown("HatchAmount", {
    Title = "Hatch Amount",
    Values = {"1x", "3x", "8x", "30x", "Max"},
    Multi = false,
    Default = "1x"
})

-- Egg Selection Dropdown
local EggDropdown = Tabs.Event:AddDropdown("EggSelect", {
    Title = "Select Egg",
    Values = {"PirateFish", "PirateShark", "GhostPirate", "GhostKraken"},
    Multi = false,
    Default = "PirateFish"
})

-- Auto Hatch Toggle
local AutoHatchToggle = Tabs.Event:AddToggle("AutoHatch", {
    Title = "Auto Hatch",
    Default = false
})

AutoHatchToggle:OnChanged(function()
    if AutoHatchToggle.Value then
        spawn(function()
            while true do
                if not AutoHatchToggle.Value then break end
                
                local args = {}
                local selectedEgg = EggDropdown.Value
                local hatchMultiplier = HatchAmountDropdown.Value
                
                if hatchMultiplier == "1x" then
                    args = {selectedEgg, nil, false, true, false}
                elseif hatchMultiplier == "3x" then
                    args = {selectedEgg, nil, true, false}
                elseif hatchMultiplier == "8x" then
                    args = {selectedEgg, nil, false, true, true}
                elseif hatchMultiplier == "30x" then
                    args = {selectedEgg, nil, nil, false, nil, true}
                elseif hatchMultiplier == "Max" then
                    args = {selectedEgg, nil, nil, false, nil, true}
                end
                
                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
                wait(0.001)
            end
        end)
    end
end)


local MerchantSection = Tabs.Event:AddSection("Merchant")

local BlackMarketDropdown = Tabs.Event:AddDropdown("BlackMarketDropdown", {
    Title = "Select Merchant Slot(s)",
    Values = {1, 2, 3, 4, 5},
    Multi = true,
    Default = {}
})

local AutoBuyToggle = Tabs.Event:AddToggle("AutoBuyToggle", {
    Title = "Auto Buy (Selected Slots)",
    Default = false
})

AutoBuyToggle:OnChanged(function()
    if AutoBuyToggle.Value then
        spawn(function()
            while true do
                if not AutoBuyToggle.Value then break end
                -- Buy 3 times
                for i = 1, 3 do
                    for number, isSelected in pairs(BlackMarketDropdown.Value) do
                        if isSelected then
                            local args = {
                                [1] = "Treasure Merchant",
                                [2] = number
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.LimitedMerchantService.RF.BuyItem:InvokeServer(unpack(args))
                            wait(1)
                        end
                    end
                end
                wait(30) -- Wait 30 seconds before next cycle
            end
        end)
    end
end)


-- Belt Section
local BeltSection = Tabs.Event:AddSection("Auto Buy Belts")

-- Toggle for Auto Buy
local AutoBuyBeltsToggle = Tabs.Event:AddToggle("AutoBuyBelts", {
    Title = "Buy Medallions",
    Description = "WARNING: It will keep buying the best medallions for you, until you run out of gold coins, or until you turn the toggle off.",
    Default = false
})

-- Static belt data table (using the provided decompiled data)
local beltData = {
    Bronze = { Rank = "Pirate Recruit", Price = 0 },
    Silver = { Rank = "Deckhand", Price = 500 },
    Gold = { Rank = "Buccaneer", Price = 1250 },
    Platinum = { Rank = "Rogue Sailor", Price = 5000 },
    Crystal = { Rank = "Corsair", Price = 12500 },
    Emerald = { Rank = "First Mate", Price = 25000 },
    Ruby = { Rank = "Gunner", Price = 50000 },
    Amethyst = { Rank = "Quartermaster", Price = 100000 },
    Diamond = { Rank = "Sea Raider", Price = 250000 },
    Treasure = { Rank = "Captain", Price = 500000 },
    Battle = { Rank = "Warlord of the Seas", Price = 1000000 },
    Skull = { Rank = "Cursed Corsair", Price = 2500000 },
    Kraken = { Rank = "Kraken Slayer", Price = 5000000 },
    Ship = { Rank = "Fleet Commander", Price = 10000000 },
    Trident = { Rank = "Poseidon's Rival", Price = 25000000 },
    Parrot = { Rank = "Legendary Buccaneer", Price = 50000000 },
    Torch = { Rank = "Dread Captain", Price = 100000000 },
    Map = { Rank = "Ghost Admiral", Price = 250000000 },
    Galaxy = { Rank = "Celestial Raider", Price = 350000000 },
    Sea = { Rank = "Ruler of the Seven Seas", Price = 500000000 },
    PirateKing = { Rank = "Pirate King", Price = 1000000000 }
}

-- Create sorted belt order based on price
local beltOrder = {}
for beltName, data in pairs(beltData) do
    table.insert(beltOrder, { name = beltName, price = data.Price })
end
table.sort(beltOrder, function(a, b) return a.price < b.price end)

-- Function to find the next belt in progression
local function findNextBelt(currentBeltName)
    local currentBeltData = beltData[currentBeltName]
    if not currentBeltData then return nil, nil end

    local currentPrice = currentBeltData.Price

    for i, belt in ipairs(beltOrder) do
        if belt.price > currentPrice then
            return belt.name, beltData[belt.name].Price
        end
    end
    return nil, nil
end

AutoBuyBeltsToggle:OnChanged(function()
    if AutoBuyBeltsToggle.Value then
        while AutoBuyBeltsToggle.Value do
            local player = game.Players.LocalPlayer
            local goldCoins = player:GetAttribute("GoldCoins") -- Ensure this is the correct attribute
            local equippedBeltName = player:GetAttribute("EquippedPirateBelt") -- Ensure this is the correct attribute

            -- Debugging: Print current values
            print("Gold Coins:", goldCoins)
            print("Equipped Belt Name:", equippedBeltName)

            if goldCoins and equippedBeltName then
                local currentBeltName = equippedBeltName
                while AutoBuyBeltsToggle.Value do
                    local nextBeltName, nextPrice = findNextBelt(currentBeltName)

                    -- Debugging: Print next belt and price
                    print("Next Belt Name:", nextBeltName)
                    print("Next Price:", nextPrice)

                    if not nextBeltName or not nextPrice then
                        break -- Exit if no next belt is found
                    end

                    if goldCoins >= nextPrice then
                        local args = {
                            [1] = nextBeltName
                        }
                        local success, result = pcall(function()
                            return game:GetService("ReplicatedStorage").Packages.Knit.Services.BeltService.RF.ClickedBuyButton:InvokeServer(unpack(args))
                        end)

                        if success and result then
                            currentBeltName = nextBeltName
                            wait(2) -- 2 second delay between purchases
                        else
                            break
                        end
                    else
                        break
                    end
                end
            else
                warn("GoldCoins or EquippedPirateBelt attribute is missing!")
            end

            wait(2) -- Delay between checks
        end
    end
end)

local TowerSection = Tabs.Event:AddSection("Towers")

-- Prison Cave Buttons
TowerSection:AddButton({
    Title = "Use Pirate Clash Tower Key (1x)",
    Description = "Use the Pirate Clash Tower Key once.",
    Callback = function()
        local args = {
            [1] = "PirateClash",
            [2] = false
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
    end
})

TowerSection:AddButton({
    Title = "Use All Pirate Clash Tower Keys (250x)",
    Description = "Use All Pirate Clash ower Keys (max 250 at a time).",
    Callback = function()
        local args = {
            [1] = "PirateClash",
            [2] = true
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
    end
})


local WheelSection = Tabs.Event:AddSection("Ghost Wheel")

local GhostFortuneSpinDropdown = Tabs.Event:AddDropdown("GhostFortuneSpinAmount", {
    Title = "Ghost Fortune Amount",
    Description = "Select Wheel Spin Amount",
    Values = {"1x", "3x", "10x"},
    Multi = false,
    Default = "1x"
})

local AutoGhostFortuneToggle = Tabs.Event:AddToggle("AutoGhostFortuneSpin", {
    Title = "Auto Ghost Fortune Wheel",
    Default = false
})

AutoGhostFortuneToggle:OnChanged(function()
    if AutoGhostFortuneToggle.Value then
        spawn(function()
            while true do
                if not AutoGhostFortuneToggle.Value then break end
                
                local args = {
                    [1] = "Ghost Fortune",
                    [2] = GhostFortuneSpinDropdown.Value == "3x" and "x10" or GhostFortuneSpinDropdown.Value == "10x" and "x25" or nil
                }
                game:GetService("ReplicatedStorage").Packages.Knit.Services.SpinnerService.RF.Spin:InvokeServer(unpack(args))
                
                wait(1)
            end
        end)
    end
end)
local TreasureChestSection = Tabs.Event:AddSection("Treasure Chests")

-- Add Status Label for Treasure Dust
local TreasureDustStatus = TreasureChestSection:AddParagraph({
    Title = "Treasure Dust Amount",
    Content = "Loading..."
})

-- Auto Craft Treasure Chests
local AutoCraftToggle = TreasureChestSection:AddToggle("AutoCraft", {
    Title = "Auto Craft Treasure Chests",
    Description = "Automatically craft Chests (If you have 10 or more Treasure Dust)",
    Default = false
})

-- Add Auto Use Treasure Chests toggle
local AutoUseChestsToggle = TreasureChestSection:AddToggle("AutoUseChests", {
    Title = "Auto Use Treasure Chests",
    Description = "Automatically use Treasure Chests",
    Default = false 
})

-- Add Treasure Chest counter status
local TreasureChestStatus = TreasureChestSection:AddParagraph({
    Title = "Treasure Chest Amount",
    Content = "Loading..."
})

-- Function to parse amount text and handle 'k' suffix
local function parseAmount(amtText)
    -- Remove the 'x' prefix
    local numStr = amtText:match("x(.+)")
    if not numStr then return 0 end
    
    -- Check if the number contains 'k'
    if numStr:find("k") then
        -- Remove 'k' and multiply by 1000
        local baseNum = tonumber(numStr:match("(%d+%.?%d*)k"))
        return baseNum and (baseNum * 1000) or 0
    else
        -- Regular number
        return tonumber(numStr) or 0
    end
end

-- Create invisible button for crafting
local player = game:GetService("Players").LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local screenGui = player.PlayerGui:WaitForChild("ScreenGui") -- Note: You may need to adjust this to your actual ScreenGui

-- Create invisible button if it doesn't exist
local treasureButton = screenGui:FindFirstChild("InvisibleButton")
if not treasureButton then
    treasureButton = Instance.new("TextButton")
    treasureButton.Name = "InvisibleButton"
    treasureButton.Size = UDim2.new(0, 200, 0, 50)
    treasureButton.Position = UDim2.new(0, 100, 0, 100)
    treasureButton.BackgroundTransparency = 1
    treasureButton.TextTransparency = 1
    treasureButton.ZIndex = -100
    treasureButton.Parent = screenGui
end

-- Main functionality for auto crafting
AutoCraftToggle:OnChanged(function(value)
    if value then
        spawn(function()
            while AutoCraftToggle.Value do
                -- Check Treasure Dust amount
                local amtObject = player.PlayerGui.GameUI.Menus.Items.Display.Items.MainFrame.ScrollingFrame.MiscStorage.Objects:FindFirstChild("Treasure Dust/1")
                
                if amtObject then
                    local amtText = amtObject.ButtonDisplay.Amt.Text
                    local amount = parseAmount(amtText)
                    TreasureDustStatus:SetDesc(amtText)
                    
                    -- Auto craft if amount >= 10
                    if amount >= 10 then
                        -- Click the invisible button and invoke server function
                        pcall(function()
                            treasureButton.MouseButton1Click:Fire()
                        end)
                        
                        -- Call the server function
                        pcall(function()
                            local args = {
                                [1] = "Treasure Chest"
                            }
                            ReplicatedStorage.Packages.Knit.Services.TreasureChestService.RF.Craft:InvokeServer(unpack(args))
                        end)
                    else
                        -- Stop if less than 10 dust
                        break
                    end
                else
                    TreasureDustStatus:SetDesc("Not Found")
                end
                
                -- Wait for 0.25 seconds before next attempt
                wait(0.25)
                
                if not AutoCraftToggle.Value then break end
            end
        end)
    end
end)

-- Update dust status (runs even when auto-craft is disabled)
spawn(function()
    while true do
        local amtObject = player.PlayerGui.GameUI.Menus.Items.Display.Items.MainFrame.ScrollingFrame.MiscStorage.Objects:FindFirstChild("Treasure Dust/1")
        
        if amtObject then
            local amtText = amtObject.ButtonDisplay.Amt.Text
            TreasureDustStatus:SetDesc(amtText)
        else
            TreasureDustStatus:SetDesc("Not Found")
        end
        
        wait(1)
    end
end)

-- Update chest status and handle auto-use
spawn(function()
    while true do
        local player = game:GetService("Players").LocalPlayer
        local chestObject = player.PlayerGui.GameUI.Menus.Items.Display.Items.MainFrame.ScrollingFrame.GiftsStorage.Objects:FindFirstChild("Treasure Chest/1")
        
        if chestObject then
            local amtText = chestObject.ButtonDisplay.Amt.Text
            local amount = parseAmount(amtText) -- Using parseAmount for k support
            TreasureChestStatus:SetDesc(amtText)
            
            -- Auto use if enabled and has chests
            if AutoUseChestsToggle.Value and amount >= 1 then
                local args = {
                    [1] = {
                        ["Item"] = "Treasure Chest",
                        ["Tier"] = "1"
                    },
                    [2] = (amount >= 8) and 8 or 1 -- Use 8 if we have 8+ chests, otherwise use 1
                }
                game:GetService("ReplicatedStorage").Packages.Knit.Services.ItemService.RF.UseChest:InvokeServer(unpack(args))
            end
        else
            TreasureChestStatus:SetDesc("Not Found")
        end
        wait(1)
    end
end)
