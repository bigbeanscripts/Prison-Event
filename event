
local extraEggNames = {
    "OrangeSpikedCrystal",
    "GemstoneSpiked",
    "TeddyBear",
    "ToyBeachBall",
}

local function getEggNames()
    local eggNamesSet = {}
    local zones = workspace:FindFirstChild("Zones")

    if zones then
        for _, world in pairs(zones:GetChildren()) do
            -- Only look at worlds with no numbers in their name
            if world:IsA("Folder") and not world.Name:match("%d") then
                local interactables = world:FindFirstChild("Interactables")
                if interactables then
                    local eggs = interactables:FindFirstChild("Eggs")
                    if eggs then
                        for _, egg in pairs(eggs:GetChildren()) do
                            if not egg.Name:lower():find("rewind") then
                                local name = egg.Name
                                name = name:gsub("%s*[Ee][Gg][Gg]%s*$", "") -- remove "Egg" at end
                                name = name:match("^%s*(.-)%s*$") -- trim spaces
                                eggNamesSet[name] = true
                            end
                        end
                    end
                end
            end
        end
    end

    -- âœ… Add all extra names from the table
    for _, extraName in ipairs(extraEggNames) do
        eggNamesSet[extraName] = true
    end

    -- Convert set to sorted list
    local eggNames = {}
    for name in pairs(eggNamesSet) do
        table.insert(eggNames, name)
    end
    table.sort(eggNames)

    return eggNames
end



loadstring(game:HttpGet("https://raw.githubusercontent.com/SenhorLDS/ProjectLDSHUB/refs/heads/main/Anti%20AFK"))()
local Library = loadstring(game:HttpGet("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/bigbeanscripts/Pet-Warriors/refs/heads/main/test"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/InterfaceManager.luau"))()

local Window = Library:Window{
    Title = "Mining Event",
    SubTitle = "By Duckie",
    TabWidth = 160,
    Size =  UDim2.fromOffset(580, 460),
    Resize = false, 
    Acrylic = true,
    Theme = "Vynixu",
    MinimizeKey = Enum.KeyCode.LeftShift
}


local Tabs = {
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
    AutoFight = Window:AddTab({ Title = "Main", Icon = "crown" }),
    Eggs = Window:AddTab({ Title = "Eggs", Icon = "egg" }),
    Tower = Window:AddTab({ Title = "Tower", Icon = "castle" }),
    Merchant = Window:AddTab({ Title = "Merchant", Icon = "phosphor-shopping-cart-fill" }),
    Wheel = Window:AddTab({ Title = "Miners Fortune Wheel", Icon = "ferris-wheel" }),
    Mining = Window:AddTab({ Title = "Mining", Icon = "pickaxe" }),
}



local PlaytimeSection = Tabs.AutoFight:AddSection("Playtime Pass")

local AutoPlaytimeToggle = PlaytimeSection:AddToggle("AutoPlaytime", {
    Title = "Auto Claim Playtime Pass",
    Default = false
})

AutoPlaytimeToggle:OnChanged(function()
    if AutoPlaytimeToggle.Value then
        -- Claim rewards immediately when enabled
        for i = 1, 12 do
            local args = {
                [1] = "Free",
                [2] = i
            }
            game:GetService("ReplicatedStorage").Packages.Knit.Services.EventPassService.RF.ClaimReward:InvokeServer(unpack(args))
        end
        
        -- Start reset/claim loop
        spawn(function()
            while AutoPlaytimeToggle.Value do
                wait(60) -- Wait before reset
                
                -- Reset pass
                game:GetService("ReplicatedStorage").Packages.Knit.Services.EventPassService.RF.Reset:InvokeServer()
                
                -- Claim all rewards after reset
                for i = 1, 12 do
                    local args = {
                        [1] = "Free",
                        [2] = i
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.EventPassService.RF.ClaimReward:InvokeServer(unpack(args))
                end
            end
        end)
    end
end)

local function GetCurrentZone()
    local player = game.Players.LocalPlayer

    -- Check player attributes first
    if player:GetAttribute("ZonePlayfulMines") then
        return "PlayfulMines"
    elseif player:GetAttribute("ZoneDesertMines") then
        return "DesertMines"
    elseif player:GetAttribute("ZoneMinersDreamland") then
        return "MinersDreamland"
    end

    -- Fallback: look through workspace zones
    local glassBridgeZone = workspace.Zones:FindFirstChild("DesertMines")
    if glassBridgeZone then return glassBridgeZone.Name end

    local frontmanZone = workspace.Zones:FindFirstChild("MinersDreamland")
    if frontmanZone then return frontmanZone.Name end

    return nil
end


local function GetValidZone(trainingType)
    local zone = GetCurrentZone()
    local fallback = "MinersDreamland"
    local replicatedStorage = game:GetService("ReplicatedStorage")

    local function hasData(moduleName)
        local success, module = pcall(function()
            return require(replicatedStorage.Data[moduleName])
        end)
        return success and module and (module[zone] or module[fallback])
    end

    if trainingType == "PunchBags" then
        if workspace.Zones:FindFirstChild(zone)
            and workspace.Zones[zone]:FindFirstChild("Interactables")
            and workspace.Zones[zone].Interactables:FindFirstChild("Training")
            and workspace.Zones[zone].Interactables.Training:FindFirstChild("PunchBags") then
            return zone
        elseif workspace.Zones:FindFirstChild(fallback)
            and workspace.Zones[fallback]:FindFirstChild("Interactables")
            and workspace.Zones[fallback].Interactables:FindFirstChild("Training")
            and workspace.Zones[fallback].Interactables.Training:FindFirstChild("PunchBags") then
            return fallback
        else
            return fallback
        end
    elseif trainingType == "Dumbells" then
        return hasData("Dumbells") and (hasData("Dumbells")[zone] and zone or fallback) or fallback
    elseif trainingType == "Grips" then
        return hasData("Grips") and (hasData("Grips")[zone] and zone or fallback) or fallback
    elseif trainingType == "Barbells" then
        return hasData("Barbells") and (hasData("Barbells")[zone] and zone or fallback) or fallback
    end

    return fallback
end


local function GetBestDuckBag()
    local player = game.Players.LocalPlayer
    local currentZone = GetValidZone(currentTrainingType)
    local fallbackZone = "MinersDreamland"

    if not currentZone then
        return "Tier1"
    end

    local knuckleStrength = player:GetAttribute("TotalBrainrotKnuckles") or 0
    local punchBagData = require(game:GetService("ReplicatedStorage").Data.PunchBags)

    if player:GetAttribute("VIP") == true then
        return "VIP"
    end

    local zoneList = { currentZone, fallbackZone }

    for _, zone in ipairs(zoneList) do
        local bestTier = "Tier1"
        local highestRequired = 0

        if punchBagData and punchBagData[zone] then
            for tier, data in pairs(punchBagData[zone]) do
                if data.StrengthRequired and
                   knuckleStrength >= data.StrengthRequired and
                   data.StrengthRequired > highestRequired then
                    bestTier = tier
                    highestRequired = data.StrengthRequired
                end
            end
            -- Return best tier found in this zone
            return bestTier
        end
    end
end


local function GetBestDuckEquipment(equipmentType)
    local player = game.Players.LocalPlayer
    local currentZone = GetCurrentZone()
    local fallbackZone = "MinersDreamland"

    if not currentZone then
        return { equipment = fallbackZone .. "1", zone = fallbackZone }
    end

    -- Determine attribute and data module based on type
    local dataModule
    local attrMap = {
        Dumbells = "TotalMiningBicep",
        Grips = "TotalMiningGrip",
        Barbells = "TotalMiningBicep"
    }

    if equipmentType ~= "Dumbells" and equipmentType ~= "Grips" and equipmentType ~= "Barbells" then
        equipmentType = "Dumbells"
    end

    dataModule = equipmentType
    local equipmentData

    pcall(function()
        equipmentData = require(game:GetService("ReplicatedStorage").Data[dataModule])
    end)

    if not equipmentData then
        return { equipment = fallbackZone .. "1", zone = fallbackZone }
    end

    -- Zone priority list
    local zoneList = { currentZone, fallbackZone }

    for _, zone in ipairs(zoneList) do
        local defaultEquipment = zone .. "1"
        local bestEquipment = defaultEquipment
        local highestRequired = 0

        -- Use the correct attribute for fallback zone too
        local statValue = player:GetAttribute(attrMap[equipmentType]) or 0

        if equipmentData[zone] then
            for name, data in pairs(equipmentData[zone]) do
                if data.StrengthRequired and 
                   statValue >= data.StrengthRequired and 
                   data.StrengthRequired > highestRequired then
                    bestEquipment = name
                    highestRequired = data.StrengthRequired
                end
            end
            return { equipment = bestEquipment, zone = zone }
        end
    end

    return { equipment = fallbackZone .. "1", zone = fallbackZone }
end

    

-- Add Training Section
local TrainSection = Tabs.AutoFight:AddSection("Auto Train")

local TrainingDropdown = Tabs.AutoFight:AddDropdown("TrainingSelect", {
    Title = "Select Training Type",
    Values = {"Dumbells", "PunchBags", "Grips", "Barbells"}, 
    Multi = false,
    Default = "Dumbells"
})

local AutoTrainToggle = Tabs.AutoFight:AddToggle("AutoTrain", {
    Title = "Auto Train",
    Description = "If this gets an error, turn the toggle off and on again. It occurs when you switch training types with the toggle on :)",
    Default = false
})

-- Variable to store the current training equipment type
local currentTrainingType = nil

AutoTrainToggle:OnChanged(function()
    if AutoTrainToggle.Value then
        -- Store the selected training type when starting
        currentTrainingType = TrainingDropdown.Value
        
        spawn(function()
            local currentZone = GetCurrentZone()
            
            if not currentZone then
                return
            end
            
            if currentTrainingType == "Dumbells" then
                -- Function to equip Dumbells
                local function equipDumbells()
                    local result = GetBestDuckEquipment("Dumbells")
                    local equipment = result.equipment
                    local equipZone = result.zone
                    local args = {
                        [1] = equipZone,
                        [2] = "Dumbells", 
                        [3] = equipment
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onGuiEquipRequest:FireServer(unpack(args))
                end

                -- Equip immediately
                equipDumbells()

                -- Click loop (every 0.6 seconds for Dumbells)
                spawn(function()
                    while AutoTrainToggle.Value and currentTrainingType == "Dumbells" and TrainingDropdown.Value == "Dumbells" do
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onClick:FireServer()
                        wait(0.6)
                    end
                end)

                -- Re-equip loop (every 5 seconds)
                while AutoTrainToggle.Value and currentTrainingType == "Dumbells" and TrainingDropdown.Value == "Dumbells" do
                    wait(5) -- Wait 5 seconds before re-equipping
                    if AutoTrainToggle.Value and currentTrainingType == "Dumbells" and TrainingDropdown.Value == "Dumbells" then
                        equipDumbells()
                    end
                end
                
            elseif currentTrainingType == "Grips" then
                -- Function to equip Grips
                local function equipGrips()
                    local result = GetBestDuckEquipment("Grips")
                    local equipment = result.equipment
                    local equipZone = result.zone
                    local args = {
                        [1] = equipZone,
                        [2] = "Grips", 
                        [3] = equipment
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onGuiEquipRequest:FireServer(unpack(args))
                end

                -- Equip immediately
                equipGrips()

                -- Click loop (every 0.6 seconds for Grips)
                spawn(function()
                    while AutoTrainToggle.Value and currentTrainingType == "Grips" and TrainingDropdown.Value == "Grips" do
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onClick:FireServer()
                        wait(0.6)
                    end
                end)

                -- Re-equip loop (every 5 seconds)
                while AutoTrainToggle.Value and currentTrainingType == "Grips" and TrainingDropdown.Value == "Grips" do
                    wait(5) -- Wait 5 seconds before re-equipping
                    if AutoTrainToggle.Value and currentTrainingType == "Grips" and TrainingDropdown.Value == "Grips" then
                        equipGrips()
                    end
                end
                
            elseif currentTrainingType == "Barbells" then
                -- Function to equip Barbells
                local function equipBarbells()
                    local result = GetBestDuckEquipment("Barbells")
                    local equipment = result.equipment
                    local equipZone = result.zone
                    local args = {
                        [1] = equipZone,
                        [2] = "Barbells", 
                        [3] = equipment
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onGuiEquipRequest:FireServer(unpack(args))
                end

                -- Equip immediately
                equipBarbells()

                -- Click loop (every 1.55 seconds for Barbells)
                spawn(function()
                    while AutoTrainToggle.Value and currentTrainingType == "Barbells" and TrainingDropdown.Value == "Barbells" do
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onClick:FireServer()
                        wait(1.55)
                    end
                end)

                -- Re-equip loop (every 5 seconds)
                while AutoTrainToggle.Value and currentTrainingType == "Barbells" and TrainingDropdown.Value == "Barbells" do
                    wait(5) -- Wait 5 seconds before re-equipping
                    if AutoTrainToggle.Value and currentTrainingType == "Barbells" and TrainingDropdown.Value == "Barbells" then
                        equipBarbells()
                    end
                end
            elseif currentTrainingType == "Pull up bar" then
                -- Add Pull up bar handling
                spawn(function()
                    while AutoTrainToggle.Value and currentTrainingType == "Pull up bar" and TrainingDropdown.Value == "Pull up bar" do
                        local statsArgs = {
                            [1] = "17",
                            [2] = "Tier4"
                        }
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.PullupBarService.RE.onGiveStats:FireServer(unpack(statsArgs))
                        wait(1.55) -- Pull up bar every 1.55 seconds
                    end
                end)
            else -- PunchBags
                spawn(function() 
                    local lastTeleport = 0
                    while AutoTrainToggle.Value and currentTrainingType == "PunchBags" and TrainingDropdown.Value == "PunchBags" do
                        local tier = GetBestDuckBag()
                        local validZone = GetValidZone("PunchBags")
                        
                        -- Try to get the bag from workspace using the valid zone
                        local bag = workspace.Zones[validZone].Interactables.Training.PunchBags:FindFirstChild(tier)
                        
                        if bag then
                            -- Only teleport every 5 seconds
                            local currentTime = tick()
                            if currentTime - lastTeleport >= 5 then
                                local bagCFrame = bag:GetPivot()
                                game.Players.LocalPlayer.Character:PivotTo(bagCFrame * CFrame.new(0, 0, -5))
                                lastTeleport = currentTime
                            end
                            
                            -- Use the punch bag service every 0.2 seconds for knuckles (punch bags)
                            local args = {
                                [1] = validZone,
                                [2] = tier,
                                [3] = game.Players.LocalPlayer:GetAttribute("VIP") == true
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.PunchBagService.RE.onGiveStats:FireServer(unpack(args))
                        end
                        wait(0.2)
                    end
                end)
            end
        end)
    else
        -- Clear the current training type when stopping
        currentTrainingType = nil
    end
end)

TrainingDropdown:OnChanged(function()
    if AutoTrainToggle.Value then
        AutoTrainToggle:SetValue(false) -- Turn off current training
        wait(0.1) -- Short delay to ensure loops are terminated
        AutoTrainToggle:SetValue(true) -- Turn on with new selection
    end
end)


-- UI section
local FightSection = Tabs.AutoFight:AddSection("Auto Fight")

local npcLocations = {
    MinersDreamland = workspace.GameObjects.ArmWrestling.MinersDreamland.NPC,
    DesertMines = workspace.GameObjects.ArmWrestling.DesertMines.NPC,
    PlayfulMines = workspace.GameObjects.ArmWrestling.PlayfulMines.NPC

}

local modelNames = {}

-- Gather NPC names from all locations
for _, path in pairs(npcLocations) do
    for _, npc in pairs(path:GetChildren()) do
        if npc:IsA("Model") then
            table.insert(modelNames, npc.Name)
        end
    end
end

table.sort(modelNames)

-- Dropdown
local modelDropdown = Tabs.AutoFight:AddDropdown("ModelDropdown", {
    Title = "Select Boss",
    Values = modelNames,
    Multi = false,
    Searchable = true,
    Default = modelNames[1] or "",
})

-- Auto Click toggle
local AutoClickToggle = Tabs.AutoFight:AddToggle("AutoClick", {
    Title = "Auto Click/Crit",
    Description = "Allows you to win fights over 5x as fast.",
    Default = false
})

-- Auto Fight toggle
local AutoFightToggle = Tabs.AutoFight:AddToggle("AutoFight", {
    Title = "Auto Fight",
    Description = "Automatically starts fights with the selected boss (to beat bosses much faster, enable the Auto Click/Crit toggle).",
    Default = false
})

-- Block the GameAnalyticsError remote event from firing (run once at startup)
pcall(function()
    local gameAnalyticsError = game:GetService("ReplicatedStorage"):FindFirstChild("GameAnalyticsError")
    if gameAnalyticsError then
        gameAnalyticsError.FireServer = function(self, ...)
            return
        end
    end
end)


local AlwaysWin = Tabs.AutoFight:AddButton({
    Title = "Always Win",
    Description = "This makes it impossible to lose, rejoining resets this.",
    Callback = function()
        coroutine.resume(coroutine.create(function()
            local armWrestle = require(game:GetService("ReplicatedStorage").Controllers.Fighting.ArmWrestleController)
            
            -- Method 1: Hook the IncrementPower function
            local originalIncrementPower = armWrestle.IncrementPower
            armWrestle.IncrementPower = function(self, amount)
                -- Always increment by a large positive amount
                originalIncrementPower(self, math.abs(amount or 1) * 1000)
            end
            
            -- Method 2: Continuously set health to max (more reliable)
            spawn(function()
                while armWrestle.Fighting do
                    if armWrestle.Health and armWrestle.MaxHealth then
                        armWrestle.Health = armWrestle.MaxHealth
                    end
                    wait(0.1)
                end
            end)
            
            -- Method 3: Override the UpdateFight function to prevent NPC power
            local originalUpdateFight = armWrestle.UpdateFight
            armWrestle.UpdateFight = function(self)
                -- Do nothing - prevents NPC from gaining power
            end
            
        end))
    end
})



local notefight = Tabs.AutoFight:Paragraph("Note", {
    Title = "Note",
    Content = "If you get an error when you turn the toggles on, try turning them off and on again, this wont effect anything. Furthermore, the speeds in which you win, is further increased if you launch the script twice (Open it enable the toggles, disable them, and then re-execute the script.) ",
    TitleAlignment = "Middle",
    ContentAlignment = Enum.TextXAlignment.Left
})

-- Services
local KnitServices = game:GetService("ReplicatedStorage").Packages.Knit.Services
local ArmwrestleServiceRF = KnitServices:WaitForChild("ArmWrestleService"):WaitForChild("RF")
local ZoneService = KnitServices:WaitForChild("ZoneService"):WaitForChild("RE")

-- Variables
local autoClickThreads = {}
local autoFightThreads = {}
local cleanupConnections = {}
local lastZoneCheck = 0

-- Function to teleport to the correct zone for an NPC
local function teleportToNpcZone(npcName)
    local player = game.Players.LocalPlayer
    local playerCurrentZone = player:GetAttribute("CurrentZone")
    
    -- Find which zone the NPC is in
    local npcZone = nil
    for zoneName, path in pairs(npcLocations) do
        if path:FindFirstChild(npcName) then
            npcZone = zoneName == "MinersDreamland" and "MinersDreamland" or zoneName
            break
        end
    end
    
    -- If NPC zone found and different from current zone, teleport
    if npcZone and playerCurrentZone ~= npcZone then
        -- Get the teleport destination
        local teleportDest = workspace.Zones[npcZone].Interactables.Teleports.Locations.Spawn
        
        if teleportDest then
            -- Teleport to the appropriate zone
            local args = {
                [1] = teleportDest
            }
            
            ZoneService.teleport:FireServer(unpack(args))
            
            -- Wait for teleport to complete
            task.wait(2.5)

            return true
        end
    end
    return npcZone ~= nil
end

-- Cleanup function to clear pending requests
local function cleanupRequests()
    -- Get memory info before cleanup
    local memoryBefore = gcinfo()
    
    -- Force garbage collection to clear pending requests
    collectgarbage("count")
    
    -- Get memory info after cleanup
    local memoryAfter = gcinfo()
    
    pcall(function()
        -- Clear any pending remote calls by briefly disconnecting
        local temp = ArmwrestleServiceRF
        task.wait(0.01)
    end)
end

-- Auto Click toggle handler
AutoClickToggle:OnChanged(function()
    if AutoClickToggle.Value then
        -- Stop existing threads and cleanup
        for _, thread in pairs(autoClickThreads) do
            if typeof(thread) == "thread" then
                task.cancel(thread)
            elseif typeof(thread) == "table" then
                thread.active = false
            end
        end
        autoClickThreads = {}
        
        -- Stop any existing cleanup connections
        if cleanupConnections.autoClick then
            cleanupConnections.autoClick:Disconnect()
        end
        
        -- Spawn new click threads
        task.spawn(function()
            for i = 1, 500 do
                local threadData = { active = true }
                table.insert(autoClickThreads, threadData)
                
                task.spawn(function()
                    while threadData.active and AutoClickToggle.Value do
                        pcall(function()
                            ArmwrestleServiceRF:WaitForChild("RequestClick"):InvokeServer()
                            ArmwrestleServiceRF:WaitForChild("RequestCritHit"):InvokeServer()
                        end)
                        task.wait()
                    end
                end)
                
                task.wait(0.001) -- Small delay between thread spawns to prevent all spawning at once
            end
        end)
        
        -- Start cleanup timer for auto click
        cleanupConnections.autoClick = task.spawn(function()
            while AutoClickToggle.Value do
                task.wait(5) -- Wait 5 seconds
                if AutoClickToggle.Value then
                    cleanupRequests()
                end
            end
        end)
    else
        -- Disable all click threads
        for _, thread in pairs(autoClickThreads) do
            if typeof(thread) == "thread" then
                task.cancel(thread)
            elseif typeof(thread) == "table" then
                thread.active = false
            end
        end
        autoClickThreads = {}
        
        -- Stop cleanup timer
        if cleanupConnections.autoClick then
            task.cancel(cleanupConnections.autoClick)
            cleanupConnections.autoClick = nil
        end
        
        -- Final cleanup
        cleanupRequests()
    end
end)

-- Auto Fight toggle handler
AutoFightToggle:OnChanged(function()
    if AutoFightToggle.Value then
        -- First try to teleport to correct zone if needed
        local selectedName = modelDropdown.Value
        teleportToNpcZone(selectedName)
        
        -- Stop previous threads and cleanup
        for _, flag in pairs(autoFightThreads) do
            flag.active = false
        end
        autoFightThreads = {}
        
        -- Stop any existing cleanup connections
        if cleanupConnections.autoFight then
            cleanupConnections.autoFight:Disconnect()
        end
        
        -- Spawn threads for repeated boss fights
        for i = 1, 500 do
            local threadFlag = { active = true }
            table.insert(autoFightThreads, threadFlag)
            
            task.spawn(function()
                while threadFlag.active and AutoFightToggle.Value do
                    local selectedName = modelDropdown.Value
                    if selectedName then
                        -- Check if we need to teleport (periodically)
                        local currentTime = tick()
                        if currentTime - lastZoneCheck > 10 then
                            teleportToNpcZone(selectedName)
                            lastZoneCheck = currentTime
                        end
                        
                        -- Request fight with selected NPC
                        local args = {
                            [1] = selectedName
                        }
                        
                        pcall(function()
                            ArmwrestleServiceRF:WaitForChild("RequestStartFight"):InvokeServer(unpack(args))
                        end)
                    end
                    task.wait(0.01)
                end
            end)
            
            task.wait(0.001) -- Small delay between thread spawns
        end
        
        -- Start cleanup timer for auto fight
        cleanupConnections.autoFight = task.spawn(function()
            while AutoFightToggle.Value do
                task.wait(5) -- Wait 5 seconds
                if AutoFightToggle.Value then
                    cleanupRequests()
                end
            end
        end)
    else
        -- Stop all fight threads
        for _, flag in pairs(autoFightThreads) do
            flag.active = false
        end
        autoFightThreads = {}
        
        -- Stop cleanup timer
        if cleanupConnections.autoFight then
            task.cancel(cleanupConnections.autoFight)
            cleanupConnections.autoFight = nil
        end
        
        -- Final cleanup
        cleanupRequests()
    end
end)

-- Add zone check when dropdown selection changes
modelDropdown:OnChanged(function()
    if AutoFightToggle.Value then
        local selectedName = modelDropdown.Value
        teleportToNpcZone(selectedName)
        lastZoneCheck = tick()
    end
end)

local function aggressiveCleanup()
    -- Get memory info before cleanup
    local memoryBefore = gcinfo()
    
    -- Method 1: Force disconnect and reconnect to service
    pcall(function()
        local oldService = ArmwrestleServiceRF
        ArmwrestleServiceRF = KnitServices:WaitForChild("ArmWrestleService"):WaitForChild("RF")
    end)
    
    -- Method 2: Clear all pending coroutines
    collectgarbage("count")
    
    -- Method 3: Brief pause to let network catch up
    task.wait(0.1)
    
    -- Get memory info after cleanup
    local memoryAfter = gcinfo()  
end

local EggSection = Tabs.Eggs:AddSection("Eggs")

-- Hatch Amount Dropdown
local HatchAmountDropdown = Tabs.Eggs:AddDropdown("HatchAmount", {
    Title = "Hatch Amount",
    Values = {"1x", "3x", "8x", "30x", "Max"},
    Multi = false,
    Default = "1x"
})

-- Egg Selection Dropdown (Populated Dynamically)
local eggNames = getEggNames()
local EggDropdown = Tabs.Eggs:AddDropdown("EggSelect", {
    Title = "Select Egg",
    Values = eggNames,
    Multi = false,
    Default = eggNames[1] or "None"
})

-- Auto Hatch Toggle
local AutoHatchToggle = Tabs.Eggs:AddToggle("AutoHatch", {
    Title = "Auto Hatch",
    Default = false
})

AutoHatchToggle:OnChanged(function()
    if AutoHatchToggle.Value then
        spawn(function()
            while AutoHatchToggle.Value do
                local selectedEgg = EggDropdown.Value
                local hatchMultiplier = HatchAmountDropdown.Value

                local args = {}

                if hatchMultiplier == "1x" then
                    args = {selectedEgg, nil, nil, false, nil}
                elseif hatchMultiplier == "3x" then
                    args = {selectedEgg, nil, true, false}
                elseif hatchMultiplier == "8x" then
                    args = {selectedEgg, nil, false, true, true}
                elseif hatchMultiplier == "30x" or hatchMultiplier == "Max" then
                    args = {selectedEgg, nil, nil, false, nil, true}
                end

                -- Invoke server call to hatch egg
                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                wait(0.25)
            end
        end)
    end
end)

local TowerSection = Tabs.Tower:AddSection("Mining Tower")

-- Prison Cave Buttons
TowerSection:AddButton({
    Title = "Use Mining Keys (1x)",
    Description = "Use the Mining Key once.",
    Callback = function()
        local args = {
            [1] = "MiningTower",
            [2] = false
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
    end
})

TowerSection:AddButton({
    Title = "Use All Mining Keys (250x)",
    Description = "Use All Mining Keys (max 250 at a time).",
    Callback = function()
        local args = {
            [1] = "MiningTower",
            [2] = true
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
    end
})



-- Create SuperRB Section
local EventSection = Tabs.Merchant:AddSection("Individual Items")

-- Add Load Script Button
EventSection:AddButton({
    Title = "Load better Merchant script",
    Description = "This allows you to select individual items, but MAY cause lag.",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/bigbeanscripts/SeperateMerchant/refs/heads/main/LessLag"))()
    end
})

local MerchantSection = Tabs.Merchant:AddSection("Mining Merchant")

local BlackMarketDropdown = Tabs.Merchant:AddDropdown("BlackMarketDropdown", {
    Title = "Select Merchant Slot(s)",
    Values = {1, 2, 3, 4, 5},
    Multi = true,
    Default = {}
})

local AutoBuyToggle = Tabs.Merchant:AddToggle("AutoBuyToggle", {
    Title = "Auto Buy (Selected Slots)",
    Default = false
})

AutoBuyToggle:OnChanged(function()
    if AutoBuyToggle.Value then
        spawn(function()
            while true do
                if not AutoBuyToggle.Value then break end
                -- Buy 3 times
                for i = 1, 3 do
                    for number, isSelected in pairs(BlackMarketDropdown.Value) do
                        if isSelected then
                            local args = {
                                [1] = "Mining Merchant",
                                [2] = number
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.LimitedMerchantService.RF.BuyItem:InvokeServer(unpack(args))
                            wait(1)
                        end
                    end
                end
                wait(30) -- Wait 30 seconds before next cycle
            end
        end)
    end
end)

local minersfortune = Tabs.Wheel:AddSection("Mines Fortune")


local GhostFortuneSpinDropdown = Tabs.Wheel:AddDropdown("GhostFortuneSpinAmount", {
    Title = "Spin Amount",
    Description = "Select Wheel Spin Amount",
    Values = {"1x", "3x", "10x"},
    Multi = false,
    Default = "1x"
})

local AutoGhostFortuneToggle = Tabs.Wheel:AddToggle("AutoGhostFortuneSpin", {
    Title = "Auto spin Miners Fortune wheel",
    Default = false
})

AutoGhostFortuneToggle:OnChanged(function()
    if AutoGhostFortuneToggle.Value then
        spawn(function()
            while true do
                if not AutoGhostFortuneToggle.Value then break end
                
                local args = {
                    [1] = "Miners Fortune",
                    [2] = GhostFortuneSpinDropdown.Value == "3x" and "x10" or GhostFortuneSpinDropdown.Value == "10x" and "x25" or nil
                }
                game:GetService("ReplicatedStorage").Packages.Knit.Services.SpinnerService.RF.Spin:InvokeServer(unpack(args))
                
                wait(1)
            end
        end)
    end
end)
-- Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

-- Wait for Knit
local Knit = require(ReplicatedStorage.Packages.Knit)
Knit.OnStart():await()

local MiningService = Knit.GetService("MiningService")
local blocksFolder = nil -- Will be dynamically set

-- Get LayerInfo from the game module
local LayerInfoModule = require(ReplicatedStorage.Data.LayerInfo)
-- Mine reset handling variables
local isMinePaused = false
local mineResetCheckConnection
local lastCheckedTime = 0
local mineResetThreshold = 5 -- Default threshold for path 1
local mineResetThresholdPath1 = 5 -- Stop mining when timer is under 5s (static path)
local mineResetThresholdPath2 = 15 -- Stop mining when timer is under 15s (dynamic path)
local mineResetThresholdPath3 = 5 -- Stop mining when timer is under 5s (path 3)
local mineRestartThreshold = 19 * 60 + 57 -- Restart mining when timer is under 19m 57s

local function ParseTimerText(timerText)
    if not timerText or timerText == "" then return 0 end

    -- "MM:SS" format
    local minutes, seconds = timerText:match("(%d+):(%d+)")
    if minutes and seconds then
        local totalSeconds = tonumber(minutes) * 60 + tonumber(seconds)
        return totalSeconds
    end

    -- "Xm Ys" format
    local m, s = timerText:match("(%d+)m%s*(%d+)s")
    if m and s then
        local totalSeconds = tonumber(m) * 60 + tonumber(s)
        return totalSeconds
    end

    -- "Xs" format (seconds only)
    local onlySeconds = timerText:match("(%d+)s")
    if onlySeconds then
        local totalSeconds = tonumber(onlySeconds)
        return totalSeconds
    end

    -- Fallback: try to extract any numbers and assume it's seconds
    local numbers = {}
    for num in timerText:gmatch("(%d+)") do
        table.insert(numbers, tonumber(num))
    end

    if #numbers >= 2 then
        return totalSeconds
    elseif #numbers == 1 then
        return numbers[1]
    end
    return 0
end

-- Reference to the LayerInfo module in ReplicatedStorage
local LayerInfoModule = require(game:GetService("ReplicatedStorage").Data.LayerInfo)

-- Extract all block names from the module, preserve order
local function ExtractBlockNames()
    local blockNames = {}
    local blockSeen = {}

    for _, mineLayers in pairs(LayerInfoModule) do
        for _, layerData in ipairs(mineLayers) do
            for blockName in pairs(layerData.Spawnable) do
                if not blockSeen[blockName] then
                    table.insert(blockNames, blockName)
                    blockSeen[blockName] = true
                end
            end
        end
    end

    return blockNames
end

-- Extract filtered blocks (ignore dirt/stone/sandstones), preserve order
local function ExtractBlockNamesFiltered()
    local blockNames = {}
    local blockSeen = {}

    -- Set of block names to ignore (normalized: lowercase, no spaces)
    local ignoredBlocks = {
        ["dirt"] = true, ["stone"] = true, ["darkstone"] = true, ["yellowstone"] = true, ["orangestone"] = true,
        ["bluestone"] = true, ["greenstone"] = true, ["redstone"] = true, ["purplestone"] = true, ["redsandstone"] = true,
        ["bluesandstone"] = true, ["greensandstone"] = true, ["yellowsandstone"] = true, ["orangesandstone"] = true,
        ["purplesandstone"] = true, ["pinksandstone"] = true, ["sand"] = true, ["sandstone"] = true,
        ["plastic"] = true, ["hardplastic"] = true, ["redplastic"] = true, ["blueplastic"] = true, ["greenplastic"] = true,
        ["yellowplastic"] = true, ["orangeplastic"] = true, ["purpleplastic"] = true, ["pinkplastic"] = true,
        ["redhardplastic"] = true, ["bluehardplastic"] = true, ["greenhardplastic"] = true, ["yellowhardplastic"] = true,
        ["orangehardplastic"] = true, ["purplehardplastic"] = true, ["pinkhardplastic"] = true
    }

    for _, mineLayers in pairs(LayerInfoModule) do
        for _, layerData in ipairs(mineLayers) do
            for blockName in pairs(layerData.Spawnable) do
                -- Normalize the block name: lowercase + remove spaces
                local lowerName = string.lower(blockName):gsub("%s+", "")
                if not ignoredBlocks[lowerName] and not blockSeen[blockName] then
                    table.insert(blockNames, blockName)
                    blockSeen[blockName] = true
                end
            end
        end
    end

    return blockNames
end

-- Precompute
local AllBlockNames = ExtractBlockNames()
local FilteredBlockNames = ExtractBlockNamesFiltered()

-- Mining variables
local selectedBlocks = {}
local miningEnabled = false
local miningConnection
local blocksTransparent = false
local transparencyConnection
local targetBlock = nil
local targetBlockMiningEnabled = false
local targetBlockMiningConnection
local pathMiningBlocks = {}
local mineAlongPath = false

local timeLeftLabel = nil
local lastPathCheck = 0
local currentPathIndex = 1
local PATH_CHECK_INTERVAL = 1 -- Check path every second

-- Define the three paths
local paths = {
    -- Path 1: Original static path (5 second threshold)
    function()
        return workspace:WaitForChild("GameObjects", 0.1)
            :WaitForChild("Mining", 0.1)
            :WaitForChild("Mining", 0.1)
            :WaitForChild("MineSpawn", 0.1)
            :WaitForChild("Attachment", 0.1)
            :WaitForChild("BillboardGui", 0.1)
            :WaitForChild("TimeLeft", 0.1)
    end,

    -- Path 2: Dynamic GetChildren()[2] path (15 second threshold)
    function()
        local miningFolder = workspace:WaitForChild("GameObjects", 0.1)
            :WaitForChild("Mining", 0.1)
        local children = miningFolder:GetChildren()
        if #children >= 2 then
            return children[2]:WaitForChild("MineSpawn", 0.1)
                :WaitForChild("Attachment", 0.1)
                :WaitForChild("BillboardGui", 0.1)
                :WaitForChild("TimeLeft", 0.1)
        else
            error("Not enough children in Mining folder")
        end
    end,

    -- Path 3: Dynamic GetChildren()[3] path (5 second threshold)
    function()
        local miningFolder = workspace:WaitForChild("GameObjects", 0.1)
            :WaitForChild("Mining", 0.1)
        local children = miningFolder:GetChildren()
        if #children >= 3 then
            return children[3]:WaitForChild("MineSpawn", 0.1)
                :WaitForChild("Attachment", 0.1)
                :WaitForChild("BillboardGui", 0.1)
                :WaitForChild("TimeLeft", 0.1)
        else
            error("Not enough children in Mining folder")
        end
    end
}

local pathNames = {
    "workspace.GameObjects.Mining.Mining.MineSpawn.Attachment.BillboardGui.TimeLeft (5s threshold)",
    "workspace.GameObjects.Mining:GetChildren()[2].MineSpawn.Attachment.BillboardGui.TimeLeft (15s threshold)",
    "workspace.GameObjects.Mining:GetChildren()[3].MineSpawn.Attachment.BillboardGui.TimeLeft (5s threshold)"
}

-- Function to get the appropriate blocks folder based on current path
local function GetCurrentBlocksFolder()
    if currentPathIndex == 1 then
        -- Path 1: workspace.GameObjects.Mining.Mining.Blocks
        local success, folder = pcall(function()
            return workspace:WaitForChild("GameObjects", 0.1)
                :WaitForChild("Mining", 0.1)
                :WaitForChild("Mining", 0.1)
                :WaitForChild("Blocks", 0.1)
        end)
        if success and folder then
            return folder
        end
    elseif currentPathIndex == 2 then
        -- Path 2: workspace.GameObjects.Mining:GetChildren()[2].Blocks
        local success, folder = pcall(function()
            local miningFolder = workspace:WaitForChild("GameObjects", 0.1)
                :WaitForChild("Mining", 0.1)
            local children = miningFolder:GetChildren()
            if #children >= 2 then
                return children[2]:WaitForChild("Blocks", 0.1)
            end
            return nil
        end)
        if success and folder then
            return folder
        end
    elseif currentPathIndex == 3 then
        -- Path 3: workspace.GameObjects.Mining:GetChildren()[3].Blocks
        local success, folder = pcall(function()
            local miningFolder = workspace:WaitForChild("GameObjects", 0.1)
                :WaitForChild("Mining", 0.1)
            local children = miningFolder:GetChildren()
            if #children >= 3 then
                return children[3]:WaitForChild("Blocks", 0.1)
            end
            return nil
        end)
        if success and folder then
            return folder
        end
    end
    return nil
end

local function CheckAndSwitchPath()
    local currentTime = tick()

    -- Only check paths every second
    if currentTime - lastPathCheck < PATH_CHECK_INTERVAL then
        return
    end

    lastPathCheck = currentTime

    -- Try current path first
    local success, label = pcall(paths[currentPathIndex])

    if success and label and label.Parent then
        -- Current path works, use it
        timeLeftLabel = label

        -- Update blocks folder to match current path
        blocksFolder = GetCurrentBlocksFolder()

        return
    else
        -- Current path failed, try other paths
        local tried = 0
        local maxPaths = #paths

        while tried < maxPaths do
            -- Switch to next path
            currentPathIndex = currentPathIndex % maxPaths + 1
            tried = tried + 1

            -- Try this path
            local success2, label2 = pcall(paths[currentPathIndex])

            if success2 and label2 and label2.Parent then
                timeLeftLabel = label2
                -- Update blocks folder to match new path
                blocksFolder = GetCurrentBlocksFolder()
                return
            end
        end

        -- If all paths fail, clear timeLeftLabel if it's no longer valid
        if timeLeftLabel and not timeLeftLabel.Parent then
            timeLeftLabel = nil
        end
    end
end

local function CheckMineReset()
    -- Check and potentially switch paths every second
    CheckAndSwitchPath()

    -- If no valid label found, return false
    if not timeLeftLabel or not timeLeftLabel.Parent then
        return false
    end

    -- Parse the text into seconds
    local secondsLeft = ParseTimerText(timeLeftLabel.Text)

    if not secondsLeft or secondsLeft <= 0 then
        return false
    end

    -- Get the current threshold based on active path (ensure it's always current)
    local currentThreshold = (currentPathIndex == 1 and mineResetThresholdPath1) or (currentPathIndex == 2 and mineResetThresholdPath2) or (currentPathIndex == 3 and mineResetThresholdPath3) or 15

    -- Pause mining if below threshold (different thresholds for different paths)
    if secondsLeft <= currentThreshold then
        return true
    end

    -- Resume mining if mine was paused and timer is above threshold
    if secondsLeft > currentThreshold and isMinePaused then
        return false, true
    end

    return false
end

local function ToggleBlockTransparency(transparent)
    blocksTransparent = transparent

    -- Helper to get all relevant blocks folders
    local function getBlocksFolders()
        local folders = {}
        local miningGO = workspace.GameObjects.Mining

        -- Path 1: workspace.GameObjects.Mining.Mining.Blocks
        local success1, folder1 = pcall(function()
            return miningGO:WaitForChild("Mining", 0.1):WaitForChild("Blocks", 0.1)
        end)
        if success1 and folder1 then
            table.insert(folders, folder1)
        end

        -- Path 2: workspace.GameObjects.Mining:GetChildren()[2].Blocks
        local success2, folder2 = pcall(function()
            local children = miningGO:GetChildren()
            if #children >= 2 then
                return children[2]:WaitForChild("Blocks", 0.1)
            end
            return nil
        end)
        if success2 and folder2 then
            table.insert(folders, folder2)
        end

        -- Path 3: workspace.GameObjects.Mining:GetChildren()[3].Blocks
        local success3, folder3 = pcall(function()
            local children = miningGO:GetChildren()
            if #children >= 3 then
                return children[3]:WaitForChild("Blocks", 0.1)
            end
            return nil
        end)
        if success3 and folder3 then
            table.insert(folders, folder3)
        end

        return folders
    end

    -- Always disconnect previous connection if it exists
    if transparencyConnection then
        pcall(function()
            transparencyConnection:Disconnect()
        end)
        transparencyConnection = nil
    end

    if transparent then
        transparencyConnection = task.spawn(function()
            while blocksTransparent do
                for _, blocksFolder in ipairs(getBlocksFolders()) do
                    if blocksFolder and blocksFolder:IsDescendantOf(workspace) then
                        for _, block in ipairs(blocksFolder:GetChildren()) do
                            if block and block:FindFirstChild("Primary") then
                                block.Primary.Transparency = 0.7
                            end
                        end
                    end
                end
                task.wait(3)
            end
        end)
    else
        for _, blocksFolder in ipairs(getBlocksFolders()) do
            if blocksFolder and blocksFolder:IsDescendantOf(workspace) then
                for _, block in ipairs(blocksFolder:GetChildren()) do
                    if block and block:FindFirstChild("Primary") then
                        block.Primary.Transparency = 0
                    end
                end
            end
        end
    end
end

-- Start monitoring mine reset timer
local function StartMineResetMonitoring()
    if mineResetCheckConnection then
        mineResetCheckConnection:Disconnect()
    end

    mineResetCheckConnection = RunService.Heartbeat:Connect(function()
        local shouldPause, hasReset = CheckMineReset()

        if shouldPause and not isMinePaused then
            -- Pause mining due to imminent reset
            isMinePaused = true
        elseif not shouldPause and isMinePaused then
            -- Resume mining after reset
            isMinePaused = false
        end

        if hasReset then
            -- Update blocks folder after reset
            blocksFolder = GetCurrentBlocksFolder()

            if targetBlockMiningEnabled then
                StartTargetBlockMining()
            elseif miningEnabled then
                StartMining()
            end

            -- Reset path mining index when mine resets
            currentPathBlockIndex = 1

            -- Toggle transparency off and back on if needed
            if blocksTransparent then
                ToggleBlockTransparency(false)
                ToggleBlockTransparency(true)
            end
        end
    end)
end

-- Function to verify if a block still exists
local function BlockExists(block)
    return block and block.Parent and blocksFolder and block.Parent == blocksFolder
end

-- Get the block with the highest depth
local function GetHighestDepthBlock()
    -- Ensure blocks folder exists
    if not blocksFolder or not blocksFolder:IsDescendantOf(workspace) then
        blocksFolder = GetCurrentBlocksFolder()
        if not blocksFolder then return nil end
    end

    local highestBlock = nil
    local highestDepth = -1
    for _, block in ipairs(blocksFolder:GetChildren()) do
        local depth = block:GetAttribute("Depth") or 0
        if depth > highestDepth then
            highestDepth = depth
            highestBlock = block
        end
    end
    return highestBlock
end

local function IsValuableBlock(blockName)
    local lowerName = string.lower(blockName)
    local ignoredBlocks = {
        ["dirt"] = true, ["stone"] = true, ["darkstone"] = true, ["yellowstone"] = true, ["orangestone"] = true,
        ["bluestone"] = true, ["greenstone"] = true, ["redstone"] = true, ["purplestone"] = true, ["redsandstone"] = true,
        ["bluesandstone"] = true, ["greensandstone"] = true, ["yellowsandstone"] = true, ["orangesandstone"] = true,
        ["purplesandstone"] = true, ["pinksandstone"] = true, ["sand"] = true, ["sandstone"] = true,
        ["plastic"] = true, ["hardplastic"] = true, ["redplastic"] = true, ["blueplastic"] = true, ["greenplastic"] = true,
        ["yellowplastic"] = true, ["orangeplastic"] = true, ["purpleplastic"] = true, ["pinkplastic"] = true,
        ["redhardplastic"] = true, ["bluehardplastic"] = true, ["greenhardplastic"] = true, ["yellowhardplastic"] = true,
        ["orangehardplastic"] = true, ["purplehardplastic"] = true, ["pinkhardplastic"] = true
    }
    return not ignoredBlocks[lowerName]
end

-- Find best block to mine based on multi-select
local function FindBestBlock()
    -- Ensure blocks folder exists
    if not blocksFolder or not blocksFolder:IsDescendantOf(workspace) then
        blocksFolder = GetCurrentBlocksFolder()
        if not blocksFolder then return nil end
    end

    -- Check for selected blocks in view
    for _, block in ipairs(blocksFolder:GetChildren()) do
        for _, oreName in ipairs(selectedBlocks) do
            if string.find(string.lower(block.Name), string.lower(oreName)) then
                return block
            end
        end
    end

    -- If none found, mine the deepest block
    return GetHighestDepthBlock()
end

local function MineRandomBlockIfSameDepth()
    if not blocksFolder or not blocksFolder:IsDescendantOf(workspace) then return false end
    local blocks = blocksFolder:GetChildren()
    if #blocks == 0 then return false end

    local firstDepth = blocks[1]:GetAttribute("Depth") or 0
    for _, block in ipairs(blocks) do
        if (block:GetAttribute("Depth") or 0) ~= firstDepth then
            return false
        end
    end

    -- All blocks have the same depth, mine a random one
    local randomBlock = blocks[math.random(1, #blocks)]
    MiningService:MineBlock(randomBlock):andThen(function() end)
    return true
end

-- âœ… NEW: Path mining pause variables
local pathMiningConnection
local currentPathBlockIndex = 1 
local lastMiningTime = os.clock()
local blockTypeCounts = {}  
local miningDelay = 0.25
local lastPauseCheck = 0
local pauseInterval = 10 -- âœ… NEW: Check every 10 seconds
local otherMiningPaused = false -- âœ… NEW: Track if other mining is paused due to path mining

-- âœ… NEW: Function to check if all selected path mining blocks are destroyed
local function CheckAllPathBlocksDestroyed()
    if not blocksFolder or not blocksFolder:IsDescendantOf(workspace) or #pathMiningBlocks == 0 then
        return true -- No blocks to check or no folder
    end

    -- Check if any of the selected path mining blocks still exist
    for _, targetName in ipairs(pathMiningBlocks) do
        for _, block in ipairs(blocksFolder:GetChildren()) do
            if string.find(string.lower(block.Name), string.lower(targetName)) then
                return false -- Found at least one block still exists
            end
        end
    end

    return true -- All selected blocks are destroyed
end

local function StartMining()
    if miningConnection then
        miningConnection:Disconnect()
    end

    miningConnection = RunService.Heartbeat:Connect(function()
        -- âœ… UPDATED: Check both mine reset pause AND path mining pause
        if not miningEnabled or isMinePaused or otherMiningPaused then return end

        -- Ensure blocks folder exists after a mine reset
        if not blocksFolder or not blocksFolder:IsDescendantOf(workspace) then
            blocksFolder = GetCurrentBlocksFolder()
            if not blocksFolder then return end
        end

        if MineRandomBlockIfSameDepth() then return end

        local blockToMine = FindBestBlock()
        if blockToMine and BlockExists(blockToMine) then
            MiningService:MineBlock(blockToMine):andThen(function() end)
        end
    end)
end

local function StartPathMining()
    if pathMiningConnection then
        pathMiningConnection:Disconnect()
    end

    pathMiningConnection = RunService.Heartbeat:Connect(function()
        if not mineAlongPath or isMinePaused or #pathMiningBlocks == 0 then return end

        local currentTime = os.clock()
        
        -- âœ… NEW: Every 10 seconds, check if path blocks exist and manage pausing
        if currentTime - lastPauseCheck >= pauseInterval then
            lastPauseCheck = currentTime
            
            -- Check if selected path blocks exist
            local pathBlocksExist = not CheckAllPathBlocksDestroyed()
            
            if pathBlocksExist then
                -- Path blocks exist, pause other mining functions
                otherMiningPaused = true
            else
                -- No path blocks exist, resume other mining functions and wait 10 seconds
                otherMiningPaused = false
                task.wait(10) -- âœ… NEW: Wait 10 seconds before next check
                return
            end
        end
        
        -- Only proceed with path mining if enough time has passed
        if currentTime - lastMiningTime < miningDelay then return end

        if not blocksFolder or not blocksFolder:IsDescendantOf(workspace) then
            blocksFolder = GetCurrentBlocksFolder()
            if not blocksFolder then
                return
            end
        end

        local tried = 0
        local blockFound = false
        local blockToMine = nil

        while tried < #pathMiningBlocks do
            local currentTarget = pathMiningBlocks[currentPathBlockIndex]
            local foundCount = 0

            -- Count blocks of current target type
            for _, block in ipairs(blocksFolder:GetChildren()) do
                local blockName = string.lower(block.Name)
                if string.find(blockName, string.lower(currentTarget)) and BlockExists(block) then
                    foundCount = foundCount + 1
                    if not blockToMine then
                        blockToMine = block
                    end
                end
            end

            if foundCount > 0 then
                blockFound = true
                break
            else
                -- Rotate to next type
                local previousTarget = currentTarget
                currentPathBlockIndex = currentPathBlockIndex + 1
                if currentPathBlockIndex > #pathMiningBlocks then
                    currentPathBlockIndex = 1
                end
                local newTarget = pathMiningBlocks[currentPathBlockIndex]
                tried = tried + 1
            end
        end

        if blockFound and blockToMine then
            MiningService:MineBlock(blockToMine):andThen(function() end)
            lastMiningTime = currentTime
        else
            -- No path blocks found, resume other mining
            otherMiningPaused = false
        end
    end)
end

-- Find the minimum depth at which a block appears
local function GetBlockMinDepth(blockName)
    for _, layerData in ipairs(LayerInfoModule) do
        if layerData.Spawnable and layerData.Spawnable[blockName] then
            return layerData.Depth or 0
        end
    end
    return 0
end

-- Get a block to mine when targeting a specific ore
local function GetBlockInTargetRange()
    if not targetBlock then 
        return GetHighestDepthBlock() 
    end

    if not blocksFolder or not blocksFolder:IsDescendantOf(workspace) then
        blocksFolder = GetCurrentBlocksFolder()
        if not blocksFolder then return nil end
    end

    for _, block in ipairs(blocksFolder:GetChildren()) do
        if string.find(string.lower(block.Name), string.lower(targetBlock)) then
            return block
        end
    end

    -- Mine along the way is no longer tied here
    local targetMinDepth = GetBlockMinDepth(targetBlock)

    local bestBlock = nil
    local bestDepth = -1

    for _, block in ipairs(blocksFolder:GetChildren()) do
        local depth = block:GetAttribute("Depth") or 0
        if depth > bestDepth then
            bestDepth = depth
            bestBlock = block
        end
    end

    return bestBlock or GetHighestDepthBlock()
end

local function StartTargetBlockMining()
    if targetBlockMiningConnection then
        targetBlockMiningConnection:Disconnect()
    end

    targetBlockMiningConnection = RunService.Heartbeat:Connect(function()
        -- âœ… UPDATED: Check both mine reset pause AND path mining pause
        if not targetBlockMiningEnabled or isMinePaused or otherMiningPaused then return end

        if not blocksFolder or not blocksFolder:IsDescendantOf(workspace) then
            blocksFolder = GetCurrentBlocksFolder()
            if not blocksFolder then return end
        end

        if MineRandomBlockIfSameDepth() then return end -- Mine random block if all depths are equal

        local blockToMine = GetBlockInTargetRange()
        if blockToMine and BlockExists(blockToMine) then
            MiningService:MineBlock(blockToMine):andThen(function() end)
        end
    end)
end

-- Initialize blocks folder on startup
blocksFolder = GetCurrentBlocksFolder()

-- UI Elements
local miningSection = Tabs.Mining:AddSection("Mining Controls")

local miningToggle = Tabs.Mining:AddToggle("MiningToggle", {
    Title = "Auto Mining",
    Default = false
})

local blockDropdown = Tabs.Mining:AddDropdown("BlockSelection", {
    Title = "Select Blocks to Mine",
    Values = AllBlockNames,
    Multi = true,
    Default = {},
    Searchable = true
})

blockDropdown:OnChanged(function(value)
    selectedBlocks = {}
    for block, selected in pairs(value) do
        if selected then
            table.insert(selectedBlocks, block)
        end
    end
end)

-- Target Block section
local targetSection = Tabs.Mining:AddSection("Target Block")

local targetBlockDropdown = Tabs.Mining:AddDropdown("TargetBlockSelection", {
    Title = "Target Ore",
    Values = AllBlockNames,
    Multi = false,
    Default = "",
    Searchable = true
})

targetBlockDropdown:OnChanged(function(value)
    targetBlock = value
end)

local pathMiningDropdown = Tabs.Mining:AddDropdown("PathMiningBlocks", {
    Title = "Mine Blocks Along the Way",
    Values = FilteredBlockNames,
    Multi = true,
    Default = {},
    Searchable = true
})

pathMiningDropdown:OnChanged(function(value)
    pathMiningBlocks = {}
    for block, selected in pairs(value) do
        if selected then
            table.insert(pathMiningBlocks, block)
        end
    end

    -- Reset to first block type when selection changes
    currentPathBlockIndex = 1
end)

local pathMiningToggle = Tabs.Mining:AddToggle("PathMining", {
    Title = "Mine Along the Way",
    Default = false,
    Description = "Mine selected valuable blocks while digging around (pauses other mining every 10s when blocks exist)"
})

pathMiningToggle:OnChanged(function(value)
    mineAlongPath = value
    if value then
        lastPauseCheck = 0 -- âœ… Reset pause timer when enabling
        otherMiningPaused = false -- âœ… Reset pause state
        StartPathMining()
    elseif pathMiningConnection then
        pathMiningConnection:Disconnect()
        pathMiningConnection = nil
        otherMiningPaused = false -- âœ… Resume other mining when path mining is disabled
    end
end)

local targetMiningToggle = Tabs.Mining:AddToggle("TargetMining", {
    Title = "Auto Mine to Target",
    Default = false,
    Description = "Automatically mine to reach target ore's depth"
})

targetMiningToggle:OnChanged(function(value)
    targetBlockMiningEnabled = value
    if value then
        if miningEnabled then
            miningToggle:SetValue(false)
        end
        StartTargetBlockMining()
    elseif targetBlockMiningConnection then
        targetBlockMiningConnection:Disconnect()
        targetBlockMiningConnection = nil
    end
end)

miningToggle:OnChanged(function(value)
    miningEnabled = value
    if value then
        if targetBlockMiningEnabled then
            targetMiningToggle:SetValue(false)
        end
        StartMining()
    elseif miningConnection then
        miningConnection:Disconnect()
        miningConnection = nil
    end
end)

-- Transparency section
local transparencySection = Tabs.Mining:AddSection("Transparency")

local transparencyToggle = Tabs.Mining:AddToggle("BlockTransparency", {
    Title = "Block Transparency",
    Default = false
})

transparencyToggle:OnChanged(function(value)
    ToggleBlockTransparency(value)
end)

-- Mine Reset Status section
local resetSection = Tabs.Mining:AddSection("Mine Reset Status")

local resetStatusLabel = resetSection:AddParagraph("ResetStatus", {
    Title = "Mine Reset Timer",
    Content = "Checking..."
})

-- Update reset status text continuously
spawn(function()
    while true do
        local success, text = pcall(function()
            if timeLeftLabel and timeLeftLabel:IsDescendantOf(workspace) then
                local currentThreshold = (currentPathIndex == 1 and mineResetThresholdPath1) or (currentPathIndex == 2 and mineResetThresholdPath2) or (currentPathIndex == 3 and mineResetThresholdPath3) or 15
                local secondsLeft = ParseTimerText(timeLeftLabel.Text) or 0
                return timeLeftLabel.Text .. " (Threshold: " .. currentThreshold .. "s, Path: " .. currentPathIndex .. ", Seconds: " .. secondsLeft .. ")"
            end

            return "Timer not found"
        end)

        if success then
            resetStatusLabel:SetContent("Mine Reset: " .. text)
        else
            resetStatusLabel:SetContent("Mine Reset: Error getting timer")
        end
        wait(1)
    end
end)

StartMineResetMonitoring()

-- Add Smelt Ores Section
local SmeltSection = Tabs.Mining:AddSection("Smelt Ores")

-- Add Fuel toggle
local addFuelToggle = SmeltSection:AddToggle("AddFuel", {
    Title = "Add Fuel (Coal)",
    Description = "Automatically adds coal as fuel.",
    Default = false
})

addFuelToggle:OnChanged(function()
    if addFuelToggle.Value then
        spawn(function()
            while addFuelToggle.Value do
                pcall(function()
                    local Knit = require(game:GetService("ReplicatedStorage").Packages.Knit.KnitClient)
                    Knit.GetService("OreSmeltingService"):AddAllOres("Coal Ore", 1)
                end)
                wait(5) -- Every 5 seconds
            end
        end)
    end
end)

-- Auto Claim toggle
local autoClaimSmeltToggle = SmeltSection:AddToggle("AutoClaimSmelt", {
    Title = "Auto Claim",
    Description = "Automatically claims the smelted ores.",
    Default = false
})

autoClaimSmeltToggle:OnChanged(function()
    if autoClaimSmeltToggle.Value then
        spawn(function()
            while autoClaimSmeltToggle.Value do
                pcall(function()
                    local Knit = require(game:GetService("ReplicatedStorage").Packages.Knit.KnitClient)
                    Knit.GetService("OreSmeltingService"):ClaimSmelting()
                end)
                wait(1) -- Every second
            end
        end)
    end
end)

-- Function to get available ores from inventory
local function GetAvailableOres()
    local availableOres = {}
    
    pcall(function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local Knit = require(ReplicatedStorage.Packages.Knit)
        local CustomReplicaController = Knit.GetController("CustomReplicaController")
        local ItemInfo = require(ReplicatedStorage.Data.Item.ItemInfo)
        
        local playerData = CustomReplicaController:GetReplica()
        local inventory = playerData.Data.Items.ItemInventory.Misc
        
        for itemName, itemData in pairs(inventory) do
            local itemInfo = ItemInfo[itemName]
            if itemInfo and itemInfo.Ore then
                local tier1Amount = itemData["1"]
                if tier1Amount and tier1Amount > 0 then
                    table.insert(availableOres, itemName)
                end
            end
        end
    end)
    
    return availableOres
end

-- Function to check if main smelting slot is empty
local function IsMainSlotEmpty()
    local isEmpty = true
    
    pcall(function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local Knit = require(ReplicatedStorage.Packages.Knit)
        local CustomReplicaController = Knit.GetController("CustomReplicaController")
        
        local playerData = CustomReplicaController:GetReplica()
        local smeltingData = playerData.Data.SmeltingData
        
        isEmpty = not smeltingData.SmeltingOre.Item or smeltingData.SmeltingOre.Item == ""
    end)
    
    return isEmpty
end

-- Smelt All Ores toggle
local smeltAllOresToggle = SmeltSection:AddToggle("SmeltAllOres", {
    Title = "Smelt All Ores",
    Description = "Automatically adds ores to smelt.",
    Default = false
})

smeltAllOresToggle:OnChanged(function()
    if smeltAllOresToggle.Value then
        spawn(function()
            while smeltAllOresToggle.Value do
                pcall(function()
                    -- Check if main slot is empty
                    if IsMainSlotEmpty() then
                        local availableOres = GetAvailableOres()
                        
                        if #availableOres > 0 then
                            -- Pick a random ore
                            local randomOre = availableOres[math.random(1, #availableOres)]
                            
                            -- Add the random ore to smelting
                            local Knit = require(game:GetService("ReplicatedStorage").Packages.Knit.KnitClient)
                            Knit.GetService("OreSmeltingService"):AddAllOres(randomOre, 1)
                            
                            
                            -- Wait a bit for the ore to be added
                            wait(2)
                        end
                    end
                end)
                
                wait(3) -- Check every 3 seconds
            end
        end)
    end
end)

local Inventory = Tabs.Mining:AddSection("Auto Sell")

-- Add cooldown input with default value of 10
local sellCooldownInput = Inventory:AddInput("SellCooldown", {
    Title = "Sell Cooldown (seconds)",
    Default = "10",
    Placeholder = "Enter cooldown in seconds",
    Numeric = true, -- Only allow numbers
    Finished = false, -- Call callback when user is done typing
    Callback = function(Value) end
})

-- Add Auto Sell toggle
local autoSellToggle = Inventory:AddToggle("AutoSell", {
    Title = "Auto Sell",
    Description = "Automatically sells your mining inventory on the specified cooldown",
    Default = false
})

-- Auto Sell toggle handler
autoSellToggle:OnChanged(function()
    if autoSellToggle.Value then
        spawn(function()
            while autoSellToggle.Value do
                -- Sell inventory
                pcall(function()
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.OreMarketService.RF.SellInventory:InvokeServer()
                end)
                
                -- Wait for cooldown (with a safety check for non-numeric input)
                local cooldown = tonumber(sellCooldownInput.Value) or 10
                if cooldown < 1 then cooldown = 1 end -- Minimum 1 second cooldown
                wait(cooldown)
            end
        end)
    end
end)

-- Add Pickaxe Purchase Section
local PickaxeSection = Tabs.Mining:AddSection("Pickaxe Purchase")

-- Function to format numbers
local function formatNumber(num)
    if not num or type(num) ~= "number" then return "0" end
    
    if num >= 1e15 then
        return string.format("%.2fQ", num / 1e15)
    elseif num >= 1e12 then
        return string.format("%.2fT", num / 1e12)
    elseif num >= 1e9 then
        return string.format("%.2fB", num / 1e9)
    elseif num >= 1e6 then
        return string.format("%.2fM", num / 1e6)
    elseif num >= 1e3 then
        return string.format("%.2fK", num / 1e3)
    else
        return tostring(num)
    end
end

-- Initialize pickaxe data
local pickaxeData = {
    allPickaxes = {},
    missingPickaxes = {},
    ownedPickaxes = {},
    pickaxeNames = {},
    nextPickaxe = nil,
    selectedPickaxe = nil,
    bestOwned = nil,
    currentlyEquipped = nil,
    playerCoins = 0
}

-- Function to get player's mining coins
local function GetPlayerMiningCoins()
    local localPlayer = game:GetService("Players").LocalPlayer
    local miningCoins = 0
    
    -- Try to get the MiningCoins attribute
    pcall(function()
        miningCoins = localPlayer:GetAttribute("MiningCoins") or 0
    end)
    
    return miningCoins
end

-- Function to get currently equipped pickaxe using MiningController
local function GetEquippedPickaxe()
    local equippedName = ""
    
    pcall(function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local MiningController = require(ReplicatedStorage.Controllers.MiningController)
        
        if MiningController and MiningController.CurrentPickaxe then
            equippedName = MiningController.CurrentPickaxe.Name
        end
    end)
    
    -- Fallback to old method if MiningController method fails
    if equippedName == "" then
        pcall(function()
            local playerReplica = game:GetService("ReplicatedStorage").Packages.Knit.GetController("CustomReplicaController"):GetReplica()
            if playerReplica and playerReplica.Data then
                equippedName = playerReplica.Data.EquippedPickaxe or ""
            end
        end)
    end
    
    return equippedName
end

-- Function to get pickaxe data with improved error handling
local function LoadPickaxeData()
    -- Clear existing data
    pickaxeData.allPickaxes = {}
    pickaxeData.missingPickaxes = {}
    pickaxeData.ownedPickaxes = {}
    pickaxeData.pickaxeNames = {}
    
    -- Get current coins
    pickaxeData.playerCoins = GetPlayerMiningCoins()
    
    -- Wrap everything in pcall to catch any errors
    local success, errorMsg = pcall(function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        
        -- Load necessary modules with error handling
        local ItemController, ItemInfo, pickaxesFolder
        
        -- Try to load ItemController
        pcall(function()
            -- Try different paths for ItemController
            ItemController = require(ReplicatedStorage.Controllers.Item.ItemController) or
                             require(ReplicatedStorage.Controllers.ItemController)
        end)
        
        -- Try to load ItemInfo
        pcall(function()
            ItemInfo = require(ReplicatedStorage.Data.Item.ItemInfo)
        end)
        
        -- Try to get pickaxes folder
        pcall(function()
            pickaxesFolder = ReplicatedStorage:WaitForChild("Tools"):WaitForChild("Pickaxes")
        end)
        
        -- Check if we have all required components
        if not ItemController or not ItemInfo or not pickaxesFolder then
            warn("Missing required components for pickaxe data loading")
            return false
        end
        
        -- Get currently equipped pickaxe using the improved function
        local equippedPickaxe = GetEquippedPickaxe()
        
        -- Process each pickaxe
        for _, pickaxeObj in pairs(pickaxesFolder:GetChildren()) do
            local pickaxeName = pickaxeObj.Name
            
            if ItemInfo[pickaxeName] then
                local pickaxeItemData = ItemInfo[pickaxeName]
                local tierInfo = pickaxeItemData.Tiers and pickaxeItemData.Tiers[1]
                local rarity = tierInfo and tierInfo.Rarity or "Unknown"
                local price = pickaxeItemData.Price or (tierInfo and tierInfo.Price or 0)
                
                -- Check if player owns this pickaxe
                local isOwned = false
                pcall(function()
                    isOwned = ItemController:GetItemAmount({
                        Item = pickaxeName,
                        Tier = 1
                    }) > 0
                end)
                
                -- Check if this is the equipped pickaxe
                local isEquipped = (pickaxeName == equippedPickaxe)
                
                -- Create pickaxe info table with formatted price
                local formattedPriceStr = formatNumber(price)
                
                local pickaxeInfo = {
                    name = pickaxeName,
                    price = price,
                    formattedPrice = formattedPriceStr,
                    rarity = rarity,
                    owned = isOwned,
                    equipped = isEquipped,
                    canAfford = (pickaxeData.playerCoins >= price)
                }
                
                -- Add to all pickaxes list and name list
                table.insert(pickaxeData.allPickaxes, pickaxeInfo)
                table.insert(pickaxeData.pickaxeNames, pickaxeName)
                
                -- Add to appropriate ownership list
                if isOwned then
                    table.insert(pickaxeData.ownedPickaxes, pickaxeInfo)
                    
                    -- Track equipped pickaxe
                    if isEquipped then
                        pickaxeData.currentlyEquipped = pickaxeInfo
                    end
                else
                    table.insert(pickaxeData.missingPickaxes, pickaxeInfo)
                end
            end
        end
        
        -- Sort pickaxes by price
        table.sort(pickaxeData.allPickaxes, function(a, b) return a.price < b.price end)
        table.sort(pickaxeData.ownedPickaxes, function(a, b) return a.price < b.price end)
        table.sort(pickaxeData.missingPickaxes, function(a, b) return a.price < b.price end)
        
        -- Find the best owned pickaxe (most expensive)
        if #pickaxeData.ownedPickaxes > 0 then
            pickaxeData.bestOwned = pickaxeData.ownedPickaxes[#pickaxeData.ownedPickaxes]
            local bestOwnedIndex = 0
            
            -- Find the index of the best owned pickaxe in the allPickaxes array
            for i, pickaxe in ipairs(pickaxeData.allPickaxes) do
                if pickaxe.name == pickaxeData.bestOwned.name then
                    bestOwnedIndex = i
                    break
                end
            end
            
            -- Set the next pickaxe to buy (the one after your best owned)
            if bestOwnedIndex > 0 and bestOwnedIndex < #pickaxeData.allPickaxes then
                -- Get the next pickaxe after your best owned one
                pickaxeData.nextPickaxe = pickaxeData.allPickaxes[bestOwnedIndex + 1]
            elseif bestOwnedIndex == #pickaxeData.allPickaxes then
                -- If you own the best pickaxe, there's no next one
                pickaxeData.nextPickaxe = nil
            end
        elseif #pickaxeData.allPickaxes > 0 then
            -- If you own no pickaxes, get the cheapest one
            pickaxeData.nextPickaxe = pickaxeData.allPickaxes[1]
        end
    end)
    
    if not success then
        warn("Error loading pickaxe data: " .. tostring(errorMsg))
        -- Add a default next pickaxe to prevent nil errors
        pickaxeData.nextPickaxe = {
            name = "Error loading pickaxes",
            price = 0,
            formattedPrice = "Error",
            rarity = "Unknown",
            owned = false,
            equipped = false,
            canAfford = false
        }
    end
    
    return success
end

-- Add Pickaxe dropdown
local pickaxeDropdown = PickaxeSection:AddDropdown("PickaxeSelect", {
    Title = "Select Pickaxe",
    Values = {"Loading..."},
    Multi = false,
    Default = "Wooden Pickaxe",
    Searchable = true
})

-- Add Buy button
local buyPickaxeButton = PickaxeSection:AddButton({
    Title = "Buy Selected Pickaxe",
    Description = "Purchase the pickaxe selected above",
    Callback = function()
        if pickaxeData.selectedPickaxe then
            -- Buy the selected pickaxe using the direct Remote Function
            pcall(function()
                local args = {
                    [1] = pickaxeData.selectedPickaxe
                }
                
                game:GetService("ReplicatedStorage").Packages.Knit.Services.PickaxeMerchantService.RF.BuyPickaxe:InvokeServer(unpack(args))
                
                -- Wait a moment before reloading data to allow the purchase to process
                wait(1)
                
                -- Reload pickaxe data after purchase
                LoadPickaxeData()
                
                -- Update next pickaxe status
                UpdateNextPickaxeStatus()
                
                -- Update dropdown values
                UpdatePickaxeDropdown()
            end)
        end
    end
})

-- Add auto-buy next pickaxe toggle
local nextPickaxeStatus = PickaxeSection:AddParagraph("NextPickaxeStatus", {
    Title = "Next Pickaxe",
    Content = "Loading pickaxe data..."
})

-- Function to update next pickaxe status
function UpdateNextPickaxeStatus()
    if not pickaxeData.nextPickaxe then
        nextPickaxeStatus:SetContent("You own all pickaxes!")
        return
    end
    
    local coins = GetPlayerMiningCoins()
    local nextPickaxeName = pickaxeData.nextPickaxe.name
    local nextPickaxePrice = pickaxeData.nextPickaxe.price
    local formattedCoins = formatNumber(coins)
    local formattedPrice = formatNumber(nextPickaxePrice)
    
    local statusContent = "Next: " .. nextPickaxeName .. " (" .. formattedPrice .. ")\n"
    statusContent = statusContent .. "Your coins: " .. formattedCoins
    
    if coins < nextPickaxePrice then
        local needed = nextPickaxePrice - coins
        statusContent = statusContent .. "\nNeed " .. formatNumber(needed) .. " more coins"
    else
        statusContent = statusContent .. "\nYou can afford this pickaxe!"
    end
    
    nextPickaxeStatus:SetContent(statusContent)
end

-- Auto buy toggle
local autoBuyNextToggle = PickaxeSection:AddToggle("AutoBuyNext", {
    Title = "Auto Buy Next Pickaxe",
    Description = "Automatically buys the next progressive pickaxe when affordable",
    Default = false
})

-- Function to update dropdown values
function UpdatePickaxeDropdown()
    pcall(function()
        -- Load names of all pickaxes
        local pickaxeNames = {}
        for _, pickaxe in ipairs(pickaxeData.allPickaxes) do
            table.insert(pickaxeNames, pickaxe.name)
        end
        
        -- If no pickaxes loaded, add a placeholder
        if #pickaxeNames == 0 then
            table.insert(pickaxeNames, "No pickaxes found")
        end
        
        -- Update dropdown values
        pickaxeDropdown:SetValues(pickaxeNames)
    end)
end

-- Add Auto Equip Section
local AutoEquipSection = Tabs.Mining:AddSection("Auto Equip")

-- Auto equip status
local equipStatus = AutoEquipSection:AddParagraph("EquipStatus", {
    Title = "Pickaxe Status",
    Content = "Loading pickaxe data..."
})

-- Auto equip toggle
local autoEquipToggle = AutoEquipSection:AddToggle("AutoEquipBest", {
    Title = "Auto Equip Best Pickaxe",
    Description = "Automatically equips your best pickaxe if it isn't equipped",
    Default = false
})

-- Function to update equip status
function UpdateEquipStatus()
    if not pickaxeData.bestOwned then
        equipStatus:SetContent("No pickaxes owned")
        return
    end
    
    local statusContent = "Best: " .. pickaxeData.bestOwned.name
    
    if pickaxeData.currentlyEquipped then
        statusContent = statusContent .. "\nEquipped: " .. pickaxeData.currentlyEquipped.name
        
        if pickaxeData.bestOwned.name == pickaxeData.currentlyEquipped.name then
            statusContent = statusContent .. "\nStatus: Best pickaxe equipped"
        else
            statusContent = statusContent .. "\nStatus: Not using best pickaxe"
        end
    else
        statusContent = statusContent .. "\nNo pickaxe equipped"
    end
    
    equipStatus:SetContent(statusContent)
end

-- Function to equip best pickaxe
function EquipBestPickaxe()
    if not pickaxeData.bestOwned then return end
    
    -- Check if best pickaxe is already equipped
    if pickaxeData.currentlyEquipped and pickaxeData.currentlyEquipped.name == pickaxeData.bestOwned.name then
        return
    end
    
    -- Equip best pickaxe
    pcall(function()
        local args = {
            [1] = pickaxeData.bestOwned.name
        }
        
        game:GetService("ReplicatedStorage").Packages.Knit.Services.PickaxeMerchantService.RF.EquipPickaxe:InvokeServer(unpack(args))
        
        -- Wait a moment before reloading data
        wait(1)
        
        -- Reload pickaxe data
        LoadPickaxeData()
        
        -- Update equip status
        UpdateEquipStatus()
    end)
end

-- Load pickaxe data with retry
spawn(function()
    local success = false
    local attempts = 0
    
    while not success and attempts < 5 do
        attempts = attempts + 1
        success = LoadPickaxeData()
        
        if not success then
            nextPickaxeStatus:SetContent("Loading attempt " .. attempts .. "/5...")
            wait(2) -- Wait before retrying
        end
    end
    
    -- Update UI based on result
    if success then
        UpdateNextPickaxeStatus()
        UpdateEquipStatus()
        UpdatePickaxeDropdown()
    else
        nextPickaxeStatus:SetContent("Failed to load pickaxe data. Try rejoining.")
        equipStatus:SetContent("Failed to load pickaxe data.")
    end
    
    -- Start status update loop
    spawn(function()
        while wait(5) do
            LoadPickaxeData()
            UpdateNextPickaxeStatus()
            UpdateEquipStatus()
        end
    end)
end)

-- Handle dropdown selection
pickaxeDropdown:OnChanged(function(value)
    if value ~= "Loading..." and value ~= "No pickaxes found" then
        pickaxeData.selectedPickaxe = value
    end
end)

-- Auto buy next pickaxe toggle handler
autoBuyNextToggle:OnChanged(function()
    if autoBuyNextToggle.Value then
        spawn(function()
            while autoBuyNextToggle.Value do
                -- Reload pickaxe data to get the latest info
                local success = LoadPickaxeData()
                
                if success and pickaxeData.nextPickaxe then
                    -- Check if player can afford the next pickaxe
                    local playerCoins = GetPlayerMiningCoins()
                    
                    if playerCoins >= pickaxeData.nextPickaxe.price then
                        -- Update status to show we are buying
                        nextPickaxeStatus:SetContent("Buying: " .. pickaxeData.nextPickaxe.name)
                        
                        -- Attempt to buy the next pickaxe
                        pcall(function()
                            -- âœ… CORRECTED: Use Knit service to buy the next best pickaxe
                            local PickaxeService = Knit.GetService("PickaxeMerchantService")
                            PickaxeService:BuyPickaxe(pickaxeData.nextPickaxe.name)
                            
                            -- Wait a moment for the purchase to process
                            wait(1)
                            
                            -- Reload all data and update UI after purchase
                            LoadPickaxeData()
                            UpdateNextPickaxeStatus()
                            UpdateEquipStatus()
                            UpdatePickaxeDropdown()
                        end)
                    else
                        -- Not enough coins, update status and wait
                        UpdateNextPickaxeStatus()
                    end
                else
                    -- Handle cases where data fails to load or all pickaxes are owned
                    if not success then
                        nextPickaxeStatus:SetContent("Error loading pickaxe data")
                    else
                        nextPickaxeStatus:SetContent("You own all pickaxes!")
                        autoBuyNextToggle:SetValue(false) -- Turn off toggle
                        break
                    end
                end
                
                wait(5) -- Wait 5 seconds before checking again
            end
        end)
    end
end)

-- Auto equip toggle handler
autoEquipToggle:OnChanged(function()
    if autoEquipToggle.Value then
        spawn(function()
            while autoEquipToggle.Value do
                -- Reload pickaxe data to get the latest
                local success = LoadPickaxeData()
                
                if success then
                    -- Check if best pickaxe is already equipped
                    if pickaxeData.bestOwned and pickaxeData.currentlyEquipped then
                        if pickaxeData.bestOwned.name ~= pickaxeData.currentlyEquipped.name then
                            EquipBestPickaxe()
                        end
                    elseif pickaxeData.bestOwned then
                        -- If no pickaxe equipped but we have one
                        EquipBestPickaxe()
                    end
                    
                    -- Update equip status
                    UpdateEquipStatus()
                end
                
                wait(5) -- Check every 5 seconds
            end
        end)
    end
end)


local MiningVaultSection = Tabs.Mining:AddSection("Mining Vault")

local MiningGoldStatus = MiningVaultSection:Paragraph("MiningGoldStatus", {
    Title = "Mining Gold Amount",
    Content = "Loading..."
})

local AutoOpenVaultToggle = MiningVaultSection:AddToggle("AutoOpenVault", {
    Title = "Auto Open Mining Vault",
    Description = "Automatically opens Mining Vault when you have Mining Gold.",
    Default = false
})

local function parseAmount(amtText)
    local numStr = amtText:match("x(.+)")
    if not numStr then return 0 end
    if numStr:find("k") then
        local baseNum = tonumber(numStr:match("(%d+%.?%d*)k"))
        return baseNum and (baseNum * 1000) or 0
    else
        return tonumber(numStr) or 0
    end
end

-- Auto Open Mining Vault Loop
AutoOpenVaultToggle:OnChanged(function(enabled)
    if enabled then
        task.spawn(function()
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            while AutoOpenVaultToggle.Value do
                local player = game.Players.LocalPlayer
                local goldObject = player.PlayerGui.GameUI.Menus.Inventory.Display.Items.MainFrame.ScrollingFrame.KeysStorage.Objects:FindFirstChild("Mining Gold/1")
                
                if goldObject and goldObject:FindFirstChild("ButtonDisplay") and goldObject.ButtonDisplay:FindFirstChild("Amt") then
                    local amtText = goldObject.ButtonDisplay.Amt.Text
                    local amount = parseAmount(amtText)
                    MiningGoldStatus:SetValue(amtText)
                    
                    if amount >= 1 then
                        pcall(function()
                            local Knit = require(game:GetService("ReplicatedStorage").Packages.Knit.KnitClient)
                            Knit.GetService("ChestService"):Open("MiningVault")
                        end)
                        task.wait(0.25) -- Fast check when gold is available
                    else
                        MiningGoldStatus:SetValue("No Gold")
                        task.wait(1) -- Slower check when no gold
                    end
                else
                    MiningGoldStatus:SetValue("No Gold")
                    task.wait(1) -- Slower check when GUI element doesn't exist
                end
            end
        end)
    end
end)

-- Passive Status Updater (even when toggle is off)
task.spawn(function()
    while true do
        local player = game:GetService("Players").LocalPlayer
        local goldObject = player.PlayerGui.GameUI.Menus.Inventory.Display.Items.MainFrame.ScrollingFrame.KeysStorage.Objects:FindFirstChild("Mining Gold/1")
        
        if goldObject and goldObject:FindFirstChild("ButtonDisplay") and goldObject.ButtonDisplay:FindFirstChild("Amt") then
            MiningGoldStatus:SetValue(goldObject.ButtonDisplay.Amt.Text)
        else
            MiningGoldStatus:SetValue("No Gold")
        end
        
        task.wait(1)
    end
end)


-- Hand the library over to our managers
SaveManager:SetLibrary(Library)
InterfaceManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes{}
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")


InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)
Window:SelectTab(1)
SaveManager:LoadAutoloadConfig()



