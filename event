-- Hero Event

-- Function to get all valid egg names in alphabetical order
local function getEggNames()
    local eggNames = {}
    local zones = workspace:FindFirstChild("Zones")

    if zones then
        for _, zone in pairs(zones:GetChildren()) do
            if zone:IsA("Folder") and not zone.Name:match("%d") then -- Ignore zones with numbers
                local interactables = zone:FindFirstChild("Interactables")
                if interactables then
                    local eggs = interactables:FindFirstChild("Eggs")
                    if eggs then
                        for _, egg in pairs(eggs:GetChildren()) do
                            table.insert(eggNames, egg.Name)
                        end
                    end
                end
            end
        end
    end

    table.sort(eggNames) -- Sort alphabetically
    return eggNames
end


game:GetService("ReplicatedStorage").Packages.Knit.Services.WrestleService.RF.OnAutoFight:InvokeServer()

-- Create a ScreenGui for our minimize button
local MinimizeGui = Instance.new("ScreenGui")
MinimizeGui.Name = "MinimizeGui"
MinimizeGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
MinimizeGui.ResetOnSpawn = false

-- Create the minimize button with centered positioning
local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Name = "MinimizeButton"
MinimizeButton.Parent = MinimizeGui
MinimizeButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
MinimizeButton.BorderColor3 = Color3.fromRGB(50, 50, 50)
MinimizeButton.AnchorPoint = Vector2.new(0.5, 0.5)
MinimizeButton.Position = UDim2.new(0.5, 0, 0.5, 0)
MinimizeButton.Size = UDim2.new(0, 80, 0, 40)
MinimizeButton.Font = Enum.Font.GothamBold
MinimizeButton.Text = "Close"
MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.TextSize = 16.000

-- Add corner radius
local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 6)
UICorner.Parent = MinimizeButton

-- Create X button for removal
local CloseButton = Instance.new("TextButton")
CloseButton.Name = "CloseButton"
CloseButton.Parent = MinimizeButton
CloseButton.BackgroundTransparency = 1
CloseButton.Position = UDim2.new(1, -20, 0, 0)
CloseButton.Size = UDim2.new(0, 20, 0, 20)
CloseButton.Font = Enum.Font.GothamBold
CloseButton.Text = "Ã—"
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextSize = 16.000
CloseButton.ZIndex = 2

-- Close button functionality
CloseButton.MouseButton1Click:Connect(function()
    -- Destroy the MinimizeButton and CloseButton
    MinimizeButton:Destroy()
    CloseButton:Destroy()
    -- Optionally, destroy the entire GUI if needed
    MinimizeGui:Destroy()
end)



-- Make button draggable
local UserInputService = game:GetService("UserInputService")
local dragging
local dragStart
local startPos

MinimizeButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = MinimizeButton.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
        local delta = input.Position - dragStart
        MinimizeButton.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Add hover effects for Event button
MinimizeButton.MouseEnter:Connect(function()
    game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
        BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    }):Play()
end)

MinimizeButton.MouseLeave:Connect(function()
    game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
        BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    }):Play()
end)

-- Add hover effects for close button
CloseButton.MouseEnter:Connect(function()
    game:GetService("TweenService"):Create(CloseButton, TweenInfo.new(0.2), {
        TextColor3 = Color3.fromRGB(255, 100, 100)
    }):Play()
end)

CloseButton.MouseLeave:Connect(function()
    game:GetService("TweenService"):Create(CloseButton, TweenInfo.new(0.2), {
        TextColor3 = Color3.fromRGB(255, 255, 255)
    }):Play()
end)

-- Add shadow
local Shadow = Instance.new("ImageLabel")
Shadow.Name = "Shadow"
Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
Shadow.BackgroundTransparency = 1
Shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
Shadow.Size = UDim2.new(1, 10, 1, 10)
Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
Shadow.ImageTransparency = 0.5
Shadow.Image = "rbxassetid://7912134082"
Shadow.Parent = MinimizeButton
Shadow.ZIndex = MinimizeButton.ZIndex - 1
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/Main.lua"))()
-- Create window with proper callbacks
local Window = Fluent:CreateWindow({
    Title = "Hero Event",
    SubTitle = "By Duckie",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl,
    OnDestroy = function()
        local fadeOut = game:GetService("TweenService"):Create(MinimizeGui, TweenInfo.new(0.5), {
            Transparency = 1
        })
        fadeOut:Play()
        fadeOut.Completed:Connect(function()
            MinimizeGui:Destroy()
        end)
    end
})

local Tabs = {
    Event = Window:AddTab({ Title = "Hero", Icon = "flame" })

}

-- Initialize state
local isMinimized = false
Window:Minimize(false)

-- Regular minimize/maximize functionality
MinimizeButton.MouseButton1Click:Connect(function()
    isMinimized = not isMinimized
    Window:Minimize(isMinimized)

    local textTween = game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
        TextTransparency = 1
    })
    
    textTween:Play()
    textTween.Completed:Connect(function()
        MinimizeButton.Text = isMinimized and "Open" or "Close"
        game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
            TextTransparency = 0
        }):Play()
    end)
end)

-- Close button functionality 
CloseButton.MouseButton1Click:Connect(function()
    MinimizeGui:Destroy()
    Window:Destroy()
end)


local PlaytimeSection = Tabs.Event:AddSection("Playtime Pass")

local AutoPlaytimeToggle = PlaytimeSection:AddToggle("AutoPlaytime", {
    Title = "Auto Claim Playtime Pass",
    Default = false
})

AutoPlaytimeToggle:OnChanged(function()
    if AutoPlaytimeToggle.Value then
        -- Claim rewards immediately when enabled
        for i = 1, 12 do
            local args = {
                [1] = "Free",
                [2] = i
            }
            game:GetService("ReplicatedStorage").Packages.Knit.Services.EventPassService.RF.ClaimReward:InvokeServer(unpack(args))
        end
        
        -- Start reset/claim loop
        spawn(function()
            while AutoPlaytimeToggle.Value do
                wait(60) -- Wait before reset
                
                -- Reset pass
                game:GetService("ReplicatedStorage").Packages.Knit.Services.EventPassService.RF.Reset:InvokeServer()
                
                -- Claim all rewards after reset
                for i = 1, 12 do
                    local args = {
                        [1] = "Free",
                        [2] = i
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.EventPassService.RF.ClaimReward:InvokeServer(unpack(args))
                end
            end
        end)
    end
end)

local function GetCurrentZone()
    local player = game.Players.LocalPlayer

    if player:GetAttribute("ZoneHeroCity") then
        return "HeroCity"
    end

    return nil
end

local function GetBestPrisonBag()
    local player = game.Players.LocalPlayer
    local currentZone = GetCurrentZone()
    local zoneAttributes = {
        HeroCity = "TotalSuperKnuckles"
    }
    
    local prisonKnuckle = player:GetAttribute(zoneAttributes[currentZone]) or 0
    local punchBagData = require(game:GetService("ReplicatedStorage").Data.PunchBags)
    
    if player:GetAttribute("VIP") == true then
        return "VIP"
    end
    
    local bestTier = "Tier1"  
    local highestRequired = 0
    
    if punchBagData and punchBagData[currentZone] then
        for tier, data in pairs(punchBagData[currentZone]) do
            if data.StrengthRequired and 
               prisonKnuckle >= data.StrengthRequired and 
               data.StrengthRequired > highestRequired then
                bestTier = tier
                highestRequired = data.StrengthRequired
            end
        end
    end
    
    return bestTier
end

local function GetBestPrisonEquipment()
    local player = game.Players.LocalPlayer
    local currentZone = GetCurrentZone()
    local zoneAttributes = {
        HeroCity = "TotalSuperPower",
    }
    
    local prisonBicep = player:GetAttribute(zoneAttributes[currentZone]) or 0
    local dumbbellData = require(game:GetService("ReplicatedStorage").Data.Dumbells)
    local defaultDumbbells = {
        HeroCity = "HeroCity1"
    }
    
    local bestDumbell = defaultDumbbells[currentZone]
    local highestRequired = 0
    
    if dumbbellData and dumbbellData[currentZone] then
        for name, data in pairs(dumbbellData[currentZone]) do
            if data.StrengthRequired and 
               prisonBicep >= data.StrengthRequired and 
               data.StrengthRequired > highestRequired then
                bestDumbell = name
                highestRequired = data.StrengthRequired
            end
        end
    end

    return bestDumbell
end


-- Add Training Section
local TrainSection = Tabs.Event:AddSection("Auto Train")

local TrainingDropdown = Tabs.Event:AddDropdown("TrainingSelect", {
    Title = "Select Training Type",
    Values = {"Dumbells", "PunchBags"}, 
    Multi = false,
    Default = "Dumbells"
})

local AutoTrainToggle = Tabs.Event:AddToggle("AutoTrain", {
    Title = "Auto Train",
    Default = false
})

AutoTrainToggle:OnChanged(function()
    if AutoTrainToggle.Value then
        spawn(function()
            if TrainingDropdown.Value == "Dumbells" then
                -- Function to equip Dumbells
                local function equipDumbells()
                    local currentZone = GetCurrentZone()
                    local equipment = GetBestPrisonEquipment()
                    local args = {
                        [1] = currentZone,
                        [2] = "Dumbells", 
                        [3] = equipment
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onGuiEquipRequest:FireServer(unpack(args))
                end

                -- Equip immediately
                equipDumbells()

                -- Click loop (every 0.2 seconds)
                spawn(function()
                    while AutoTrainToggle.Value do
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onClick:FireServer()
                        wait(0.2)
                    end
                end)

                -- Re-equip loop (every 5 seconds)
                while AutoTrainToggle.Value do
                    wait(5) -- Wait 5 seconds before re-equipping
                    if AutoTrainToggle.Value then
                        equipDumbells()
                    end
                end

            else -- PunchBags
                spawn(function() 
                    while AutoTrainToggle.Value do
                        local currentZone = GetCurrentZone()
                        local tier = GetBestPrisonBag()
                        local bag = workspace.Zones[currentZone].Interactables.Training.PunchBags[tier]
                        
                        if bag then
                            local bagCFrame = bag:GetPivot()
                            game.Players.LocalPlayer.Character:PivotTo(bagCFrame * CFrame.new(0, 0, -5))
                            
                            local args = {
                                [1] = currentZone,
                                [2] = tier,
                                [3] = game.Players.LocalPlayer:GetAttribute("VIP") == true
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.PunchBagService.RE.onGiveStats:FireServer(unpack(args))
                        end
                        wait(0.25)
                    end
                end)
            end
        end)
    end
end)





-- Auto Fight Section
local FightSection = Tabs.Event:AddSection("Auto Fight")

local npcLocations = {
    HeroCity = workspace.GameObjects.ArmWrestling.HeroCity.NPC
}

local modelNames = {}
local models = {}
local npcZones = {} -- Store which zone each NPC belongs to

-- Gather NPCs from all locations
for zone, path in pairs(npcLocations) do
    for _, npc in pairs(path:GetChildren()) do
        if npc:IsA("Model") then
            table.insert(models, npc)
            table.insert(modelNames, npc.Name)
            npcZones[npc.Name] = zone
        end
    end
end

table.sort(modelNames)

local modelDropdown = Tabs.Event:AddDropdown("ModelDropdown", {
    Title = "Select Boss",
    Values = modelNames,
    Multi = false,
    Default = modelNames[1]
})

local AutoFightToggle = Tabs.Event:AddToggle("AutoFight", {
    Title = "Auto Fight",
    Default = false
})

AutoFightToggle:OnChanged(function()
    if AutoFightToggle.Value then
        spawn(function()
            while AutoFightToggle.Value do
                local selectedNPC = modelDropdown.Value
                if selectedNPC then
                    local zone = npcZones[selectedNPC]
                    local npcPath = npcLocations[zone]
                    
                    if npcPath then
                        local npcModel = npcPath:FindFirstChild(selectedNPC)
                        if npcModel and npcModel:FindFirstChild("Table") then
                            local args = {
                                [1] = selectedNPC,
                                [2] = npcModel.Table,
                                [3] = zone
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onEnterNPCTable:FireServer(unpack(args))
                        end
                    end
                end
                wait(1)
            end
        end)
    end
end)

local AutoClickToggle = Tabs.Event:AddToggle("AutoClick", {
    Title = "Auto Click", 
    Default = false 
})

AutoClickToggle:OnChanged(function()
    if AutoClickToggle.Value then
        spawn(function()
            while true do
                if not AutoClickToggle.Value then break end
                game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onClickRequest:FireServer()
                wait(0.1)
            end
        end)
    end
end)

local NPCSection = Tabs.Event:AddSection("Auto Fight Npcs")

-- Create a dropdown with hero/villain names in alphabetical order
local selectedNPC = "Dreadlord" -- Default selection
local NPCDropdown = NPCSection:AddDropdown("NPCSelection", {
    Title = "Select NPC",
    Description = "Select an NPC to auto fight",
    Values = {
        "Dreadlord",
        "Inferno",
        "Phantom",
        "Radiance",
        "Skullbane",
        "Spectron",
        "Vortex"
    },
    Default = 1, -- DreadLord is first in alphabetical order
})

NPCDropdown:OnChanged(function(Value)
    selectedNPC = Value
end)

-- Add input for wait time
local waitTime = 1.75 -- Default wait time
local WaitTimeInput = NPCSection:AddInput("WaitTimeInput", {
    Title = "Fight Interval",
    Description = "Time between fighting the NPC (seconds)",
    Default = "1.75",
    Placeholder = "Enter time in seconds...",
    Numeric = true,
    Finished = false
})

WaitTimeInput:OnChanged(function(Value)
    local num = tonumber(Value)
    if num and num > 0 then
        waitTime = num
    else
        -- Reset to default if invalid input
        WaitTimeInput:SetValue("1.75")
        waitTime = 1.75
    end
end)

-- Toggle for proximity prompt modification and auto-trigger
local AutoBeatNPCToggle = NPCSection:AddToggle("ModifyProximity", {
    Title = "Auto Fight NPC",
    Description = "Automatically fight the selected NPC",
    Default = false
})

-- Function to get the correct proximity prompt path based on NPC selection
local function getProximityPromptPath()
    local evilLairNPCs = {
        ["Dreadlord"] = true,
        ["Skullbane"] = true,
        ["Spectron"] = true,
        ["Vortex"] = true
    }
    
    if evilLairNPCs[selectedNPC] then
        return workspace.GameObjects.RngNPCs["EvilLair-" .. selectedNPC].Npc:GetChildren()[4].Table.Proximity.Attachment.ProximityPrompt
    else
        -- For Phantom, Radiance, and Inferno
        return workspace.GameObjects.RngNPCs["SuperheroCity-" .. selectedNPC].Npc[selectedNPC].Table.Proximity.Attachment.ProximityPrompt
    end
end

-- Monitor, modify, and trigger the proximity prompt
AutoBeatNPCToggle:OnChanged(function()
    spawn(function()
        while AutoBeatNPCToggle.Value do
            pcall(function()
                local prompt = getProximityPromptPath()
                if prompt then
                    -- Modify the prompt
                    prompt.HoldDuration = 0
                    prompt.MaxActivationDistance = 1000
                    
                    -- Trigger the prompt
                    fireproximityprompt(prompt)
                end
            end)
            wait(waitTime) -- This now correctly uses the user's input value
        end
        
        -- Reset prompt when toggle is turned off
        pcall(function()
            local prompt = getProximityPromptPath()
            if prompt then
                prompt.HoldDuration = 0.25
                prompt.MaxActivationDistance = 6
            end
        end)
    end)
end)


-- Eggs Section
local EggSection = Tabs.Event:AddSection("Eggs")

-- Hatch Amount Dropdown
local HatchAmountDropdown = Tabs.Event:AddDropdown("HatchAmount", {
    Title = "Hatch Amount",
    Values = {"1x", "3x", "8x", "30x", "Max"},
    Multi = false,
    Default = "1x"
})

-- Egg Selection Dropdown (Populated Dynamically)
local eggNames = getEggNames()
local EggDropdown = Tabs.Event:AddDropdown("EggSelect", {
    Title = "Select Egg",
    Values = eggNames,
    Multi = false,
    Default = eggNames[1] or "None"
})

-- Auto Hatch Toggle
local AutoHatchToggle = Tabs.Event:AddToggle("AutoHatch", {
    Title = "Auto Hatch",
    Default = false
})

AutoHatchToggle:OnChanged(function()
    if AutoHatchToggle.Value then
        spawn(function()
            while true do
                if not AutoHatchToggle.Value then break end

                local args = {}
                local selectedEgg = EggDropdown.Value
                local hatchMultiplier = HatchAmountDropdown.Value

                if hatchMultiplier == "1x" then
                    args = {selectedEgg, nil, nil, false, nil}
                elseif hatchMultiplier == "3x" then
                    args = {selectedEgg, nil, true, false}
                elseif hatchMultiplier == "8x" then
                    args = {selectedEgg, nil, false, true, true}
                elseif hatchMultiplier == "30x" then
                    args = {selectedEgg, nil, nil, false, nil, true}
                elseif hatchMultiplier == "Max" then
                    args = {selectedEgg, nil, nil, false, nil, true}
                end

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
                wait(0.001)
            end
        end)
    end
end)

localClickChestSection = Tabs.Event:AddSection("Giga Hero chest")

local AutoClickToggle = Tabs.Event:AddToggle("AutoClickToggle", {
    Title = "Auto Click Giga Hero Chest",
    Default = false
})

-- Auto-click functionality
AutoClickToggle:OnChanged(function()
    if AutoClickToggle.Value then
        -- Set click detector max distance to very high value
        local clickDetector = workspace.GameObjects.GigaChest.HeroChest.Chest.ClickDetector
        if clickDetector then
            clickDetector.MaxActivationDistance = 10200393949349
        end
        
        -- Start auto-clicking
        spawn(function()
            while true do
                if not AutoClickToggle.Value then break end
                
                -- Click the detector
                local clickDetector = workspace.GameObjects.GigaChest.HeroChest.Chest.ClickDetector
                if clickDetector then
                    fireclickdetector(clickDetector)
                end
                
                wait(0.1) -- Wait 0.1 seconds before next click
            end
        end)
    end
end)

local AutoUpgradeSection = Tabs.Event:AddSection("Auto Upgrade")

-- Power Multiplier Toggle
local PowerMultiplierToggle = AutoUpgradeSection:AddToggle("PowerMultiplier", {
    Title = "Power Multiplier",
    Description = "Auto upgrade Super Power Multiplier",
    Default = false
})

PowerMultiplierToggle:OnChanged(function()
    if PowerMultiplierToggle.Value then
        spawn(function()
            while PowerMultiplierToggle.Value do
                -- Buy 3 times with 1 second delay
                for i = 1, 3 do
                    local args = {
                        [1] = "Super Power Multiplier"
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.HeroUpgradeService.RF.BuyUpgrade:InvokeServer(unpack(args))
                    wait(1)
                end
                
                -- Wait 10 seconds before repeating
                wait(30)
            end
        end)
    end
end)

-- Knuckles Multiplier Toggle
local KnucklesMultiplierToggle = AutoUpgradeSection:AddToggle("KnucklesMultiplier", {
    Title = "Knuckles Multiplier",
    Description = "Auto upgrade Super Knuckles Multiplier",
    Default = false
})

KnucklesMultiplierToggle:OnChanged(function()
    if KnucklesMultiplierToggle.Value then
        spawn(function()
            while KnucklesMultiplierToggle.Value do
                -- Buy 3 times with 1 second delay
                for i = 1, 3 do
                    local args = {
                        [1] = "Super Knuckles Multiplier"
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.HeroUpgradeService.RF.BuyUpgrade:InvokeServer(unpack(args))
                    wait(1)
                end
                
                -- Wait 10 seconds before repeating
                wait(30)
            end
        end)
    end
end)

-- Coins Multiplier Toggle
local CoinsMultiplierToggle = AutoUpgradeSection:AddToggle("CoinsMultiplier", {
    Title = "Coins Multiplier",
    Description = "Auto upgrade Super Coin Multiplier",
    Default = false
})

CoinsMultiplierToggle:OnChanged(function()
    if CoinsMultiplierToggle.Value then
        spawn(function()
            while CoinsMultiplierToggle.Value do
                -- Buy 3 times with 1 second delay
                for i = 1, 3 do
                    local args = {
                        [1] = "Super Coin Multiplier"
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.HeroUpgradeService.RF.BuyUpgrade:InvokeServer(unpack(args))
                    wait(1)
                end
                
                -- Wait 10 seconds before repeating
                wait(30)
            end
        end)
    end
end)

-- Gem Chance Toggle
local GemChanceToggle = AutoUpgradeSection:AddToggle("GemChance", {
    Title = "Gem Chance",
    Description = "Auto upgrade Gem Chance Multiplier",
    Default = false
})

GemChanceToggle:OnChanged(function()
    if GemChanceToggle.Value then
        spawn(function()
            while GemChanceToggle.Value do
                -- Buy 3 times with 1 second delay
                for i = 1, 3 do
                    local args = {
                        [1] = "Gem Chance Multiplier"
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.HeroUpgradeService.RF.BuyUpgrade:InvokeServer(unpack(args))
                    wait(1)
                end
                
                -- Wait 10 seconds before repeating
                wait(30)
            end
        end)
    end
end)

local MerchantSection = Tabs.Event:AddSection("Merchant")

local BlackMarketDropdown = Tabs.Event:AddDropdown("BlackMarketDropdown", {
    Title = "Select Merchant Slot(s)",
    Values = {1, 2, 3, 4, 5},
    Multi = true,
    Default = {}
})

local AutoBuyToggle = Tabs.Event:AddToggle("AutoBuyToggle", {
    Title = "Auto Buy (Selected Slots)",
    Default = false
})

AutoBuyToggle:OnChanged(function()
    if AutoBuyToggle.Value then
        spawn(function()
            while true do
                if not AutoBuyToggle.Value then break end
                -- Buy 3 times
                for i = 1, 3 do
                    for number, isSelected in pairs(BlackMarketDropdown.Value) do
                        if isSelected then
                            local args = {
                                [1] = "Evil Merchant",
                                [2] = number
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.LimitedMerchantService.RF.BuyItem:InvokeServer(unpack(args))
                            wait(1)
                        end
                    end
                end
                wait(30) -- Wait 30 seconds before next cycle
            end
        end)
    end
end)


local HeroSpeedrunSection = Tabs.Event:AddSection("Hero Speedrun")

-- Toggle state tracking
local wasAutoFightOn = false
local wasAutoBeatNPCOn = false
local wasAutoTrainOn = false

-- Add Status Label for cooldown
local HeroSpeedrunStatus = HeroSpeedrunSection:AddParagraph({
    Title = "Hero Speedrun Cooldown",
    Content = "Loading..."
})

-- Update status every second
spawn(function()
    while true do
        local success, timerGui = pcall(function()
            return workspace.GameObjects.Minigames.SpeedrunMinigames.HeroSpeedrun.Visual.BillboardGui.Timer
        end)
        
        if success and timerGui then
            HeroSpeedrunStatus:SetDesc(timerGui.Text)
        else
            HeroSpeedrunStatus:SetDesc("Waiting for timer...")
        end
        wait(1)
    end
end)

local AutoHeroSpeedrunToggle = HeroSpeedrunSection:AddToggle("AutoHeroSpeedrun", {
    Title = "Auto Hero Speedrun",
    Description = "Auto join the Hero Speedrun. It will temporarily turn off the toggles for Auto Fight, Auto Beat NPC, and Auto Train if you had them enabled. It will return them to their previous state after the speedrun.",
    Default = false
})

AutoHeroSpeedrunToggle:OnChanged(function()
    if AutoHeroSpeedrunToggle.Value then
        spawn(function()
            while AutoHeroSpeedrunToggle.Value do
                local success, timerGui = pcall(function()
                    return workspace.GameObjects.Minigames.SpeedrunMinigames.HeroSpeedrun.Visual.BillboardGui.Timer
                end)
                
                if success and timerGui then
                    if timerGui.Text == "Touch to play!" then
                        -- Store toggle states if they haven't been stored yet
                        if not wasAutoFightOn and not wasAutoBeatNPCOn and not wasAutoTrainOn then
                            wasAutoFightOn = AutoFightToggle and AutoFightToggle.Value or false
                            wasAutoBeatNPCOn = AutoBeatNPCToggle and AutoBeatNPCToggle.Value or false 
                            wasAutoTrainOn = AutoTrainToggle and AutoTrainToggle.Value or false
                        end

                        -- Disable toggles with retry
                        local function disableToggle(toggle)
                            if toggle and toggle.Value then
                                for i = 1, 3 do
                                    toggle:SetValue(false)
                                    wait(1)
                                    if not toggle.Value then break end
                                end
                            end
                        end

                        disableToggle(AutoFightToggle)
                        disableToggle(AutoBeatNPCToggle)
                        disableToggle(AutoTrainToggle)

                        wait(3) -- Wait before joining the speedrun

                        -- Join speedrun
                        local args = {
                            [1] = "HeroSpeedrun"
                        }
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.SpeedrunMinigameService.RF.EnterSpeedrun:InvokeServer(unpack(args))
                        
                        -- Teleport to the ending
                        local player = game:GetService("Players").LocalPlayer
                        local character = player.Character or player.CharacterAdded:Wait()
                        local hrp = character:WaitForChild("HumanoidRootPart")
                        
                        local ending = workspace.GameObjects.Minigames.SpeedrunMinigames.HeroSpeedrun.Ending
                        if ending then
                            hrp.CFrame = ending.CFrame
                        end
                        
                        wait(5) -- Wait after completion before re-enabling toggles
                    else
                        -- Restore toggles only if the timer is not "Ready!" and we previously saved states
                        if wasAutoFightOn or wasAutoBeatNPCOn or wasAutoTrainOn then
                            local function enableToggle(toggle, state)
                                if state and toggle and not toggle.Value then
                                    for i = 1, 3 do
                                        toggle:SetValue(true)
                                        wait(0.1)
                                        if toggle.Value then break end
                                    end
                                end
                            end
                            
                            wait(3) -- Wait before re-enabling toggles
                            
                            enableToggle(AutoFightToggle, wasAutoFightOn)
                            enableToggle(AutoBeatNPCToggle, wasAutoBeatNPCOn)
                            enableToggle(AutoTrainToggle, wasAutoTrainOn)

                            -- Reset stored states after restoring
                            wasAutoFightOn = false
                            wasAutoBeatNPCOn = false
                            wasAutoTrainOn = false
                        end
                    end
                end
                wait(1)
            end
        end)
    end
end)


local TowerSection = Tabs.Event:AddSection("Towers")

-- Prison Cave Buttons
TowerSection:AddButton({
    Title = "Use Villain Hideout Key (1x)",
    Description = "Use the Villain Hideout Key once.",
    Callback = function()
        local args = {
            [1] = "VillainHideout",
            [2] = false
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
    end
})

TowerSection:AddButton({
    Title = "Use All Villain Hideout Keys (250x)",
    Description = "Use All Villain Hideout Keys (max 250 at a time).",
    Callback = function()
        local args = {
            [1] = "VillainHideout",
            [2] = true
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
    end
})


