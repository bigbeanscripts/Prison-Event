-- Easter Event

-- Function to get all valid egg names in alphabetical order, excluding "Egg Rewind"
local function getEggNames()
    local eggNames = {}
    local zones = workspace:FindFirstChild("Zones")

    if zones then
        for _, zone in pairs(zones:GetChildren()) do
            if zone:IsA("Folder") and not zone.Name:match("%d") then -- Ignore zones with numbers
                local interactables = zone:FindFirstChild("Interactables")
                if interactables then
                    local eggs = interactables:FindFirstChild("Eggs")
                    if eggs then
                        for _, egg in pairs(eggs:GetChildren()) do
                            if egg.Name ~= "Rewind" then
                                table.insert(eggNames, egg.Name)
                            end
                        end
                    end
                end
            end
        end
    end

    table.sort(eggNames) -- Sort alphabetically
    return eggNames
end


game:GetService("ReplicatedStorage").Packages.Knit.Services.WrestleService.RF.OnAutoFight:InvokeServer()


local Library = loadstring(game:HttpGetAsync("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau"))()
local SaveManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/SaveManager.luau"))()
local InterfaceManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/InterfaceManager.luau"))()


local Window = Library:Window{
    Title = "AWS Rewind Event",
    SubTitle = "By Duckie",
    TabWidth = 160,
    Size =  UDim2.fromOffset(580, 460),
    Resize = false, 
    Acrylic = true,
    Theme = "Vynixu",
    MinimizeKey = Enum.KeyCode.LeftShift
}
 Tabs = {
    Event = Window:AddTab({ Title = "Main", Icon = "clock" }),
    Wrestlers = Window:AddTab({ Title = "Wrestlers", Icon = "biceps-flexed" }),
    Claim = Window:AddTab({ Title = "Quest", Icon = "gift" })
}





local function GetCurrentZone()
    local player = game.Players.LocalPlayer

    -- Check if the player has the 'ZoneEasterEvent' attribute
    if player:GetAttribute("ZoneRewindEvent") then
        return "RewindEvent"
    end

    -- Return nil if the attribute isn't found
    return nil
end

local function GetBestPrisonBag()
    local player = game.Players.LocalPlayer
    local currentZone = GetCurrentZone()
    
    local rewindKnuckle = player:GetAttribute("TotalRewindKnucklesV2") or 0
    local punchBagData = require(game:GetService("ReplicatedStorage").Data.PunchBags)
    
    if player:GetAttribute("VIP") == true then
        return "VIP"
    end
    
    local bestTier = "Tier1"  
    local highestRequired = 0
    
    if punchBagData and punchBagData[currentZone] then
        for tier, data in pairs(punchBagData[currentZone]) do
            if data.StrengthRequired and 
               rewindKnuckle >= data.StrengthRequired and 
               data.StrengthRequired > highestRequired then
                bestTier = tier
                highestRequired = data.StrengthRequired
            end
        end
    end
    
    return bestTier
end

local function GetBestPrisonEquipment(equipmentType)
    local player = game.Players.LocalPlayer
    local currentZone = GetCurrentZone()
    
    -- Determine which attribute and data to use based on equipment type
    local attributeName, dataModule, defaultEquipment
    
    if equipmentType == "Dumbells" then
        attributeName = "TotalRewindBicepV2"
        dataModule = "Dumbells"
        defaultEquipment = "Rewind1"
    elseif equipmentType == "Grips" then
        attributeName = "TotalRewindGripV2"
        dataModule = "Grips"
        defaultEquipment = "RewindEvent1"
    else
        -- Default to Dumbells if unknown type
        attributeName = "TotalRewindStrengthV2"
        dataModule = "Dumbells"
        defaultEquipment = "RewindEvent1"
    end
    
    local statValue = player:GetAttribute(attributeName) or 0
    local equipmentData = require(game:GetService("ReplicatedStorage").Data[dataModule])
    
    local bestEquipment = defaultEquipment
    local highestRequired = 0
    
    if equipmentData and equipmentData[currentZone] then
        for name, data in pairs(equipmentData[currentZone]) do
            if data.StrengthRequired and 
               statValue >= data.StrengthRequired and 
               data.StrengthRequired > highestRequired then
                bestEquipment = name
                highestRequired = data.StrengthRequired
            end
        end
    end

    return bestEquipment
end

-- Make sure Tabs is defined before using it
local Tabs = Tabs or {}  -- Use existing Tabs or create a new table if it doesn't exist

-- Add Training Section
local TrainSection = Tabs.Event:AddSection("Auto Train")

local TrainingDropdown = Tabs.Event:AddDropdown("TrainingSelect", {
    Title = "Select Training Type",
    Values = {"Dumbells", "PunchBags", "Grips"}, 
    Multi = false,
    Default = "Dumbells"
})

local AutoTrainToggle = Tabs.Event:AddToggle("AutoTrain", {
    Title = "Auto Train",
    Default = false
})

AutoTrainToggle:OnChanged(function()
    if AutoTrainToggle.Value then
        spawn(function()
            local currentZone = GetCurrentZone()
            
            if TrainingDropdown.Value == "Dumbells" then
                -- Function to equip Dumbells
                local function equipDumbells()
                    local equipment = GetBestPrisonEquipment("Dumbells")
                    local args = {
                        [1] = currentZone,
                        [2] = "Dumbells", 
                        [3] = equipment
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onGuiEquipRequest:FireServer(unpack(args))
                end

                -- Equip immediately
                equipDumbells()

                -- Click loop (every 0.2 seconds)
                spawn(function()
                    while AutoTrainToggle.Value do
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onClick:FireServer()
                        wait(0.2)
                    end
                end)

                -- Re-equip loop (every 5 seconds)
                while AutoTrainToggle.Value do
                    wait(5) -- Wait 5 seconds before re-equipping
                    if AutoTrainToggle.Value then
                        equipDumbells()
                    end
                end
                
            elseif TrainingDropdown.Value == "Grips" then
                -- Function to equip Grips
                local function equipGrips()
                    local equipment = GetBestPrisonEquipment("Grips")
                    local args = {
                        [1] = currentZone,
                        [2] = "Grips", 
                        [3] = equipment
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onGuiEquipRequest:FireServer(unpack(args))
                end

                -- Equip immediately
                equipGrips()

                -- Click loop (every 0.2 seconds)
                spawn(function()
                    while AutoTrainToggle.Value do
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onClick:FireServer()
                        wait(0.2)
                    end
                end)

                -- Re-equip loop (every 5 seconds)
                while AutoTrainToggle.Value do
                    wait(5) -- Wait 5 seconds before re-equipping
                    if AutoTrainToggle.Value then
                        equipGrips()
                    end
                end

            else -- PunchBags
                spawn(function() 
                    while AutoTrainToggle.Value do
                        local tier = GetBestPrisonBag()
                        local bag = workspace.Zones[currentZone].Interactables.Training.PunchBags[tier]
                        
                        if bag then
                            local bagCFrame = bag:GetPivot()
                            game.Players.LocalPlayer.Character:PivotTo(bagCFrame * CFrame.new(0, 0, -5))
                            
                            local args = {
                                [1] = currentZone,
                                [2] = tier,
                                [3] = game.Players.LocalPlayer:GetAttribute("VIP") == true
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.PunchBagService.RE.onGiveStats:FireServer(unpack(args))
                        end
                        wait(0.25)
                    end
                end)
            end
        end)
    end
end)

-- Auto Fight Section
local FightSection = Tabs.Event:AddSection("Auto Fight")

local npcLocations = {
    RewindEvent = workspace.GameObjects.ArmWrestling.RewindEvent.NPC,
}

local modelNames = {}
local models = {}
local npcZones = {} -- Store which zone each NPC belongs to

-- Gather NPCs from all locations
for zone, path in pairs(npcLocations) do
    for _, npc in pairs(path:GetChildren()) do
        if npc:IsA("Model") then
            table.insert(models, npc)
            table.insert(modelNames, npc.Name)
            npcZones[npc.Name] = zone
        end
    end
end

table.sort(modelNames)

local modelDropdown = Tabs.Event:AddDropdown("ModelDropdown", {
    Title = "Select Boss",
    Values = modelNames,
    Multi = false,
    Default = modelNames[1]
})

local AutoFightToggle = Tabs.Event:AddToggle("AutoFight", {
    Title = "Auto Fight",
    Default = false
})

AutoFightToggle:OnChanged(function()
    if AutoFightToggle.Value then
        spawn(function()
            while AutoFightToggle.Value do
                local selectedNPC = modelDropdown.Value
                if selectedNPC then
                    local zone = npcZones[selectedNPC]
                    local npcPath = npcLocations[zone]
                    
                    if npcPath then
                        local npcModel = npcPath:FindFirstChild(selectedNPC)
                        if npcModel and npcModel:FindFirstChild("Table") then
                            local args = {
                                [1] = selectedNPC,
                                [2] = npcModel.Table,
                                [3] = zone
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onEnterNPCTable:FireServer(unpack(args))
                        end
                    end
                end
                wait(1)
            end
        end)
    end
end)

local AutoClickToggle = Tabs.Event:AddToggle("AutoClick", {
    Title = "Auto Click", 
    Default = false 
})

AutoClickToggle:OnChanged(function()
    if AutoClickToggle.Value then
        spawn(function()
            while true do
                if not AutoClickToggle.Value then break end
                game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onClickRequest:FireServer()
                wait(0.1)
            end
        end)
    end
end)




-- Eggs Section
local EggSection = Tabs.Event:AddSection("Eggs")

-- Hatch Amount Dropdown
local HatchAmountDropdown = Tabs.Event:AddDropdown("HatchAmount", {
    Title = "Hatch Amount",
    Values = {"1x", "3x", "8x", "30x", "Max"},
    Multi = false,
    Default = "1x"
})

-- Egg Selection Dropdown (Populated Dynamically)
local eggNames = getEggNames()
local EggDropdown = Tabs.Event:AddDropdown("EggSelect", {
    Title = "Select Egg",
    Values = eggNames,
    Multi = false,
    Default = eggNames[1] or "None"
})

-- Auto Hatch Toggle
local AutoHatchToggle = Tabs.Event:AddToggle("AutoHatch", {
    Title = "Auto Hatch",
    Default = false
})

AutoHatchToggle:OnChanged(function()
    if AutoHatchToggle.Value then
        spawn(function()
            while true do
                if not AutoHatchToggle.Value then break end

                local args = {}
                local selectedEgg = EggDropdown.Value
                local hatchMultiplier = HatchAmountDropdown.Value

                if hatchMultiplier == "1x" then
                    args = {selectedEgg, nil, nil, false, nil}
                elseif hatchMultiplier == "3x" then
                    args = {selectedEgg, nil, true, false}
                elseif hatchMultiplier == "8x" then
                    args = {selectedEgg, nil, false, true, true}
                elseif hatchMultiplier == "30x" then
                    args = {selectedEgg, nil, nil, false, nil, true}
                elseif hatchMultiplier == "Max" then
                    args = {selectedEgg, nil, nil, false, nil, true}
                end

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
                wait(0.001)
            end
        end)
    end
end)





local MerchantSection = Tabs.Event:AddSection("Rewind Shop")

local BlackMarketDropdown = Tabs.Event:AddDropdown("BlackMarketDropdown", {
    Title = "Select Shop Slot(s)",
    Values = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
    Multi = true,
    Default = {}
})

local AutoBuyToggle = Tabs.Event:AddToggle("AutoBuyToggle", {
    Title = "Auto Buy (Selected Slots)",
    Default = false
})

AutoBuyToggle:OnChanged(function()
    if AutoBuyToggle.Value then
        spawn(function()
            while true do
                if not AutoBuyToggle.Value then break end
                -- Buy 3 times
                for i = 1, 3 do
                    for number, isSelected in pairs(BlackMarketDropdown.Value) do
                        if isSelected then
                            local args = {
                                [1] = "RewindShop",
                                [2] = number
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.LimitedMerchantService.RF.BuyItem:InvokeServer(unpack(args))
                            wait(1)
                        end
                    end
                end
                wait(30) -- Wait 30 seconds before next cycle
            end
        end)
    end
end)




local MerchantSection = Tabs.Event:AddSection("Hidden Merchant")

local BlackMarketDropdown = Tabs.Event:AddDropdown("BlackMarketDropdown", {
    Title = "Select Merchant Slot(s)",
    Values = {1, 2, 3, 4, 5},
    Multi = true,
    Default = {}
})

local AutoBuyToggle = Tabs.Event:AddToggle("AutoBuyToggle", {
    Title = "Auto Buy (Selected Slots)",
    Default = false
})

AutoBuyToggle:OnChanged(function()
    if AutoBuyToggle.Value then
        spawn(function()
            while true do
                if not AutoBuyToggle.Value then break end
                -- Buy 3 times
                for i = 1, 3 do
                    for number, isSelected in pairs(BlackMarketDropdown.Value) do
                        if isSelected then
                            local args = {
                                [1] = "Hidden Merchant",
                                [2] = number
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.LimitedMerchantService.RF.BuyItem:InvokeServer(unpack(args))
                            wait(1)
                        end
                    end
                end
                wait(30) -- Wait 30 seconds before next cycle
            end
        end)
    end
end)




-- WRESTLERS TAB IMPLEMENTATION

-- Section 1: Hire Wrestlers
local HireWrestlersSection = Tabs.Wrestlers:AddSection("Hire Wrestlers")

-- Dropdown for Wrestlers to Buy (1-6)
local WrestlerBuyDropdown = HireWrestlersSection:AddDropdown("WrestlerBuyDropdown", {
    Title = "Wrestlers to Buy",
    Values = {1, 2, 3, 4, 5, 6},
    Multi = true,
    Default = {1}
})

-- Toggle for Auto Buy Wrestler
local BuyWrestlerToggle = HireWrestlersSection:AddToggle("BuyWrestlerToggle", {
    Title = "Auto Buy Wrestlers",
    Description = "Auto buys the selected wrestlers",
    Default = false
})

BuyWrestlerToggle:OnChanged(function()
    if BuyWrestlerToggle.Value then
        spawn(function()
            while true do
                if not BuyWrestlerToggle.Value then break end
                
                -- Loop through all selected wrestlers
                for wrestlerNum, isSelected in pairs(WrestlerBuyDropdown.Value) do
                    if isSelected then
                        local args = {
                            [1] = "Rewind" .. wrestlerNum
                        }
                        
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.PersonalWrestleService.RF.BuyPersonalWrestler:InvokeServer(unpack(args))
                        wait(1) -- Small wait between purchases to prevent throttling
                    end
                end
                
                wait(30) -- Wait 30 seconds before next purchase cycle
            end
        end)
    end
end)

-- Section 2: Upgrade Wrestlers
local UpgradeWrestlersSection = Tabs.Wrestlers:AddSection("Upgrade Wrestlers")

-- Dropdown for Wrestlers to Upgrade (1-6)
local WrestlerUpgradeDropdown = UpgradeWrestlersSection:AddDropdown("WrestlerUpgradeDropdown", {
    Title = "Select Wrestlers for Upgrades",
    Values = {1, 2, 3, 4, 5, 6},
    Multi = true,
    Default = {}
})

-- Dropdown for Upgrade Types
local UpgradeTypeDropdown = UpgradeWrestlersSection:AddDropdown("UpgradeTypeDropdown", {
    Title = "Upgrade Types",
    Values = {"Item Luck", "Wrestling Speed", "Cash Upgrade", "Item Storage"},
    Multi = true,
    Default = {}
})

-- Toggle for Auto Upgrade Wrestlers
local UpgradeWrestlerToggle = UpgradeWrestlersSection:AddToggle("UpgradeWrestlerToggle", {
    Title = "Auto Upgrade Wrestlers",
    Description = "Automatically upgrades selected wrestlers with selected upgrades",
    Default = false
})

UpgradeWrestlerToggle:OnChanged(function()
    if UpgradeWrestlerToggle.Value then
        spawn(function()
            while true do
                if not UpgradeWrestlerToggle.Value then break end
                
                -- Buy upgrades 5 times every 30 seconds
                for cycle = 1, 5 do
                    -- Loop through selected wrestlers
                    for wrestlerNum, isSelected in pairs(WrestlerUpgradeDropdown.Value) do
                        if isSelected then
                            local wrestlerId = "Rewind" .. wrestlerNum
                            
                            -- Loop through selected upgrade types
                            for upgradeType, isTypeSelected in pairs(UpgradeTypeDropdown.Value) do
                                if isTypeSelected then
                                    local args = {
                                        [1] = wrestlerId,
                                        [2] = upgradeType
                                    }
                                    
                                    game:GetService("ReplicatedStorage").Packages.Knit.Services.PersonalWrestleService.RF.Upgrade:InvokeServer(unpack(args))
                                    wait(0.5) -- Small wait between upgrades
                                end
                            end
                        end
                    end
                    
                    wait(1) -- Wait between cycles
                end
                
                wait(30) -- Wait 30 seconds before next batch of upgrades
            end
        end)
    end
end)

-- Section 3: Claim Wrestler Loot
local ClaimWrestlerSection = Tabs.Wrestlers:AddSection("Claim Wrestler Loot")

-- Dropdown for Wrestlers to Claim (1-5)
local WrestlerClaimDropdown = ClaimWrestlerSection:AddDropdown("WrestlerClaimDropdown", {
    Title = "Select Wrestlers to Claim",
    Values = {1, 2, 3, 4, 5, 6},
    Multi = true,
    Default = {}
})

-- Toggle for Auto Claim Wrestler
local ClaimWrestlerToggle = ClaimWrestlerSection:AddToggle("ClaimWrestlerToggle", {
    Title = "Auto Claim Rewards",
    Description = "Automatically claims rewards from selected wrestlers",
    Default = false
})

ClaimWrestlerToggle:OnChanged(function()
    if ClaimWrestlerToggle.Value then
        spawn(function()
            while true do
                if not ClaimWrestlerToggle.Value then break end
                
                -- Loop through all selected wrestlers
                for wrestlerNum, isSelected in pairs(WrestlerClaimDropdown.Value) do
                    if isSelected then
                        local args = {
                            [1] = "Rewind" .. wrestlerNum
                        }
                        
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.PersonalWrestleService.RF.Claim:InvokeServer(unpack(args))
                        wait(0.5) -- Small wait between claims to prevent throttling
                    end
                end
                
                wait(5) -- Wait 5 seconds before next claim cycle
            end
        end)
    end
end)


-- Add a section for Rewind Event Quest Claims in the Claim tab
local RewindQuestSection = Tabs.Claim:AddSection("Rewind Event Quests")

-- Create button for claiming all quest items
local ClaimAllRewindQuestsButton = RewindQuestSection:Button({
    Title = "Complete Rewind Event Quests",
    Description = "Automatically completes Bacon Hair and Lost Traveler quests",
    Callback = function()
        -- Get required services
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local Knit = require(ReplicatedStorage.Packages.Knit)
        
        -- STEP 1: Try to pick up Bacon Hair if available using proximity prompt
        pcall(function()
            print("Attempting to pick up BaconHair...")
            local baconHair = workspace.Zones.RewindEvent.Interactables.Quest.BaconHair
            if baconHair and baconHair:FindFirstChild("Part") and baconHair.Part:FindFirstChild("ProximityPrompt") then
                fireproximityprompt(baconHair.Part.ProximityPrompt)
                print("Successfully fired proximity prompt for BaconHair")
                wait(1)
            else
                print("BaconHair not found or already collected")
            end
        end)
        
        -- STEP 2: Try to deliver Bacon Hair if it was picked up
        pcall(function()
            print("Attempting to deliver BaconHair...")
            local baconHairDelivery = workspace.Zones.RewindEvent.Interactables.Quest.BaconPerson
            if baconHairDelivery and baconHairDelivery:FindFirstChild("HumanoidRootPart") and 
               baconHairDelivery.HumanoidRootPart:FindFirstChild("ProximityPrompt") then
                fireproximityprompt(baconHairDelivery.HumanoidRootPart.ProximityPrompt)
                print("Successfully fired proximity prompt for BaconHair delivery")
                wait(1)
            else
                print("BaconPerson not found or delivery not needed")
            end
        end)
        
        -- STEP 3: Lost Traveler items - find, pick up, and deliver one by one using proximity prompts
        pcall(function()
            local lostTravelerQuestItems = workspace.Zones.RewindEvent.Interactables.Quest.LostTraveler.Items.QuestItems:GetChildren()
            local lostTravelerNPC = workspace.Zones.RewindEvent.Interactables.Quest.LostTraveler
            
            -- Check if NPC exists for delivery
            local lostTravelerPrompt
            if lostTravelerNPC and lostTravelerNPC:FindFirstChild("HumanoidRootPart") and 
               lostTravelerNPC.HumanoidRootPart:FindFirstChild("ProximityPrompt") then
                lostTravelerPrompt = lostTravelerNPC.HumanoidRootPart.ProximityPrompt
            else
                print("Lost Traveler NPC not found for delivery")
                return
            end
            
            if #lostTravelerQuestItems > 0 then
                print("Found " .. #lostTravelerQuestItems .. " Lost Traveler items to pick up")
                
                for _, item in pairs(lostTravelerQuestItems) do
                    -- Find the proximity prompt in the item
                    local itemPrompt
                    if item:FindFirstChild("Part") and item.Part:FindFirstChild("ProximityPrompt") then
                        itemPrompt = item.Part.ProximityPrompt
                    else
                        for _, descendant in pairs(item:GetDescendants()) do
                            if descendant:IsA("ProximityPrompt") then
                                itemPrompt = descendant
                                break
                            end
                        end
                    end
                    
                    if itemPrompt then
                        -- Pick up the item
                        print("Picking up: " .. item.Name)
                        fireproximityprompt(itemPrompt)
                        wait(1)
                        
                        -- Deliver the item immediately
                        print("Delivering: " .. item.Name)
                        fireproximityprompt(lostTravelerPrompt)
                        wait(1)
                    else
                        print("Could not find proximity prompt for: " .. item.Name)
                    end
                end
                
                print("All Lost Traveler items processed")
            else
                print("No Lost Traveler items found to pick up")
            end
        end)
        
        print("Quest completion attempts finished!")
    end
})
