-- Function to get all valid egg names in alphabetical order, excluding "Egg Rewind"
local function getEggNames()
    local eggNamesSet = {} -- Use a set to prevent duplicates
    local zones = workspace:FindFirstChild("Zones")

    if zones then
        for _, zone in pairs(zones:GetChildren()) do
            if zone:IsA("Folder") and not zone.Name:match("%d") then -- Ignore zones with numbers
                local interactables = zone:FindFirstChild("Interactables")
                if interactables then
                    local eggs = interactables:FindFirstChild("Eggs")
                    if eggs then
                        for _, egg in pairs(eggs:GetChildren()) do
                            if not egg.Name:lower():find("rewind") then
                                local name = egg.Name
                                name = name:gsub("%s*[Ee][Gg][Gg]%s*$", "") -- Remove 'egg' at end, case-insensitive
                                name = name:match("^%s*(.-)%s*$") -- Trim leading/trailing whitespace
                                eggNamesSet[name] = true
                            end
                        end
                    end
                end
            end
        end
    end

    -- Convert set to list and sort
    local eggNames = {}
    for name in pairs(eggNamesSet) do
        table.insert(eggNames, name)
    end

    table.sort(eggNames)
    return eggNames
end



loadstring(game:HttpGet("https://raw.githubusercontent.com/SenhorLDS/ProjectLDSHUB/refs/heads/main/Anti%20AFK"))()
local Library = loadstring(game:HttpGetAsync("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau"))()
local SaveManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/SaveManager.luau"))()
local InterfaceManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/InterfaceManager.luau"))()


local Window = Library:Window{
    Title = "Squid Games Event",
    SubTitle = "By Duckie",
    TabWidth = 160,
    Size =  UDim2.fromOffset(580, 460),
    Resize = false, 
    Acrylic = true,
    Theme = "Vynixu",
    MinimizeKey = Enum.KeyCode.LeftShift
}


local Tabs = {
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
    AutoFight = Window:AddTab({ Title = "Main", Icon = "crown" }),
    Eggs = Window:AddTab({ Title = "Eggs", Icon = "egg" }),
    Wheel = Window:AddTab({ Title = "Wheels", Icon = "ferris-wheel" }),
    Tower = Window:AddTab({ Title = "Tower", Icon = "castle" }),
    Merchant = Window:AddTab({ Title = "Merchant", Icon = "phosphor-shopping-cart-fill" }),
    Trial = Window:AddTab({ Title = "Trial", Icon = "phosphor-trophy" }),
}



local PlaytimeSection = Tabs.AutoFight:AddSection("Playtime Pass")

local AutoPlaytimeToggle = PlaytimeSection:AddToggle("AutoPlaytime", {
    Title = "Auto Claim Playtime Pass",
    Default = false
})

AutoPlaytimeToggle:OnChanged(function()
    if AutoPlaytimeToggle.Value then
        -- Claim rewards immediately when enabled
        for i = 1, 12 do
            local args = {
                [1] = "Free",
                [2] = i
            }
            game:GetService("ReplicatedStorage").Packages.Knit.Services.EventPassService.RF.ClaimReward:InvokeServer(unpack(args))
        end
        
        -- Start reset/claim loop
        spawn(function()
            while AutoPlaytimeToggle.Value do
                wait(60) -- Wait before reset
                
                -- Reset pass
                game:GetService("ReplicatedStorage").Packages.Knit.Services.EventPassService.RF.Reset:InvokeServer()
                
                -- Claim all rewards after reset
                for i = 1, 12 do
                    local args = {
                        [1] = "Free",
                        [2] = i
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.EventPassService.RF.ClaimReward:InvokeServer(unpack(args))
                end
            end
        end)
    end
end)

local function GetCurrentZone()
    local player = game.Players.LocalPlayer
    if player:GetAttribute("ZoneLaVacasFrozenLake") then
        return "LaVacasFrozenLake"
    elseif player:GetAttribute("ZoneTralalerosBeach") then
        return "TralalerosBeach"
    elseif player:GetAttribute("ZoneBrrBrrPatapimsForest") then
        return "BrrBrrPatapimsForest"
    end
    
    -- Look through workspace as fallback

    local frontmanZone = workspace.Zones:FindFirstChild("TralalerosBeach")
    if frontmanZone then return frontmanZone.Name end

    local glassBridgeZone = workspace.Zones:FindFirstChild("BrrBrrPatapimsForest")
    if glassBridgeZone then return glassBridgeZone.Name end
    
    
    return nil
end

local function GetValidZone(trainingType)
    local zone = GetCurrentZone()
    local fallback = "Pentathlon"
    local replicatedStorage = game:GetService("ReplicatedStorage")

    local function hasData(moduleName)
        local success, module = pcall(function()
            return require(replicatedStorage.Data[moduleName])
        end)
        return success and module and (module[zone] or module[fallback])
    end

    if trainingType == "PunchBags" then
        if workspace.Zones:FindFirstChild(zone)
            and workspace.Zones[zone]:FindFirstChild("Interactables")
            and workspace.Zones[zone].Interactables:FindFirstChild("Training")
            and workspace.Zones[zone].Interactables.Training:FindFirstChild("PunchBags") then
            return zone
        elseif workspace.Zones:FindFirstChild(fallback)
            and workspace.Zones[fallback]:FindFirstChild("Interactables")
            and workspace.Zones[fallback].Interactables:FindFirstChild("Training")
            and workspace.Zones[fallback].Interactables.Training:FindFirstChild("PunchBags") then
            return fallback
        else
            return fallback
        end
    elseif trainingType == "Dumbells" then
        return hasData("Dumbells") and (hasData("Dumbells")[zone] and zone or fallback) or fallback
    elseif trainingType == "Grips" then
        return hasData("Grips") and (hasData("Grips")[zone] and zone or fallback) or fallback
    elseif trainingType == "Barbells" then
        return hasData("Barbells") and (hasData("Barbells")[zone] and zone or fallback) or fallback
    end

    return fallback
end


local function GetBestDuckBag()
    local player = game.Players.LocalPlayer
    local currentZone = GetValidZone(currentTrainingType)
    local fallbackZone = "BrrBrrPatapimsForest"

    if not currentZone then
        return "Tier1"
    end

    local knuckleStrength = player:GetAttribute("TotalBrainrotKnuckles") or 0
    local punchBagData = require(game:GetService("ReplicatedStorage").Data.PunchBags)

    if player:GetAttribute("VIP") == true then
        return "VIP"
    end

    local zoneList = { currentZone, fallbackZone }

    for _, zone in ipairs(zoneList) do
        local bestTier = "Tier1"
        local highestRequired = 0

        if punchBagData and punchBagData[zone] then
            for tier, data in pairs(punchBagData[zone]) do
                if data.StrengthRequired and
                   knuckleStrength >= data.StrengthRequired and
                   data.StrengthRequired > highestRequired then
                    bestTier = tier
                    highestRequired = data.StrengthRequired
                end
            end
            -- Return best tier found in this zone
            return bestTier
        end
    end
end


local function GetBestDuckEquipment(equipmentType)
    local player = game.Players.LocalPlayer
    local currentZone = GetCurrentZone()
    local fallbackZone = "BrrBrrPatapimsForest"

    if not currentZone then
        return { equipment = fallbackZone .. "1", zone = fallbackZone }
    end

    -- Determine attribute and data module based on type
    local dataModule
    local attrMap = {
        Dumbells = "TotalBrainrotBicep",
        Grips = "TotalBrainrotGrip",
        Barbells = "TotalBrainrotBicep"
    }

    if equipmentType ~= "Dumbells" and equipmentType ~= "Grips" and equipmentType ~= "Barbells" then
        equipmentType = "Dumbells"
    end

    dataModule = equipmentType
    local equipmentData

    pcall(function()
        equipmentData = require(game:GetService("ReplicatedStorage").Data[dataModule])
    end)

    if not equipmentData then
        return { equipment = fallbackZone .. "1", zone = fallbackZone }
    end

    -- Zone priority list
    local zoneList = { currentZone, fallbackZone }

    for _, zone in ipairs(zoneList) do
        local defaultEquipment = zone .. "1"
        local bestEquipment = defaultEquipment
        local highestRequired = 0

        -- Use the correct attribute for fallback zone too
        local statValue = player:GetAttribute(attrMap[equipmentType]) or 0

        if equipmentData[zone] then
            for name, data in pairs(equipmentData[zone]) do
                if data.StrengthRequired and 
                   statValue >= data.StrengthRequired and 
                   data.StrengthRequired > highestRequired then
                    bestEquipment = name
                    highestRequired = data.StrengthRequired
                end
            end
            return { equipment = bestEquipment, zone = zone }
        end
    end

    return { equipment = fallbackZone .. "1", zone = fallbackZone }
end

    

-- Add Training Section
local TrainSection = Tabs.AutoFight:AddSection("Auto Train")

local TrainingDropdown = Tabs.AutoFight:AddDropdown("TrainingSelect", {
    Title = "Select Training Type",
    Values = {"Dumbells", "PunchBags", "Grips", "Barbells"}, 
    Multi = false,
    Default = "Dumbells"
})

local AutoTrainToggle = Tabs.AutoFight:AddToggle("AutoTrain", {
    Title = "Auto Train",
    Description = "If this gets an error, turn the toggle off and on again. It occurs when you switch training types with the toggle on :)",
    Default = false
})

-- Variable to store the current training equipment type
local currentTrainingType = nil

AutoTrainToggle:OnChanged(function()
    if AutoTrainToggle.Value then
        -- Store the selected training type when starting
        currentTrainingType = TrainingDropdown.Value
        
        spawn(function()
            local currentZone = GetCurrentZone()
            
            if not currentZone then
                return
            end
            
            if currentTrainingType == "Dumbells" then
                -- Function to equip Dumbells
                local function equipDumbells()
                    local result = GetBestDuckEquipment("Dumbells")
                    local equipment = result.equipment
                    local equipZone = result.zone
                    local args = {
                        [1] = equipZone,
                        [2] = "Dumbells", 
                        [3] = equipment
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onGuiEquipRequest:FireServer(unpack(args))
                end

                -- Equip immediately
                equipDumbells()

                -- Click loop (every 0.6 seconds for Dumbells)
                spawn(function()
                    while AutoTrainToggle.Value and currentTrainingType == "Dumbells" and TrainingDropdown.Value == "Dumbells" do
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onClick:FireServer()
                        wait(0.6)
                    end
                end)

                -- Re-equip loop (every 5 seconds)
                while AutoTrainToggle.Value and currentTrainingType == "Dumbells" and TrainingDropdown.Value == "Dumbells" do
                    wait(5) -- Wait 5 seconds before re-equipping
                    if AutoTrainToggle.Value and currentTrainingType == "Dumbells" and TrainingDropdown.Value == "Dumbells" then
                        equipDumbells()
                    end
                end
                
            elseif currentTrainingType == "Grips" then
                -- Function to equip Grips
                local function equipGrips()
                    local result = GetBestDuckEquipment("Grips")
                    local equipment = result.equipment
                    local equipZone = result.zone
                    local args = {
                        [1] = equipZone,
                        [2] = "Grips", 
                        [3] = equipment
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onGuiEquipRequest:FireServer(unpack(args))
                end

                -- Equip immediately
                equipGrips()

                -- Click loop (every 0.6 seconds for Grips)
                spawn(function()
                    while AutoTrainToggle.Value and currentTrainingType == "Grips" and TrainingDropdown.Value == "Grips" do
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onClick:FireServer()
                        wait(0.6)
                    end
                end)

                -- Re-equip loop (every 5 seconds)
                while AutoTrainToggle.Value and currentTrainingType == "Grips" and TrainingDropdown.Value == "Grips" do
                    wait(5) -- Wait 5 seconds before re-equipping
                    if AutoTrainToggle.Value and currentTrainingType == "Grips" and TrainingDropdown.Value == "Grips" then
                        equipGrips()
                    end
                end
                
            elseif currentTrainingType == "Barbells" then
                -- Function to equip Barbells
                local function equipBarbells()
                    local result = GetBestDuckEquipment("Barbells")
                    local equipment = result.equipment
                    local equipZone = result.zone
                    local args = {
                        [1] = equipZone,
                        [2] = "Barbells", 
                        [3] = equipment
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onGuiEquipRequest:FireServer(unpack(args))
                end

                -- Equip immediately
                equipBarbells()

                -- Click loop (every 1.55 seconds for Barbells)
                spawn(function()
                    while AutoTrainToggle.Value and currentTrainingType == "Barbells" and TrainingDropdown.Value == "Barbells" do
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onClick:FireServer()
                        wait(1.55)
                    end
                end)

                -- Re-equip loop (every 5 seconds)
                while AutoTrainToggle.Value and currentTrainingType == "Barbells" and TrainingDropdown.Value == "Barbells" do
                    wait(5) -- Wait 5 seconds before re-equipping
                    if AutoTrainToggle.Value and currentTrainingType == "Barbells" and TrainingDropdown.Value == "Barbells" then
                        equipBarbells()
                    end
                end
            elseif currentTrainingType == "Pull up bar" then
                -- Add Pull up bar handling
                spawn(function()
                    while AutoTrainToggle.Value and currentTrainingType == "Pull up bar" and TrainingDropdown.Value == "Pull up bar" do
                        local statsArgs = {
                            [1] = "17",
                            [2] = "Tier4"
                        }
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.PullupBarService.RE.onGiveStats:FireServer(unpack(statsArgs))
                        wait(1.55) -- Pull up bar every 1.55 seconds
                    end
                end)
            else -- PunchBags
                spawn(function() 
                    local lastTeleport = 0
                    while AutoTrainToggle.Value and currentTrainingType == "PunchBags" and TrainingDropdown.Value == "PunchBags" do
                        local tier = GetBestDuckBag()
                        local validZone = GetValidZone("PunchBags")
                        
                        -- Try to get the bag from workspace using the valid zone
                        local bag = workspace.Zones[validZone].Interactables.Training.PunchBags:FindFirstChild(tier)
                        
                        if bag then
                            -- Only teleport every 5 seconds
                            local currentTime = tick()
                            if currentTime - lastTeleport >= 5 then
                                local bagCFrame = bag:GetPivot()
                                game.Players.LocalPlayer.Character:PivotTo(bagCFrame * CFrame.new(0, 0, -5))
                                lastTeleport = currentTime
                            end
                            
                            -- Use the punch bag service every 0.2 seconds for knuckles (punch bags)
                            local args = {
                                [1] = validZone,
                                [2] = tier,
                                [3] = game.Players.LocalPlayer:GetAttribute("VIP") == true
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.PunchBagService.RE.onGiveStats:FireServer(unpack(args))
                        end
                        wait(0.2)
                    end
                end)
            end
        end)
    else
        -- Clear the current training type when stopping
        currentTrainingType = nil
    end
end)

TrainingDropdown:OnChanged(function()
    if AutoTrainToggle.Value then
        AutoTrainToggle:Set(false) -- Turn off current training
        wait(0.1) -- Short delay to ensure loops are terminated
        AutoTrainToggle:Set(true) -- Turn on with new selection
    end
end)


-- UI section
local FightSection = Tabs.AutoFight:AddSection("Auto Fight")

local npcLocations = {
    BrrBrrPatapimsForest = workspace.GameObjects.ArmWrestling.BrrBrrPatapimsForest.NPC,
    TralalerosBeach = workspace.GameObjects.ArmWrestling.TralalerosBeach.NPC,
    LaVacasFrozenLake = workspace.GameObjects.ArmWrestling.LaVacasFrozenLake.NPC,
}

local modelNames = {}

-- Gather NPC names from all locations
for _, path in pairs(npcLocations) do
    for _, npc in pairs(path:GetChildren()) do
        if npc:IsA("Model") then
            table.insert(modelNames, npc.Name)
        end
    end
end

table.sort(modelNames)

-- Dropdown
local modelDropdown = Tabs.AutoFight:AddDropdown("ModelDropdown", {
    Title = "Select Boss",
    Values = modelNames,
    Multi = false,
    Searchable = true,
    Default = modelNames[1] or "",
})

-- Auto Click toggle
local AutoClickToggle = Tabs.AutoFight:AddToggle("AutoClick", {
    Title = "Auto Click/Crit",
    Description = "Allows you to win fights over 5x as fast.",
    Default = false
})

-- Auto Fight toggle
local AutoFightToggle = Tabs.AutoFight:AddToggle("AutoFight", {
    Title = "Auto Fight",
    Description = "Automatically starts fights with the selected boss (to beat bosses much faster, enable the Auto Click/Crit toggle).",
    Default = false
})

-- Block the GameAnalyticsError remote event from firing (run once at startup)
pcall(function()
    local gameAnalyticsError = game:GetService("ReplicatedStorage"):FindFirstChild("GameAnalyticsError")
    if gameAnalyticsError then
        gameAnalyticsError.FireServer = function(self, ...)
            return
        end
    end
end)


local AlwaysWin = Tabs.AutoFight:AddButton({
    Title = "Always Win",
    Description = "This makes it impossible to lose, rejoining resets this.",
    Callback = function()
        coroutine.resume(coroutine.create(function()
            local armWrestle = require(game:GetService("ReplicatedStorage").Controllers.Fighting.ArmWrestleController)
            
            -- Method 1: Hook the IncrementPower function
            local originalIncrementPower = armWrestle.IncrementPower
            armWrestle.IncrementPower = function(self, amount)
                -- Always increment by a large positive amount
                originalIncrementPower(self, math.abs(amount or 1) * 1000)
            end
            
            -- Method 2: Continuously set health to max (more reliable)
            spawn(function()
                while armWrestle.Fighting do
                    if armWrestle.Health and armWrestle.MaxHealth then
                        armWrestle.Health = armWrestle.MaxHealth
                    end
                    wait(0.1)
                end
            end)
            
            -- Method 3: Override the UpdateFight function to prevent NPC power
            local originalUpdateFight = armWrestle.UpdateFight
            armWrestle.UpdateFight = function(self)
                -- Do nothing - prevents NPC from gaining power
            end
            
        end))
    end
})



local notefight = Tabs.AutoFight:Paragraph("Note", {
    Title = "Note",
    Content = "If you get an error when you turn the toggles on, try turning them off and on again, this wont effect anything. Furthermore, the speeds in which you win, is further increased if you launch the script twice (Open it enable the toggles, disable them, and then re-execute the script.) ",
    TitleAlignment = "Middle",
    ContentAlignment = Enum.TextXAlignment.Left
})

-- Services
local KnitServices = game:GetService("ReplicatedStorage").Packages.Knit.Services
local ArmwrestleServiceRF = KnitServices:WaitForChild("ArmWrestleService"):WaitForChild("RF")
local ZoneService = KnitServices:WaitForChild("ZoneService"):WaitForChild("RE")

-- Variables
local autoClickThreads = {}
local autoFightThreads = {}
local cleanupConnections = {}
local lastZoneCheck = 0

-- Function to teleport to the correct zone for an NPC
local function teleportToNpcZone(npcName)
    local player = game.Players.LocalPlayer
    local playerCurrentZone = player:GetAttribute("CurrentZone")
    
    -- Find which zone the NPC is in
    local npcZone = nil
    for zoneName, path in pairs(npcLocations) do
        if path:FindFirstChild(npcName) then
            npcZone = zoneName == "BrrBrrPatapimsForest" and "BrrBrrPatapimsForest" or zoneName
            break
        end
    end
    
    -- If NPC zone found and different from current zone, teleport
    if npcZone and playerCurrentZone ~= npcZone then
        -- Get the teleport destination
        local teleportDest = workspace.Zones[npcZone].Interactables.Teleports.Locations.Spawn
        
        if teleportDest then
            -- Teleport to the appropriate zone
            local args = {
                [1] = teleportDest
            }
            
            ZoneService.teleport:FireServer(unpack(args))
            
            -- Wait for teleport to complete
            task.wait(2.5)

            return true
        end
    end
    return npcZone ~= nil
end

-- Cleanup function to clear pending requests
local function cleanupRequests()
    -- Get memory info before cleanup
    local memoryBefore = gcinfo()
    
    -- Force garbage collection to clear pending requests
    collectgarbage("count")
    
    -- Get memory info after cleanup
    local memoryAfter = gcinfo()
    
    pcall(function()
        -- Clear any pending remote calls by briefly disconnecting
        local temp = ArmwrestleServiceRF
        task.wait(0.01)
    end)
end

-- Auto Click toggle handler
AutoClickToggle:OnChanged(function()
    if AutoClickToggle.Value then
        -- Stop existing threads and cleanup
        for _, thread in pairs(autoClickThreads) do
            if typeof(thread) == "thread" then
                task.cancel(thread)
            elseif typeof(thread) == "table" then
                thread.active = false
            end
        end
        autoClickThreads = {}
        
        -- Stop any existing cleanup connections
        if cleanupConnections.autoClick then
            cleanupConnections.autoClick:Disconnect()
        end
        
        -- Spawn new click threads
        task.spawn(function()
            for i = 1, 500 do
                local threadData = { active = true }
                table.insert(autoClickThreads, threadData)
                
                task.spawn(function()
                    while threadData.active and AutoClickToggle.Value do
                        pcall(function()
                            ArmwrestleServiceRF:WaitForChild("RequestClick"):InvokeServer()
                            ArmwrestleServiceRF:WaitForChild("RequestCritHit"):InvokeServer()
                        end)
                        task.wait()
                    end
                end)
                
                task.wait(0.001) -- Small delay between thread spawns to prevent all spawning at once
            end
        end)
        
        -- Start cleanup timer for auto click
        cleanupConnections.autoClick = task.spawn(function()
            while AutoClickToggle.Value do
                task.wait(5) -- Wait 5 seconds
                if AutoClickToggle.Value then
                    cleanupRequests()
                end
            end
        end)
    else
        -- Disable all click threads
        for _, thread in pairs(autoClickThreads) do
            if typeof(thread) == "thread" then
                task.cancel(thread)
            elseif typeof(thread) == "table" then
                thread.active = false
            end
        end
        autoClickThreads = {}
        
        -- Stop cleanup timer
        if cleanupConnections.autoClick then
            task.cancel(cleanupConnections.autoClick)
            cleanupConnections.autoClick = nil
        end
        
        -- Final cleanup
        cleanupRequests()
    end
end)

-- Auto Fight toggle handler
AutoFightToggle:OnChanged(function()
    if AutoFightToggle.Value then
        -- First try to teleport to correct zone if needed
        local selectedName = modelDropdown.Value
        teleportToNpcZone(selectedName)
        
        -- Stop previous threads and cleanup
        for _, flag in pairs(autoFightThreads) do
            flag.active = false
        end
        autoFightThreads = {}
        
        -- Stop any existing cleanup connections
        if cleanupConnections.autoFight then
            cleanupConnections.autoFight:Disconnect()
        end
        
        -- Spawn threads for repeated boss fights
        for i = 1, 500 do
            local threadFlag = { active = true }
            table.insert(autoFightThreads, threadFlag)
            
            task.spawn(function()
                while threadFlag.active and AutoFightToggle.Value do
                    local selectedName = modelDropdown.Value
                    if selectedName then
                        -- Check if we need to teleport (periodically)
                        local currentTime = tick()
                        if currentTime - lastZoneCheck > 10 then
                            teleportToNpcZone(selectedName)
                            lastZoneCheck = currentTime
                        end
                        
                        -- Request fight with selected NPC
                        local args = {
                            [1] = selectedName
                        }
                        
                        pcall(function()
                            ArmwrestleServiceRF:WaitForChild("RequestStartFight"):InvokeServer(unpack(args))
                        end)
                    end
                    task.wait(0.01)
                end
            end)
            
            task.wait(0.001) -- Small delay between thread spawns
        end
        
        -- Start cleanup timer for auto fight
        cleanupConnections.autoFight = task.spawn(function()
            while AutoFightToggle.Value do
                task.wait(5) -- Wait 5 seconds
                if AutoFightToggle.Value then
                    cleanupRequests()
                end
            end
        end)
    else
        -- Stop all fight threads
        for _, flag in pairs(autoFightThreads) do
            flag.active = false
        end
        autoFightThreads = {}
        
        -- Stop cleanup timer
        if cleanupConnections.autoFight then
            task.cancel(cleanupConnections.autoFight)
            cleanupConnections.autoFight = nil
        end
        
        -- Final cleanup
        cleanupRequests()
    end
end)

-- Add zone check when dropdown selection changes
modelDropdown:OnChanged(function()
    if AutoFightToggle.Value then
        local selectedName = modelDropdown.Value
        teleportToNpcZone(selectedName)
        lastZoneCheck = tick()
    end
end)

local function aggressiveCleanup()
    -- Get memory info before cleanup
    local memoryBefore = gcinfo()
    
    -- Method 1: Force disconnect and reconnect to service
    pcall(function()
        local oldService = ArmwrestleServiceRF
        ArmwrestleServiceRF = KnitServices:WaitForChild("ArmWrestleService"):WaitForChild("RF")
    end)
    
    -- Method 2: Clear all pending coroutines
    collectgarbage("count")
    
    -- Method 3: Brief pause to let network catch up
    task.wait(0.1)
    
    -- Get memory info after cleanup
    local memoryAfter = gcinfo()  
end

local EggSection = Tabs.Eggs:AddSection("Eggs")

-- Hatch Amount Dropdown
local HatchAmountDropdown = Tabs.Eggs:AddDropdown("HatchAmount", {
    Title = "Hatch Amount",
    Values = {"1x", "3x", "8x", "30x", "Max"},
    Multi = false,
    Default = "1x"
})

-- Egg Selection Dropdown (Populated Dynamically)
local eggNames = getEggNames()
local EggDropdown = Tabs.Eggs:AddDropdown("EggSelect", {
    Title = "Select Egg",
    Values = eggNames,
    Multi = false,
    Default = eggNames[1] or "None"
})

-- Auto Hatch Toggle
local AutoHatchToggle = Tabs.Eggs:AddToggle("AutoHatch", {
    Title = "Auto Hatch",
    Default = false
})

AutoHatchToggle:OnChanged(function()
    if AutoHatchToggle.Value then
        spawn(function()
            while AutoHatchToggle.Value do
                local selectedEgg = EggDropdown.Value
                local hatchMultiplier = HatchAmountDropdown.Value

                local args = {}

                if hatchMultiplier == "1x" then
                    args = {selectedEgg, nil, nil, false, nil}
                elseif hatchMultiplier == "3x" then
                    args = {selectedEgg, nil, true, false}
                elseif hatchMultiplier == "8x" then
                    args = {selectedEgg, nil, false, true, true}
                elseif hatchMultiplier == "30x" or hatchMultiplier == "Max" then
                    args = {selectedEgg, nil, nil, false, nil, true}
                end

                -- Invoke server call to hatch egg
                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                wait(0.25)
            end
        end)
    end
end)


local WheelSection = Tabs.Wheel:AddSection("Tralalero Fortune Wheel")

local GhostFortuneSpinDropdown = Tabs.Wheel:AddDropdown("GhostFortuneSpinAmount", {
    Title = "Spin Amount",
    Description = "Select Wheel Spin Amount",
    Values = {"1x", "3x", "10x"},
    Multi = false,
    Default = "1x"
})

local AutoGhostFortuneToggle = Tabs.Wheel:AddToggle("AutoGhostFortuneSpin", {
    Title = "Auto spin Tralalero Fortune wheel",
    Default = false
})

AutoGhostFortuneToggle:OnChanged(function()
    if AutoGhostFortuneToggle.Value then
        spawn(function()
            while true do
                if not AutoGhostFortuneToggle.Value then break end
                
                local args = {
                    [1] = "Tralalero Fortune",
                    [2] = GhostFortuneSpinDropdown.Value == "3x" and "x10" or GhostFortuneSpinDropdown.Value == "10x" and "x25" or nil
                }
                game:GetService("ReplicatedStorage").Packages.Knit.Services.SpinnerService.RF.Spin:InvokeServer(unpack(args))
                
                wait(1)
            end
        end)
    end
end)

local TowerSection = Tabs.Tower:AddSection("Brainrot Tower")


-- Prison Cave Buttons
TowerSection:AddButton({
    Title = "Use Brainrot Keys (1x)",
    Description = "Use the Brainrot Key once.",
    Callback = function()
        local args = {
            [1] = "BrainrotTower",
            [2] = false
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
    end
})

TowerSection:AddButton({
    Title = "Use All Brainrot Keys (250x)",
    Description = "Use All Brainrot Keys (max 250 at a time).",
    Callback = function()
        local args = {
            [1] = "BrainrotTower",
            [2] = true
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
    end
})




local MerchantSection = Tabs.Merchant:AddSection("Brainrot Market")

-- Dropdown for selecting items
local DuckShopDropdown = Tabs.Merchant:AddDropdown("DuckShopDropdown", {
    Title = "Select Shop Item(s)",
    Values = {
        "Banana",
        "Raspberry",
        "Training Potion 1",
        "Training Potion 2",
        "Brainrot Season Egg",
        "Exclusive Party Egg",
        "Tralalero Medal",
        "Training Potion 3",
        "Pet Equips",
        "Lucky 7 Enchantment"
    },
    Multi = true,
    Default = {}
})

-- Variable to store selected items
local selectedShopItems = {}

-- Set the callback for the dropdown
DuckShopDropdown:OnChanged(function(value)
    selectedShopItems = value
end)

-- Item slot mapping
local itemSlots = {
    ["Banana"] = 1,
    ["Raspberry"] = 2,
    ["Training Potion 1"] = 3,
    ["Training Potion 2"] = 4,
    ["Brainrot Season Egg"] = 5,
    ["Exclusive Party Egg"] = 6,
    ["Tralalero Medal"] = 7,
    ["Training Potion 3"] = 8,
    ["Pet Equips"] = 8,
    ["Lucky 7 Enchantment"] = 9,
} 
-- Buy quantities
local buyQuantities = {
    ["Banana"] = 100,
    ["Raspberry"] = 50,
    ["Training Potion 1"] = 15,
    ["Training Potion 2"] = 25,
    ["Brainrot Season Egg"] = 10,
    ["Exclusive Party Egg"] = 3,
    ["Tralalero Medal"] = 1,
    ["Training Potion 3"] = 3,
    ["Pet Equips"] = 1,
    ["Lucky 7 Enchantment"] = 1,
}

-- Buy All (Selected) button
local BuyAllButton = Tabs.Merchant:AddButton({
    Title = "Buy All (Selected)",
    Description = "Once Clicked you can't stop it. Make sure to click this is you are sure you want to buy all selected items.",
    Callback = function()
        task.spawn(function()
            -- Check if any items are selected
            if not selectedShopItems or not next(selectedShopItems) then
                return
            end
            
            for itemName, isSelected in pairs(selectedShopItems) do
                if isSelected then -- Make sure the item is actually selected
                    local slotNumber = itemSlots[itemName]
                    local quantity = buyQuantities[itemName]

                    if slotNumber and quantity then
                        local args = {
                            [1] = "BrainrotMarket",
                            [2] = slotNumber
                        }

                        for i = 1, quantity do
                            pcall(function()
                                game:GetService("ReplicatedStorage").Packages.Knit.Services.ItemShopService.RF.Buy:InvokeServer(unpack(args))
                            end)
                            task.wait(0.25)
                        end

                        task.wait(1) -- small delay between items
                    end
                end
            end
        end)
    end
})


-- Create SuperRB Section
local EventSection = Tabs.Merchant:AddSection("Individual Items")

-- Add Load Script Button
EventSection:AddButton({
    Title = "Load better Merchant script",
    Description = "This allows you to select individual items, but MAY cause lag.",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/bigbeanscripts/SeperateMerchant/refs/heads/main/LessLag"))()
    end
})

local MerchantSection = Tabs.Merchant:AddSection("Frozen Merchant")

local BlackMarketDropdown = Tabs.Merchant:AddDropdown("BlackMarketDropdown", {
    Title = "Select Merchant Slot(s)",
    Values = {1, 2, 3, 4, 5},
    Multi = true,
    Default = {}
})

local AutoBuyToggle = Tabs.Merchant:AddToggle("AutoBuyToggle", {
    Title = "Auto Buy (Selected Slots)",
    Default = false
})

AutoBuyToggle:OnChanged(function()
    if AutoBuyToggle.Value then
        spawn(function()
            while true do
                if not AutoBuyToggle.Value then break end
                -- Buy 3 times
                for i = 1, 3 do
                    for number, isSelected in pairs(BlackMarketDropdown.Value) do
                        if isSelected then
                            local args = {
                                [1] = "Frozen Merchant",
                                [2] = number
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.LimitedMerchantService.RF.BuyItem:InvokeServer(unpack(args))
                            wait(1)
                        end
                    end
                end
                wait(30) -- Wait 30 seconds before next cycle
            end
        end)
    end
end)


local DragonTrialSection = Tabs.Trial:AddSection("Icy Trial")

-- Toggle state tracking
local wasAutoFightOn = false
local wasAutoClickOn = false
local lastJoinAttemptTime = 0
local togglesDisabled = false
player = game.Players.LocalPlayer

-- Status paragraph for cooldown
local DragonTrialStatus = DragonTrialSection:Paragraph("Cooldown",{
    Title = "Icy Trial Cooldown",
    Content = "Loading..."
})

-- Update trial status text
spawn(function()
    while true do
        local success, timerGui = pcall(function()
            return player.PlayerGui.Misc.Trials.Timer.Icy.Timer
        end)
        
        if success and timerGui then
            DragonTrialStatus:SetContent(timerGui.Text)
        else
            DragonTrialStatus:SetContent("Error getting timer")
        end
        wait(1)
    end
end)

-- Auto join trial toggle
local AutoDragonTrialToggle = DragonTrialSection:AddToggle("AutoDragonTrial", {
    Title = "Auto Join Icy Trial",
    Description = "Temporarily disables Auto Fight/Click. Re-enables them after trial ends.",
    Default = false
})

-- Crit & Click Threads Control
local RequestCritHit = KnitServices:WaitForChild("ArmWrestleService"):WaitForChild("RF"):WaitForChild("RequestCritHit")

local critThreads = {}
local critLoopRunning = false

-- Start Crit Threads
local function startCritThreads()
    if critLoopRunning then return end
    critLoopRunning = true

    for i = 1, 10 do
        local threadIndex = i
        critThreads[threadIndex] = true

        task.spawn(function()
            while critThreads[threadIndex] and AutoDragonTrialToggle.Value do
                pcall(function()
                    wait(0.01) -- Wait a bit before sending crit request
                    RequestCritHit:InvokeServer()
                end)
                task.wait(0.1)
            end
        end)
    end
end

-- Stop Crit Threads
local function stopCritThreads()
    critLoopRunning = false
    for i = 1, #critThreads do
        critThreads[i] = false
    end
    critThreads = {}
end

-- Teleport function
local function teleportToSelectedNPCZone()
    local selectedNPC = modelDropdown.Value
    if not selectedNPC then return end
    
    -- Check which zone the selected NPC is in
    local targetZone = nil
    
    -- Check BrrBrrPatapimsForest NPCs
    local forestNPCs = workspace.GameObjects.ArmWrestling.BrrBrrPatapimsForest.NPC:GetChildren()
    for _, npc in pairs(forestNPCs) do
        if npc:IsA("Model") and npc.Name == selectedNPC then
            targetZone = workspace.Zones.BrrBrrPatapimsForest.Interactables.Teleports.Locations.Spawn
            break
        end
    end
    
    -- Check TralalerosBeach NPCs if not found in BrrBrrPatapimsForest
    if not targetZone then
        local beachNPCs = workspace.GameObjects.ArmWrestling.TralalerosBeach.NPC:GetChildren()
        for _, npc in pairs(beachNPCs) do
            if npc:IsA("Model") and npc.Name == selectedNPC then
                targetZone = workspace.Zones.TralalerosBeach.Interactables.Teleports.Locations.Spawn
                break
            end
        end
    end
    
    -- Check LaVacasFrozenLake NPCs if not found in the other zones
    if not targetZone then
        local lakeNPCs = workspace.GameObjects.ArmWrestling.LaVacasFrozenLake.NPC:GetChildren()
        for _, npc in pairs(lakeNPCs) do
            if npc:IsA("Model") and npc.Name == selectedNPC then
                targetZone = workspace.Zones.LaVacasFrozenLake.Interactables.Teleports.Locations.Spawn
                break
            end
        end
    end
    
    -- Teleport to the determined zone
    if targetZone then
        pcall(function()
            local args = {
                [1] = targetZone
            }
            game:GetService("ReplicatedStorage").Packages.Knit.Services.ZoneService.RE.teleport:FireServer(unpack(args))
        end)
    end
end

AutoDragonTrialToggle:OnChanged(function()
    if AutoDragonTrialToggle.Value then
        spawn(function()
            while AutoDragonTrialToggle.Value do
                local success, timerGui = pcall(function()
                    return player.PlayerGui.Misc.Trials.Timer.Icy.Timer
                end)

                if success and timerGui then
                    if timerGui.Text == "Ready!" then

                        local currentTime = os.time()
                        if currentTime - lastJoinAttemptTime < 180 then
                            wait(1)
                            continue
                        end

                        if not togglesDisabled then
                            wasAutoFightOn = AutoFightToggle and AutoFightToggle.Value or false
                            wasAutoClickOn = AutoClickToggle and AutoClickToggle.Value or false

                            if wasAutoFightOn then
                                AutoFightToggle:SetValue(false)
                                wait(2)
                            end
                            
                            if wasAutoClickOn then
                                AutoClickToggle:SetValue(false)
                                wait(2)
                            end
                            
                            togglesDisabled = true
                        end

                        wait(2)

                    
                        local args = { "Icy" }
                        local result = KnitServices.ChampionshipService.RF.RequestJoin:InvokeServer(unpack(args))
                        wait(1)
                        startCritThreads()
                        lastJoinAttemptTime = os.time()
                    else
                        stopCritThreads()

                        if togglesDisabled then
                            wait(5)

                            -- Teleport to the selected NPC zone before re-enabling toggles
                            teleportToSelectedNPCZone()
                            wait(2)

                            if wasAutoFightOn and AutoFightToggle then
                                AutoFightToggle:SetValue(true)
                                wait(1)
                                AutoFightToggle:SetValue(false)
                                wait(1)
                                AutoFightToggle:SetValue(true)
                            end
                            
                            if wasAutoClickOn and AutoClickToggle then
                                AutoClickToggle:SetValue(true)
                                wait(1)
                                AutoClickToggle:SetValue(false)     
                                wait(1)
                                AutoClickToggle:SetValue(true)
                                wait(3)
                            end

                            wasAutoFightOn = false
                            wasAutoClickOn = false
                            togglesDisabled = false
                        end
                    end
                end
                wait(1)
            end
        end)
    else
        stopCritThreads()
    end
end)

local VillainChestSection = Tabs.Trial:AddSection("Icy Chest")

-- Paragraph to display current key amount
local VillainChestStatus = VillainChestSection:Paragraph("Trial", {
    Title = "Icy Chest Key Amount",
    Content = "Loading..."
})

-- Parses values like "1.2K", "3.4M", or "250"
local function parseAmount(amtText)
    local numStr = amtText:match("%d+%.?%d*")
    local baseNum = tonumber(numStr)
    if not baseNum then return 0 end

    if amtText:find("[Kk]") then
        return baseNum * 1_000
    elseif amtText:find("[Mm]") then
        return baseNum * 1_000_000
    else
        return baseNum
    end
end

-- Keep key amount status updated every second
spawn(function()
    while true do
        local success, keyObject = pcall(function()
            return player.PlayerGui.GameUI.Menus.Inventory.Display.Items.MainFrame.ScrollingFrame.KeysStorage.Objects["Icy Key/1"]
        end)

        if success and keyObject and keyObject:FindFirstChild("ButtonDisplay") then
            local amtText = keyObject.ButtonDisplay.Amt.Text or "0"
            VillainChestStatus:SetContent(amtText)
        else
            VillainChestStatus:SetContent("No Keys")
        end

        task.wait(1)
    end
end)

-- Auto open toggle
local AutoOpenVillainChestToggle = VillainChestSection:AddToggle("AutoOpenIcyChest", {
    Title = "Auto Open Icy Chest",
    Description = "Automatically opens the Icy Chest if you have a key.",
    Default = false
})

AutoOpenVillainChestToggle:OnChanged(function()
    if AutoOpenVillainChestToggle.Value then
        spawn(function()
            while AutoOpenVillainChestToggle.Value do
                local success, keyObject = pcall(function()
                    return player.PlayerGui.GameUI.Menus.Inventory.Display.Items.MainFrame.ScrollingFrame.KeysStorage.Objects["Icy Key/1"]
                end)

                if success and keyObject and keyObject:FindFirstChild("ButtonDisplay") then
                    local amtText = keyObject.ButtonDisplay.Amt.Text or "0"
                    local amount = parseAmount(amtText)

                    if amount > 0 then
                        pcall(function()
                            game:GetService("ReplicatedStorage")
                                .Packages.Knit.Services.ChestService.RF.Open
                                :InvokeServer("IcyChest")
                        end)
                    end
                end

                task.wait(0.2)
            end
        end)
    end
end)



-- Hand the library over to our managers
SaveManager:SetLibrary(Library)
InterfaceManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes{}

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab("Settings")

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()


